{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-ADF-Development"
		},
		"ARESRV476_Arendal_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ARESRV476_Arendal'"
		},
		"AzureDatabricks_development_connection_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks_development_connection'"
		},
		"OLTP05_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OLTP05'"
		},
		"OracelStageITF_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracelStageITF'"
		},
		"OracleAzureDwh_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracleAzureDwh'"
		},
		"OracleCStage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracleCStage'"
		},
		"OracleDbParisPoolScrAmster_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracleDbParisPoolScrAmster'"
		},
		"OracleDbParisScrAmster_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracleDbParisScrAmster'"
		},
		"sql_server_development_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_server_development_connection'"
		},
		"sql_server_operations_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_server_operations_connection'"
		},
		"ADF_dev_linked_service_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dwh-development-keyvault.vault.azure.net/"
		},
		"ARESRV476_Arendal_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\ARESRV476\\Arendal\\"
		},
		"ARESRV476_Arendal_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "audun.taraldsen@gard.no"
		},
		"AzureDataLakeStorage_test_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dwhdatalakedevelopment.dfs.core.windows.net"
		},
		"dwhdatalakedevelopment_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dwhdatalakedevelopment.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyAzureToOraclePeatable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_uhu",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dwh_stage.p_peatable"
							},
							{
								"name": "Destination",
								"value": "AZURE_DWH.P_PEATABLE"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "peapeaid",
											"type": "Int64"
										},
										"sink": {
											"name": "PEAPEAID",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaccode",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACCODE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacomp2",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACOMP2",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastopuse",
											"type": "String"
										},
										"sink": {
											"name": "PEASTOPUSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peainvisible",
											"type": "String"
										},
										"sink": {
											"name": "PEAINVISIBLE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peapersid",
											"type": "String"
										},
										"sink": {
											"name": "PEAPERSID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peacolid",
											"type": "String"
										},
										"sink": {
											"name": "PEACOLID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peamdescr",
											"type": "String"
										},
										"sink": {
											"name": "PEAMDESCR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pealang2",
											"type": "String"
										},
										"sink": {
											"name": "PEALANG2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peabirtws",
											"type": "Byte"
										},
										"sink": {
											"name": "PEABIRTWS",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peasubtype",
											"type": "Int16"
										},
										"sink": {
											"name": "PEASUBTYPE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peabirtno",
											"type": "String"
										},
										"sink": {
											"name": "PEABIRTNO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peasw10",
											"type": "String"
										},
										"sink": {
											"name": "PEASW10",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peapersrfl",
											"type": "Int64"
										},
										"sink": {
											"name": "PEAPERSRFL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastopcod",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASTOPCOD",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "pearesdat",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEARESDAT",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peanopurr",
											"type": "String"
										},
										"sink": {
											"name": "PEANOPURR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaincreday",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAINCREDAY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaingiro",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAINGIRO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaingirono",
											"type": "String"
										},
										"sink": {
											"name": "PEAINGIRONO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peanotaco",
											"type": "Byte"
										},
										"sink": {
											"name": "PEANOTACO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peapurtyp",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAPURTYP",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peanotlay",
											"type": "Byte"
										},
										"sink": {
											"name": "PEANOTLAY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peanotsort",
											"type": "Byte"
										},
										"sink": {
											"name": "PEANOTSORT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaswink",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASWINK",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaoutcreday",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAOUTCREDAY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaoutgiro",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAOUTGIRO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaoutgirono",
											"type": "String"
										},
										"sink": {
											"name": "PEAOUTGIRONO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaswrun",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASWRUN",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaclomet",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLOMET",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peanopdue",
											"type": "Byte"
										},
										"sink": {
											"name": "PEANOPDUE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastatyp",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASTATYP",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastaamt",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASTAAMT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peasttniv",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASTTNIV",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastaniv",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASTANIV",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaprovad",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAPROVAD",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaprotyp",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAPROTYP",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacloclm",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLOCLM",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaclmadv",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLMADV",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaaprobo",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAAPROBO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaaaddbo",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAAADDBO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaaclobo",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAACLOBO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaaclmbo",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAACLMBO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaacorbo",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAACORBO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peamexcdate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEAMEXCDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peamexcurr",
											"type": "String"
										},
										"sink": {
											"name": "PEAMEXCURR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peamexamt",
											"type": "Int64"
										},
										"sink": {
											"name": "PEAMEXAMT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peamexpro",
											"type": "Decimal"
										},
										"sink": {
											"name": "PEAMEXPRO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacclcurr",
											"type": "String"
										},
										"sink": {
											"name": "PEACCLCURR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peacclamt",
											"type": "Int64"
										},
										"sink": {
											"name": "PEACCLAMT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaccint",
											"type": "String"
										},
										"sink": {
											"name": "PEACCINT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaccintr",
											"type": "Decimal"
										},
										"sink": {
											"name": "PEACCINTR",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacalcurr",
											"type": "String"
										},
										"sink": {
											"name": "PEACALCURR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peacalamt",
											"type": "Int64"
										},
										"sink": {
											"name": "PEACALAMT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaxlcurr",
											"type": "String"
										},
										"sink": {
											"name": "PEAXLCURR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaxlpoin",
											"type": "Int64"
										},
										"sink": {
											"name": "PEAXLPOIN",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaiyear",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAIYEAR",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastensw",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASTENSW",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastdate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEASTDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peaendate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEAENDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peamaxper",
											"type": "Decimal"
										},
										"sink": {
											"name": "PEAMAXPER",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaiediv",
											"type": "String"
										},
										"sink": {
											"name": "PEAIEDIV",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaiebusndiv",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAIEBUSNDIV",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaie2busndiv",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAIE2BUSNDIV",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaie3busndiv",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAIE3BUSNDIV",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaiesect",
											"type": "String"
										},
										"sink": {
											"name": "PEAIESECT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaiebusnse",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAIEBUSNSE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaie2busnse",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAIE2BUSNSE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaie3busnse",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAIE3BUSNSE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaieint",
											"type": "String"
										},
										"sink": {
											"name": "PEAIEINT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaieint1",
											"type": "String"
										},
										"sink": {
											"name": "PEAIEINT1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaieint2",
											"type": "String"
										},
										"sink": {
											"name": "PEAIEINT2",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaieint3",
											"type": "String"
										},
										"sink": {
											"name": "PEAIEINT3",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaieint4",
											"type": "String"
										},
										"sink": {
											"name": "PEAIEINT4",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaieint5",
											"type": "String"
										},
										"sink": {
											"name": "PEAIEINT5",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaiecond",
											"type": "String"
										},
										"sink": {
											"name": "PEAIECOND",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaiecon1",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAIECON1",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaiecon2",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAIECON2",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaiecon3",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAIECON3",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaiecon4",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAIECON4",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaiecon5",
											"type": "Int16"
										},
										"sink": {
											"name": "PEAIECON5",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacrdate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEACRDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peacrsign",
											"type": "String"
										},
										"sink": {
											"name": "PEACRSIGN",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pealudate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEALUDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "pealusign",
											"type": "String"
										},
										"sink": {
											"name": "PEALUSIGN",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peasex",
											"type": "String"
										},
										"sink": {
											"name": "PEASEX",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "date_inserted",
											"type": "DateTime"
										},
										"sink": {
											"name": "DATE_INSERTED",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "date_last_updated",
											"type": "DateTime"
										},
										"sink": {
											"name": "DATE_LAST_UPDATED",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "inserted_by",
											"type": "String"
										},
										"sink": {
											"name": "INSERTED_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "last_updated_by",
											"type": "String"
										},
										"sink": {
											"name": "LAST_UPDATED_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "map_date",
											"type": "DateTime"
										},
										"sink": {
											"name": "MAP_DATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peaorgno",
											"type": "String"
										},
										"sink": {
											"name": "PEAORGNO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaclosmailfreq",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLOSMAILFREQ",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaclmmailfreq",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLMMAILFREQ",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peastoppremnote",
											"type": "String"
										},
										"sink": {
											"name": "PEASTOPPREMNOTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaingiroludate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEAINGIROLUDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peainvnotify",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAINVNOTIFY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacorrmailfreq",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACORRMAILFREQ",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaingirolusign",
											"type": "String"
										},
										"sink": {
											"name": "PEAINGIROLUSIGN",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaknvmark",
											"type": "String"
										},
										"sink": {
											"name": "PEAKNVMARK",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaprenotify",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAPRENOTIFY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaclamailfreq",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLAMAILFREQ",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaaddbor",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAADDBOR",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaprobor",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAPROBOR",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peapurnotify",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAPURNOTIFY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaclmbor",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLMBOR",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaoutgiroludate",
											"type": "DateTime"
										},
										"sink": {
											"name": "PEAOUTGIROLUDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "peaclmintynsw",
											"type": "String"
										},
										"sink": {
											"name": "PEACLMINTYNSW",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peamailsizemb",
											"type": "Decimal"
										},
										"sink": {
											"name": "PEAMAILSIZEMB",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaclobor",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACLOBOR",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacorbo",
											"type": "Byte"
										},
										"sink": {
											"name": "PEACORBO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaaclmadv",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAACLMADV",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peausecolfee",
											"type": "String"
										},
										"sink": {
											"name": "PEAUSECOLFEE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaoutgirolusign",
											"type": "String"
										},
										"sink": {
											"name": "PEAOUTGIROLUSIGN",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaaddmailfreq",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAADDMAILFREQ",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peasttprmclm",
											"type": "Byte"
										},
										"sink": {
											"name": "PEASTTPRMCLM",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peaprovmailfreq",
											"type": "Byte"
										},
										"sink": {
											"name": "PEAPROVMAILFREQ",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peadueday",
											"type": "Byte"
										},
										"sink": {
											"name": "PEADUEDAY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peanotdays",
											"type": "Int16"
										},
										"sink": {
											"name": "PEANOTDAYS",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peafromcomp",
											"type": "Int64"
										},
										"sink": {
											"name": "PEAFROMCOMP",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "peacrmid",
											"type": "Int64"
										},
										"sink": {
											"name": "PEACRMID",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "pealeicode",
											"type": "String"
										},
										"sink": {
											"name": "PEALEICODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaextid",
											"type": "String"
										},
										"sink": {
											"name": "PEAEXTID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "peaextid2",
											"type": "String"
										},
										"sink": {
											"name": "PEAEXTID2",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Sourceazurepeatable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Oracle_destination_peatable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "copy job/marts_to_oracle"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sourceazurepeatable')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_destination_peatable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyOltp05ConfigFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_Configfile",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "AZURE_READ.AZURE_CONFIG"
							},
							{
								"name": "Destination",
								"value": "raw/Static/config_file.parquet"
							}
						],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select table_name table_name from azure_config \nwhere oracle_schema_name not like 'AGRINT'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "oracle_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "lake_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_configfile_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/lake_configfile_oltp05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Agresso')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Temp copy job to get the Agresso data",
				"activities": [
					{
						"name": "ForEach_Agresso",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_Agresso",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "STAGE_ITF.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "dwh-stage/Agresso/@{item().destination.fileName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "scr_oracle_agresso",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Agresso",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().destination.fileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "S_UDV_EMPLOYEE"
								},
								"destination": {
									"fileName": "udv_employee.parquet"
								}
							},
							{
								"source": {
									"table": "S_UDV_OFFICE"
								},
								"destination": {
									"fileName": "udv_office.parquet"
								}
							},
							{
								"source": {
									"table": "S_UDV_ORGUNIT"
								},
								"destination": {
									"fileName": "udv_orgunit.parquet"
								}
							}
						]
					}
				},
				"folder": {
					"name": "copy job/dwh_stage/Agresso"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/scr_oracle_agresso')]",
				"[concat(variables('factoryId'), '/datasets/Agresso')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_oltp05_from_Lake_Sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "temp copy job from lake to sql. This was used in the test when the db was not up running.",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "lake_Oltp05_configfile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_statictables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Static",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dwh-stage/Static/@{item().TABLE_NAME}"
										},
										{
											"name": "Destination",
											"value": "dwh_stage.@{trim(replace(item().TABLE_NAME,'\"',' ')) }"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "tables_oltp05_lake",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dwh_stage_oltp05_sql",
											"type": "DatasetReference",
											"parameters": {
												"SinkDataset": {
													"value": "@trim(replace(item().TABLE_NAME,'\"',' ')) ",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"SourceContainer": {
						"type": "string"
					},
					"SourceDirectory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lake_Oltp05_configfile')]",
				"[concat(variables('factoryId'), '/datasets/tables_oltp05_lake')]",
				"[concat(variables('factoryId'), '/datasets/dwh_stage_oltp05_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_Sf_Company')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_sf_company",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "m_sf_company",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SfCompanyNew": {
										"fileName": "\"sf_company_new\""
									},
									"SfCompany": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/m_sf_company')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_exact_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_oltp05",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select table_name table_name from azure_config where oracle_schema_name = 'EXACT_SRC'\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOltp05",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_oltp05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_oltp05').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Oltp05",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().table_name} ",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "oracle_exact",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Exact",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_configfile_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/oracle_exact')]",
				"[concat(variables('factoryId'), '/datasets/Exact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_exchange_rate_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UntilExRateOraSrcecmplte",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('inside_lkp_exchange_rate_status').output.firstRow.load_completion_status,'Y')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 180
									}
								},
								{
									"name": "inside_lkp_exchange_rate_status",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": "select \"load_completion_status\" from \"hlp_exchange_rate_status\"",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "oracle_exchange_rate_status",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "inside_lkp_exchange_rate_status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vSourceLoadstatus",
										"value": {
											"value": "@activity('inside_lkp_exchange_rate_status').output.firstRow.load_completion_status",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.01:00:00"
						}
					},
					{
						"name": "copy_hlp_exchange_rate",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "UntilExRateOraSrcecmplte",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "oracle_exchange_rate",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "stage_hlp_exchange_rate",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"variables": {
					"vSourceLoadstatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_exchange_rate')]",
				"[concat(variables('factoryId'), '/datasets/stage_hlp_exchange_rate')]",
				"[concat(variables('factoryId'), '/datasets/oracle_exchange_rate_status')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_lloyds_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_oltp05",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select table_name table_name from azure_config where oracle_schema_name = 'LLOYDS'\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOltp05",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_oltp05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_oltp05').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Oltp05",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().table_name} ",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Oracle_lloyds",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Lloyds",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_configfile_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_lloyds')]",
				"[concat(variables('factoryId'), '/datasets/Lloyds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_mapsys_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_oltp05",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select table_name table_name from azure_config where oracle_schema_name not like  'AGRINT'\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOltp05",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_oltp05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_oltp05').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Oltp05",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Oracle_oltp05",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "SELECT * FROM @{item().table_name} ",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "mapsys",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_configfile_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/mapsys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_oltp05_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_oltp05",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select table_name table_name from azure_config where oracle_schema_name not like  'AGRINT'\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOltp05",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_oltp05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_oltp05').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Oltp05",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().table_name} ",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "oracle_scr_oltp05",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Oltp05",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_configfile_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/oracle_scr_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/Oltp05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_paris_fap_rsa_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This copy job is getting the views from config on paris c_stage. Testing the fap/rsa loading time. ",
				"activities": [
					{
						"name": "Lookup_Paris",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select TABLE_NAME table_name from azure_config where load_ind = 'N'\nand table_name not in ('\"p_filtable_cor\"','\"p_faptable\"')",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_config_paris",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachParis",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_Paris",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_Paris').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Paris",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().table_name} ",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "oracle_paris_fap_rsa",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "faptable_rsatable",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/paris"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_config_paris')]",
				"[concat(variables('factoryId'), '/datasets/oracle_paris_fap_rsa')]",
				"[concat(variables('factoryId'), '/datasets/faptable_rsatable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_paris_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This copy job is getting the views from config on paris c_stage. Temp, before we get SQL up running. ",
				"activities": [
					{
						"name": "Lookup_Paris",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select TABLE_NAME table_name from azure_config where load_ind = 'Y'\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_config_paris",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachParis",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_Paris",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_Paris').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Paris",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().table_name} ",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "scr_oracle_paris",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Paris",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/paris"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_config_paris')]",
				"[concat(variables('factoryId'), '/datasets/scr_oracle_paris')]",
				"[concat(variables('factoryId'), '/datasets/Paris')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_saleforce_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_oltp05",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select table_name table_name from azure_config where oracle_schema_name = 'SALEFORCE'",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOltp05",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_oltp05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_oltp05').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Oltp05",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().table_name} ",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "oracle_scr_oltp05",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Salesforce",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_configfile_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/oracle_scr_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/Salesforce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_static_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_oltp05",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select table_name table_name from azure_config where oracle_schema_name = 'STATIC'\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "oracle_configfile_oltp05",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachOltp05",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_oltp05",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_oltp05').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Oltp05",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "SELECT * FROM @{item().table_name} ",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "oracle_scr_oltp05",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Static",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@{item().table_name}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_configfile_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/oracle_scr_oltp05')]",
				"[concat(variables('factoryId'), '/datasets/Static')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_exchange_rate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookup_exchange_file_status",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \"file_arrival_status\" from \"hlp_exchange_rate_status\"",
								"partitionOption": "None",
								"queryTimeout": "00:10:00"
							},
							"dataset": {
								"referenceName": "oracle_exchange_rate_status",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "lookup_exchange_file_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('lookup_exchange_file_status').output.firstRow.file_arrival_status,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pipeline_send_email",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipeline_send_email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pPipelineName": "Pipeline Name",
											"pEmailSubject": "ADF DWH Alert ! Exchange rate file not arrived to load and copy into Azure.",
											"pEmailBody": "Exchange rate file not available",
											"pEmailTo": "sudipta.dutta@gard.no;siv.borve@gard.no"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "copy_exchange_rate_to_lake",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_exchange_rate_to_lake",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "error_handling",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "load_exchange_rate",
								"pPipelineErrorMsg": "Pipeline failed. Please check"
							}
						}
					},
					{
						"name": "pipeline_send_email_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_send_email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "load_exchange_rate",
								"pEmailSubject": "ADF DWH Alert ! Exchange rate copy job completed successfully",
								"pEmailBody": "HLP_EXCHNAGE_RATE data copied into Azure SQL server successfully",
								"pEmailTo": "sudipta.dutta@gard.no;siv.borve@gard.no"
							}
						}
					}
				],
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/oracle_exchange_rate_status')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_error_handling')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_send_email')]",
				"[concat(variables('factoryId'), '/pipelines/copy_exchange_rate_to_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_master_dwh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "load_pre_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_stage_common",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_pre_dim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "load_stage_common",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_stage_common",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"variables": {
					"vMasterRevitErrorStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_master"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/load_pre_dim')]",
				"[concat(variables('factoryId'), '/pipelines/load_stage_common')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_master_pre_dwh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "load_static_stage_dwh",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_static_stage_dwh",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "copy_exact_to_lake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_static_stage_dwh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_exact_to_lake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "error_handling",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_exact_to_lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "copy_exact_to_lake",
								"pPipelineErrorMsg": {
									"value": "@activity('copy_exact_to_lake').error.message",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error_handling_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_static_stage_dwh",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "load_static_stage_dwh",
								"pPipelineErrorMsg": {
									"value": "@activity('load_static_stage_dwh').error.message",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"vFailStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/load_static_stage_dwh')]",
				"[concat(variables('factoryId'), '/pipelines/copy_exact_to_lake')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_error_handling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_pre_dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "vPreDim",
							"value": "'This is inside load_pre_dim'"
						}
					},
					{
						"name": "m_pre_dim_agreement_pa",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "m_pre_dim_agreement_pa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"variables": {
					"vPreDim": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_prepare"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/m_pre_dim_agreement_pa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_stage_common')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_hlp_exchange_rate_usd",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "m_hlp_exchange_rate_usd",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/m_hlp_exchange_rate_usd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_stage_exact_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LkpSrcLoadStatusExact",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select fn_check_exact_source_load LOAD_STATUS from dummy_table_dataset",
								"partitionOption": "None",
								"queryTimeout": "00:05:00"
							},
							"dataset": {
								"referenceName": "Oracle_oltp05_dummy_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If_table_is_loaded",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LkpSrcLoadStatusExact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('LkpSrcLoadStatusExact').output.firstRow.LOAD_STATUS,'N')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "copy_exact_to_lake",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_exact_to_lake",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vTableLoaded",
										"value": "'Empty Table'"
									}
								}
							]
						}
					}
				],
				"variables": {
					"vTableLoaded": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_oltp05_dummy_table')]",
				"[concat(variables('factoryId'), '/pipelines/copy_exact_to_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_stage_lloyds_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LkpSourceLoadStatusLloyds",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:03:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select fn_check_lloyds_source_load  LOAD_STATUS from dummy_table_dataset",
								"partitionOption": "None",
								"queryTimeout": "00:05:00"
							},
							"dataset": {
								"referenceName": "Oracle_oltp05_dummy_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If_table_is_loaded",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LkpSourceLoadStatusLloyds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('LkpSourceLoadStatusLloyds').output.firstRow.LOAD_STATUS,'N')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "copy_lloyds_to_lake",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_lloyds_to_lake",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vTableLoaded",
										"value": "'Empty Table'"
									}
								}
							]
						}
					}
				],
				"variables": {
					"vTableLoaded": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oracle_oltp05_dummy_table')]",
				"[concat(variables('factoryId'), '/pipelines/copy_lloyds_to_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_static_stage_dwh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "load_stage_lloyds_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_stage_lloyds_table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_copy_static_to_lake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_static_to_lake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "error_handling",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_copy_static_to_lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": {
									"value": "copy_static_to_lake",
									"type": "Expression"
								},
								"pPipelineErrorMsg": {
									"value": "@activity('pl_copy_static_to_lake').error.message",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error_handling_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_stage_lloyds_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": {
									"value": "load_stage_lloyds_table",
									"type": "Expression"
								},
								"pPipelineErrorMsg": {
									"value": "@activity('load_stage_lloyds_table').error.message",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"vInnerFailStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/load_stage_lloyds_table')]",
				"[concat(variables('factoryId'), '/pipelines/copy_static_to_lake')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_error_handling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_crossreference')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_crossreference",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "m_crossreference",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OmMapCodeValues": {
										"fileName": "\"map_code_values\""
									},
									"OmMapCodeType": {
										"fileName": "\"map_code_type\""
									},
									"tCrossReference": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/m_crossreference')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_hlp_exchange_rate_usd')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_hlp_exchange_rate_usd",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "m_hlp_exchange_rate_usd",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"hlpExhangeRate": {},
									"hlpExchangeRateUSD": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/m_hlp_exchange_rate_usd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_agreement_pa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_pre_dim_agreement_pa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "m_pre_dim_agreement_pa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Pagatable": {
										"fileName": "\"p_agatable\""
									},
									"Pagztable": {
										"fileName": "\"p_agztable\""
									},
									"Ppebtable": {
										"fileName": "\"p_pebtable\""
									},
									"tcrossreference": {
										"fileName": "tcrossreference.parquet"
									},
									"SrcSfCompany": {
										"fileName": "\"sf_company_new\""
									},
									"DimTime": {
										"fileName": "\"sta_dim_time\""
									},
									"PreDimAgreement": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/m_pre_dim_agreement_pa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_error_handling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send email on error",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-111.westeurope.logic.azure.com:443/workflows/854a1b1a7a70443ea407fcc8ad02a8d6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=xI0dgmzlPJOnVcQ4PjxydVz2E5UIM0Qke2J4gC8Mkbo",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@pipeline().parameters.pPipelineName",
								"Subject": "@variables('vSubject')",
								"ErrorMessage": "@pipeline().parameters.pPipelineErrorMsg",
								"EmailTo": "@variables('vEmailTo')"
							}
						}
					}
				],
				"parameters": {
					"pPipelineName": {
						"type": "string",
						"defaultValue": "Pipeline Name"
					},
					"pPipelineErrorMsg": {
						"type": "string",
						"defaultValue": "Pipeline failed. Please check"
					}
				},
				"variables": {
					"vEmailTo": {
						"type": "String",
						"defaultValue": "sudipta.dutta@gard.no;siv.borve@gard.no;liv.rasmussen@gard.no"
					},
					"vSubject": {
						"type": "String",
						"defaultValue": "ADF DWH Alert ! Pipeline Failed"
					}
				},
				"folder": {
					"name": "pipeline/dwh_master"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_send_email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send email",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-55.westeurope.logic.azure.com:443/workflows/68a9e67bb1dd4c218b0aedeb2cc185d1/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=aCHFbRtDBEqszJgzokENqPEYosNnrAjhSVjDmKSri3A",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@pipeline().parameters.pPipelineName",
								"Subject": "@pipeline().parameters.pEmailSubject",
								"Message": "@pipeline().parameters.pEmailBody",
								"EmailTo": "@pipeline().parameters.pEmailTo"
							}
						}
					}
				],
				"parameters": {
					"pPipelineName": {
						"type": "string",
						"defaultValue": "Pipeline Name"
					},
					"pEmailSubject": {
						"type": "string",
						"defaultValue": "Azure DWH Alert ! Exchange rate file not available"
					},
					"pEmailBody": {
						"type": "string",
						"defaultValue": "Exchange rate file not available"
					},
					"pEmailTo": {
						"type": "string",
						"defaultValue": "sudipta.dutta@gard.no"
					}
				},
				"folder": {
					"name": "pipeline/dwh_master"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_vessel_type_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_pre_dim_vessel_type_group",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "m_pre_dim_vessel_type_group",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StaVesselTypeGroup": {
										"fileName": "\"sta_vessl_type_group\""
									},
									"StaRiskDriverGroup": {
										"fileName": "\"sta_risk_driver_group\""
									},
									"PreDimVesselTypeGroup": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/m_pre_dim_vessel_type_group')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agresso')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Agresso"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Agresso",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Exact",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lloyds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Lloyds",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Oltp05",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleParisScr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the scr dataset for Paris tables",
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "p_pectable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OracleCStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleParisTablesScr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "AZURE_CONFIG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OracleCStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_destination_peatable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleAzureDwh",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/marts_to_oracle"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_DWH",
					"table": "P_PEATABLE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OracleAzureDwh')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_lloyds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "sta_exchange_rate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": {
						"value": "@dataset().fileName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_oltp05_dummy_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is used to check if there is any data in the Oracle source table.",
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "DUMMY_TABLE_DATASET"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Other')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Other"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Other",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "FROM_CURRENCY_ID",
						"type": "DOUBLE"
					},
					{
						"name": "TO_CURRENCY_ID",
						"type": "DOUBLE"
					},
					{
						"name": "EXCHANGE_FROM_DATE",
						"type": "INT96"
					},
					{
						"name": "EXCHANGE_RATE",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "EXCHANGE_TO_DATE",
						"type": "INT96"
					},
					{
						"name": "FROM_CURRENCY_CODE",
						"type": "UTF8"
					},
					{
						"name": "TO_CURRENCY_CODE",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Paris')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Paris",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Salesforce",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sourceazurepeatable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server_development_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/marts_to_oracle"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "peapeaid",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "peainvisible",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaiebusndiv",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaiecond",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaprobor",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaiyear",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peasex",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peacorrmailfreq",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peanopurr",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaoutgirono",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaclosmailfreq",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaieint5",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_updated_by",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaclmmailfreq",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peainvnotify",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaacorbo",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peamexcdate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peaaddmailfreq",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaieint3",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peamailsizemb",
						"type": "numeric",
						"precision": 28,
						"scale": 10
					},
					{
						"name": "peaiediv",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaorgno",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaaclmbo",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacalamt",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "peaxlcurr",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "map_date",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peaccintr",
						"type": "numeric",
						"precision": 28,
						"scale": 10
					},
					{
						"name": "peaextid2",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peapurnotify",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaccode",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peasw10",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaaclmadv",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaclomet",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacloclm",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peamexamt",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "peaprotyp",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peanotsort",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaieint1",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaiecon3",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peaincreday",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peapersid",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaaaddbo",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peanotdays",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peaaclobo",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacalcurr",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaprovad",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peafromcomp",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "peastopuse",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaclmadv",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peasttniv",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peamexcurr",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaiecon4",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peasubtype",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peaswrun",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "pealeicode",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaoutcreday",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peaoutgiro",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peamexpro",
						"type": "numeric",
						"precision": 28,
						"scale": 10
					},
					{
						"name": "peaoutgiroludate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peaiecon2",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peaieint2",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peastdate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peaclamailfreq",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacclamt",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "pealang2",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peastatyp",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaingirolusign",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peacrsign",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaie2busnse",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peabirtno",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaiesect",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaaddbor",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaieint4",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peasttprmclm",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaiebusnse",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peanotaco",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peastaamt",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacclcurr",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaextid",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaendate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peacomp2",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peabirtws",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaie2busndiv",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "pearesdat",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peausecolfee",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peanotlay",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "pealudate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peaxlpoin",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "peaoutgirolusign",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaprenotify",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacrdate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peaaprobo",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peanopdue",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaingiroludate",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peaie3busnse",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "date_inserted",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peapurtyp",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "inserted_by",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peapersrfl",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "peacorbo",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peastaniv",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "date_last_updated",
						"type": "date",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "peastensw",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaccint",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaswink",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "pealusign",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaiecon5",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peaknvmark",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peastopcod",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacrmid",
						"type": "bigint",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "peaieint",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peamaxper",
						"type": "numeric",
						"precision": 28,
						"scale": 10
					},
					{
						"name": "peastoppremnote",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaiecon1",
						"type": "smallint",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "peamdescr",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaclmintynsw",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peadueday",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaingirono",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaie3busndiv",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaprovmailfreq",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaclmbor",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peacolid",
						"type": "varchar",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "peaingiro",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "peaclobor",
						"type": "tinyint",
						"precision": 3,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dwh_stage",
					"table": "p_peatable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server_development_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Static')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Static",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_agreement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_agreement_type')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_business_area')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_capital')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_capital_branch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_category')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_claim_detail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_claim_rule')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_claim_type')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_country')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_coverage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_currency')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_guarantee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_incident')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_partner')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_premium_line')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_premium_type')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_risk_object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_source_system')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_sub_claim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_time')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_vessel_type_group')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "dim",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dwh_stage_oltp05_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server_development_connection",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkDataset": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dwh_stage",
					"table": {
						"value": "@dataset().SinkDataset",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server_development_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fact_claim_transaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/fact"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fact",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fact_premium_transaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "marts/fact"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "fact",
						"fileSystem": "marts"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/faptable_rsatable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Paris",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/hlp_exchange_rate_to_usd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Exchange_rate",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lake_Oltp05_configfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "config_file.parquet",
						"folderPath": "Static",
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TABLE_NAME",
						"type": "UTF8"
					},
					{
						"name": "LOAD_IND",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lake_configfile_oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "config_file.parquet",
						"folderPath": "Static",
						"fileSystem": "raw"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mapsys')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Mapping_System",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "SOURCE_CODE_KEY",
						"type": "UTF8"
					},
					{
						"name": "SOURCE_SYSTEM",
						"type": "UTF8"
					},
					{
						"name": "TARGET_CODE",
						"type": "UTF8"
					},
					{
						"name": "TARGET_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CODE_TYPE",
						"type": "UTF8"
					},
					{
						"name": "CODE_TYPE_ID",
						"type": "DOUBLE"
					},
					{
						"name": "CODE2",
						"type": "UTF8"
					},
					{
						"name": "OM_X_REF",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_config_paris')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset is pointing to the cinfig file in stage_itf. Temp solution",
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "AZURE_CONFIG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OracleCStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_configfile_oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "AZURE_CONFIG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_exact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "map_code_values"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_exchange_rate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "hlp_exchange_rate"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_exchange_rate_status')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "hlp_exchange_rate_status"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_paris_fap_rsa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "CBSTABLE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OracleCStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_scr_oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "sta_claim_process"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OLTP05')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_agreement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_agreement_type')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_business_area')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_capital')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_category_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_claim_detail_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_claim_rule_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "unsure if we need this? ",
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_claim_type_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_country')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_coverage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_currency')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_expense_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_guarantee_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_ig_claim_type_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_incident_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_object')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_partner')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_premium_line')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_premium_type')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_risk_object_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_source_system')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_sub_claim_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agt_description",
						"type": "UTF8"
					},
					{
						"name": "agt_key",
						"type": "UTF8"
					},
					{
						"name": "last_updated_by",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_dim_vessel_type_group')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Dim",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_fact_claim_trans_pa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-fact"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Fact",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pre_fact_prem_trans')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-fact"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pre_Fact",
						"fileSystem": "dwh-prepare"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scr_oracle_agresso')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracelStageITF",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Agresso"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "STAGE_ITF",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OracelStageITF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scr_oracle_paris')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "All the views in paris",
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "ACOTABLE"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OracleCStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sf_company')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-stage"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Other",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "FROM_CURRENCY_ID",
						"type": "DOUBLE"
					},
					{
						"name": "TO_CURRENCY_ID",
						"type": "DOUBLE"
					},
					{
						"name": "EXCHANGE_FROM_DATE",
						"type": "INT96"
					},
					{
						"name": "EXCHANGE_RATE",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "EXCHANGE_TO_DATE",
						"type": "INT96"
					},
					{
						"name": "FROM_CURRENCY_CODE",
						"type": "UTF8"
					},
					{
						"name": "TO_CURRENCY_CODE",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_hlp_exchange_rate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "\"hlp_exchange_rate\"",
						"folderPath": "Exchange_rate",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/t_crossreference')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dwh-prepare/pre-dim"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Mapping_System",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PK_KEY",
						"type": "UTF8"
					},
					{
						"name": "CPT_DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "CPT_NUMBER",
						"type": "INT32"
					},
					{
						"name": "INSERTED_BY",
						"type": "UTF8"
					},
					{
						"name": "DATE_INSERTED",
						"type": "DATE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tables_oltp05_lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "Static",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_agatable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dwhdatalakedevelopment",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "\"p_agatable\"",
						"folderPath": "Paris",
						"fileSystem": "dwh-stage"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "agaadjsign",
						"type": "UTF8"
					},
					{
						"name": "agaadmcode",
						"type": "UTF8"
					},
					{
						"name": "agaagaid",
						"type": "UTF8"
					},
					{
						"name": "agaagname",
						"type": "UTF8"
					},
					{
						"name": "agaagno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaagnorf",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaagtype",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaalgid",
						"type": "UTF8"
					},
					{
						"name": "agaareacd",
						"type": "UTF8"
					},
					{
						"name": "agaassetno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaassetsubno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaausign",
						"type": "UTF8"
					},
					{
						"name": "agaautoconpol",
						"type": "UTF8"
					},
					{
						"name": "agaavttrkeep",
						"type": "UTF8"
					},
					{
						"name": "agaavttrnote",
						"type": "UTF8"
					},
					{
						"name": "agaavttrpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaavttrpros",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaavttrstatus",
						"type": "UTF8"
					},
					{
						"name": "agaavttrynsw",
						"type": "UTF8"
					},
					{
						"name": "agabusnbranch",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agabusncla",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agabusndiv",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agabusnregion",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agabusnsec",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacantxt",
						"type": "UTF8"
					},
					{
						"name": "agacashbefcovdate",
						"type": "INT96"
					},
					{
						"name": "agacashbeforecover",
						"type": "UTF8"
					},
					{
						"name": "agaccpid",
						"type": "UTF8"
					},
					{
						"name": "agachartradeteam",
						"type": "UTF8"
					},
					{
						"name": "agaclasstype",
						"type": "UTF8"
					},
					{
						"name": "agaclmsign",
						"type": "UTF8"
					},
					{
						"name": "agaclmuat",
						"type": "UTF8"
					},
					{
						"name": "agaclosedate",
						"type": "INT96"
					},
					{
						"name": "agaclosesign",
						"type": "UTF8"
					},
					{
						"name": "agacloseynsw",
						"type": "UTF8"
					},
					{
						"name": "agacomfacnote",
						"type": "UTF8"
					},
					{
						"name": "agacomfacpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacomfacynsw",
						"type": "UTF8"
					},
					{
						"name": "agacomp2",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacompdisckeep",
						"type": "UTF8"
					},
					{
						"name": "agacompdiscnote",
						"type": "UTF8"
					},
					{
						"name": "agacompdiscpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacompdiscpros",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacompdiscynsw",
						"type": "UTF8"
					},
					{
						"name": "agacomtarnote",
						"type": "UTF8"
					},
					{
						"name": "agacomtarpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacomtarstknote",
						"type": "UTF8"
					},
					{
						"name": "agacomtarstkpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacomtarstkynsw",
						"type": "UTF8"
					},
					{
						"name": "agacomtarynsw",
						"type": "UTF8"
					},
					{
						"name": "agaconcern",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaconnectsw",
						"type": "UTF8"
					},
					{
						"name": "agaconsrnote",
						"type": "UTF8"
					},
					{
						"name": "agaconsrynsw",
						"type": "UTF8"
					},
					{
						"name": "agacontinsagaid",
						"type": "UTF8"
					},
					{
						"name": "agacontinsagno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agacontinsynsw",
						"type": "UTF8"
					},
					{
						"name": "agacrdate",
						"type": "INT96"
					},
					{
						"name": "agacrsign",
						"type": "UTF8"
					},
					{
						"name": "agacumul",
						"type": "UTF8"
					},
					{
						"name": "agadatcan",
						"type": "INT96"
					},
					{
						"name": "agadatest",
						"type": "INT96"
					},
					{
						"name": "agadatora",
						"type": "INT96"
					},
					{
						"name": "agadatore",
						"type": "INT96"
					},
					{
						"name": "agadatpca",
						"type": "INT96"
					},
					{
						"name": "agadecltyp",
						"type": "UTF8"
					},
					{
						"name": "agadwbs",
						"type": "UTF8"
					},
					{
						"name": "agaeldocynsw",
						"type": "UTF8"
					},
					{
						"name": "agaelinvynsw",
						"type": "UTF8"
					},
					{
						"name": "agaendate",
						"type": "INT96"
					},
					{
						"name": "agaenhour",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaentrytype",
						"type": "UTF8"
					},
					{
						"name": "agaeosign",
						"type": "UTF8"
					},
					{
						"name": "agafileref",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agafixprnote",
						"type": "UTF8"
					},
					{
						"name": "agafixprpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agafixprynsw",
						"type": "UTF8"
					},
					{
						"name": "agafromcomp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagday",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagen1keep",
						"type": "UTF8"
					},
					{
						"name": "agagen1note",
						"type": "UTF8"
					},
					{
						"name": "agagen1peaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagen1prov",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagen1ynsw",
						"type": "UTF8"
					},
					{
						"name": "agagen2keep",
						"type": "UTF8"
					},
					{
						"name": "agagen2note",
						"type": "UTF8"
					},
					{
						"name": "agagen2peaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagen2prov",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagen2ynsw",
						"type": "UTF8"
					},
					{
						"name": "agagen3keep",
						"type": "UTF8"
					},
					{
						"name": "agagen3note",
						"type": "UTF8"
					},
					{
						"name": "agagen3peaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagen3prov",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagen3ynsw",
						"type": "UTF8"
					},
					{
						"name": "agagident",
						"type": "UTF8"
					},
					{
						"name": "agagmonth",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agagtype",
						"type": "UTF8"
					},
					{
						"name": "agahealthdate",
						"type": "INT96"
					},
					{
						"name": "agahealthynsw",
						"type": "UTF8"
					},
					{
						"name": "againcprovkeep",
						"type": "UTF8"
					},
					{
						"name": "againcprovnote",
						"type": "UTF8"
					},
					{
						"name": "againcprovpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "againcprovpros",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "againcprovynsw",
						"type": "UTF8"
					},
					{
						"name": "againcrebkeep",
						"type": "UTF8"
					},
					{
						"name": "againcrebnote",
						"type": "UTF8"
					},
					{
						"name": "againcrebpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "againcrebpros",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "againcrebynsw",
						"type": "UTF8"
					},
					{
						"name": "againdustrytxt",
						"type": "UTF8"
					},
					{
						"name": "againstti",
						"type": "UTF8"
					},
					{
						"name": "againtnote",
						"type": "UTF8"
					},
					{
						"name": "agaisic",
						"type": "UTF8"
					},
					{
						"name": "agaiyear",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaknvmark",
						"type": "UTF8"
					},
					{
						"name": "agaktocred",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaktocust",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaktodeb",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaliabendate",
						"type": "INT96"
					},
					{
						"name": "agalocpolissued",
						"type": "UTF8"
					},
					{
						"name": "agalongname",
						"type": "UTF8"
					},
					{
						"name": "agalostcode",
						"type": "UTF8"
					},
					{
						"name": "agalosttxt35",
						"type": "UTF8"
					},
					{
						"name": "agaludate",
						"type": "INT96"
					},
					{
						"name": "agalusign",
						"type": "UTF8"
					},
					{
						"name": "agamaiper",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agamgrpnote",
						"type": "UTF8"
					},
					{
						"name": "agamgrpynsw",
						"type": "UTF8"
					},
					{
						"name": "agamincurr",
						"type": "UTF8"
					},
					{
						"name": "agaminpre",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "aganoterm",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agansalecom",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "aganscomynsw",
						"type": "UTF8"
					},
					{
						"name": "aganumpers",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaoffice",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaoiltyp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaopencover",
						"type": "UTF8"
					},
					{
						"name": "agaordercode",
						"type": "UTF8"
					},
					{
						"name": "agaordertxt35",
						"type": "UTF8"
					},
					{
						"name": "agaorgcrdate",
						"type": "INT96"
					},
					{
						"name": "agaorgins",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaoxno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaoxrefid",
						"type": "UTF8"
					},
					{
						"name": "agaoyrno",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaoyrnote",
						"type": "UTF8"
					},
					{
						"name": "agaoyrto",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agapeoid",
						"type": "UTF8"
					},
					{
						"name": "agapictype",
						"type": "UTF8"
					},
					{
						"name": "agapwcode",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agapwfrdate",
						"type": "INT96"
					},
					{
						"name": "agaratcod",
						"type": "UTF8"
					},
					{
						"name": "agaratemodel",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agarefcod",
						"type": "UTF8"
					},
					{
						"name": "agareftxt",
						"type": "UTF8"
					},
					{
						"name": "agaremove",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agarenbatchid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agarencod",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agarentxt",
						"type": "UTF8"
					},
					{
						"name": "agasalesdiv",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agasetfreq",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agasettldetprt",
						"type": "UTF8"
					},
					{
						"name": "agashut",
						"type": "UTF8"
					},
					{
						"name": "agasitid",
						"type": "UTF8"
					},
					{
						"name": "agaskipinstadynsw",
						"type": "UTF8"
					},
					{
						"name": "agasource",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agastat1",
						"type": "UTF8"
					},
					{
						"name": "agastat2",
						"type": "UTF8"
					},
					{
						"name": "agastateareacd",
						"type": "UTF8"
					},
					{
						"name": "agastdate",
						"type": "INT96"
					},
					{
						"name": "agasthour",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaswo",
						"type": "UTF8"
					},
					{
						"name": "agatocomp",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agatrackit",
						"type": "UTF8"
					},
					{
						"name": "agatrackit1",
						"type": "UTF8"
					},
					{
						"name": "agatrackit2",
						"type": "UTF8"
					},
					{
						"name": "agatrackit3",
						"type": "UTF8"
					},
					{
						"name": "agatreatas",
						"type": "UTF8"
					},
					{
						"name": "agaturnover",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agatzone",
						"type": "UTF8"
					},
					{
						"name": "agauat",
						"type": "UTF8"
					},
					{
						"name": "agaufafpynsw",
						"type": "UTF8"
					},
					{
						"name": "agausage",
						"type": "UTF8"
					},
					{
						"name": "agausecod",
						"type": "UTF8"
					},
					{
						"name": "agauwsign",
						"type": "UTF8"
					},
					{
						"name": "agawbs",
						"type": "UTF8"
					},
					{
						"name": "agawbscust",
						"type": "UTF8"
					},
					{
						"name": "agawntnocperiod",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agawnttext35",
						"type": "UTF8"
					},
					{
						"name": "agawntynsw",
						"type": "UTF8"
					},
					{
						"name": "agaxmednote",
						"type": "UTF8"
					},
					{
						"name": "agaxmedpeaid",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "agaxmedynsw",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dwhdatalakedevelopment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF_dev_linked_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ADF_dev_linked_service_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ARESRV476_Arendal')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ARESRV476_Arendal_properties_typeProperties_host')]",
					"userId": "[parameters('ARESRV476_Arendal_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ARESRV476_Arendal_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AMSSRV049",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AMSSRV049')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage_test')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_test_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks_development_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to DataBricks Development",
				"annotations": [
					"databricks development connection"
				],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://westeurope.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks_development_connection_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterVersion": "5.5.x-scala2.11"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLTP05')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('OLTP05_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AMSSRVRUN01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AMSSRVRUN01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracelStageITF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"IR AMSSRV049"
				],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('OracelStageITF_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AMSSRV049",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AMSSRV049')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleAzureDwh')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('OracleAzureDwh_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AMSSRV049",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AMSSRV049')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleCStage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"IR AMSSRV049"
				],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('OracleCStage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AMSSRVRUN01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AMSSRVRUN01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleDbParisPoolScrAmster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Paris Pool",
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('OracleDbParisPoolScrAmster_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AMSSRVRUN01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AMSSRVRUN01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleDbParisScrAmster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Source to Paris data in amsterdam set up by Morten. This is only an copy of production. ",
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('OracleDbParisScrAmster_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AMSSRVRUN01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AMSSRVRUN01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dwhdatalakedevelopment')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF Development connection to dwhdatalakedevelopment",
				"annotations": [
					"datalake development connection"
				],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dwhdatalakedevelopment_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_development_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF connection to SQL server Development ",
				"annotations": [
					"sql server development connection"
				],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sql_server_development_connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_operations_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sql_server_operations_connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trgr_load_exchange_rate')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to execute exchange rate copy job",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "load_exchange_rate",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-12T10:32:00.000Z",
						"endTime": "2020-07-01T10:32:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/load_exchange_rate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AMSSRV049')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Integration runtime hosted on AMSSRV049",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AMSSRVRUN01')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRThomasClaimDetails')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 16,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRsiv8core')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 16,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_crossreference')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "OmMapCodeValues"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "OmMapCodeType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "t_crossreference",
								"type": "DatasetReference"
							},
							"name": "tCrossReference"
						}
					],
					"transformations": [
						{
							"name": "CodeValues",
							"description": "Removing columns not used in mapping"
						},
						{
							"name": "CodeTypes",
							"description": "Remove columns not used in mapping"
						},
						{
							"name": "JoinCodeTypeAndValues",
							"description": "Inner join on 'map_code_type_id'"
						},
						{
							"name": "DerivedSourceCodeKey"
						},
						{
							"name": "FilterCodeTypeID"
						},
						{
							"name": "SelectTcrossReference",
							"description": "Remove unused columns"
						},
						{
							"name": "Deduplicate",
							"description": "Getting only distinct rows"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "FilteredCodeValues"
						}
					],
					"script": "source(output(\n\t\tactive_flag as string,\n\t\tcode2 as string,\n\t\tcode2_description as string,\n\t\tcreated_by as string,\n\t\tcreated_date as timestamp,\n\t\tgard_comments as string,\n\t\tintech_comments as string,\n\t\tmap_code_status as string,\n\t\tmap_code_type_id as double,\n\t\tmap_code_val_id as double,\n\t\tmap_rule as string,\n\t\tmodified_by as string,\n\t\tmodified_date as timestamp,\n\t\tom_x_ref as string,\n\t\tpredefined_om_code as string,\n\t\tsource_code_action as string,\n\t\tsource_code_descr as string,\n\t\tsource_code_field1 as string,\n\t\tsource_code_field1_value as string,\n\t\tsource_code_field2 as string,\n\t\tsource_code_field2_value as string,\n\t\tsource_code_field3 as string,\n\t\tsource_code_field3_value as string,\n\t\tsource_code_field4 as string,\n\t\tsource_code_field4_value as string,\n\t\tsource_code_key as string,\n\t\tsource_code_table as string,\n\t\tsource_system as string,\n\t\tsource_table2_id as double,\n\t\tsource_table_id as double,\n\t\tsource_tab_col_id as double,\n\t\ttarget_code as string,\n\t\ttarget_long_descr as string,\n\t\ttarget_short_descr as string,\n\t\ttarget_table_id as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> OmMapCodeValues\nsource(output(\n\t\tcodeset_category as string,\n\t\tcodeset_type as string,\n\t\tcomments as string,\n\t\tcreated_by as string,\n\t\tcreated_date as timestamp,\n\t\tdummy_modified_by as string,\n\t\tdwh_notify as string,\n\t\teditable as string,\n\t\tfairplay_table as string,\n\t\tfunctional as string,\n\t\tgard_resp as string,\n\t\tidx_max_length as double,\n\t\tidx_min_length as double,\n\t\tintech_notify as string,\n\t\tmap_code_status as string,\n\t\tmap_code_type as string,\n\t\tmap_code_type_descr as string,\n\t\tmap_code_type_id as double,\n\t\tmap_code_type_parent as double,\n\t\tmodified_by as string,\n\t\tmodified_date as timestamp,\n\t\tmodule as string,\n\t\tom_index_code as string,\n\t\tparent_required as string,\n\t\ttarget_column_name as string,\n\t\ttarget_table_id as double,\n\t\ttarget_table_name as string,\n\t\ttarget_tab_col_id as double,\n\t\tto_load as string,\n\t\ttrial_version as double,\n\t\tused_in_dwh as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> OmMapCodeType\nFilteredCodeValues select(mapColumn(\n\t\tcode2,\n\t\tmap_code_type_id,\n\t\tsource_code_key,\n\t\tsource_system,\n\t\tom_x_ref,\n\t\ttarget_long_descr,\n\t\ttarget_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeValues\nFilterCodeTypeID select(mapColumn(\n\t\tmap_code_type_id,\n\t\tmap_code_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeTypes\nCodeValues, CodeTypes join(CodeValues@map_code_type_id == CodeTypes@map_code_type_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCodeTypeAndValues\nJoinCodeTypeAndValues derive(source_code_key = case(source_system =='PARIS' && contains([122,173], #item == CodeValues@map_code_type_id),source_code_key,source_code_key)) ~> DerivedSourceCodeKey\nOmMapCodeType filter(contains([329, 106,122,113,50,45,124,367,219,374,151,167, 101, 100, 180, 108, 107,    \r\n370,117,112,466, 136,179,404, 157, 148, 391,127,116, 464,384,161, 198 ,109,771,770,\r\n774,775,773,772,776,777,127,169,170,460,785,787,788,791,786,792,794,123,793,795,797,\r\n798,796,800,801,368,802,803,804,806,807,407,809,811,812,813,816,827,828], #item == map_code_type_id)) ~> FilterCodeTypeID\nDerivedSourceCodeKey select(mapColumn(\n\t\tsource_code_key,\n\t\tsource_system,\n\t\ttarget_code,\n\t\ttarget_description = target_long_descr,\n\t\tcode_type = map_code_type,\n\t\tcode_type_id = CodeValues@map_code_type_id,\n\t\tcode2,\n\t\tom_x_ref\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTcrossReference\nSelectTcrossReference aggregate(groupBy(source_code_key,\n\t\tsource_system,\n\t\ttarget_code,\n\t\ttarget_description,\n\t\tcode_type_id,\n\t\tcode2,\n\t\tom_x_ref),\n\tcode_type = first(code_type)) ~> Deduplicate\nDeduplicate alterRow(upsertIf(!isNull(target_code))) ~> AlterRow\nOmMapCodeValues filter(!contains([source_code_field1,source_code_field2,source_code_field3,source_code_field4],#item=='created_by')) ~> FilteredCodeValues\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['tcrossreference.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tCrossReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/t_crossreference')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_agreement_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_agreement_type",
								"type": "DatasetReference"
							},
							"name": "preDimAgreementType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_agreement_type",
								"type": "DatasetReference"
							},
							"name": "dimAgreementTypeInsert"
						}
					],
					"transformations": [
						{
							"name": "derivedTopLevel"
						},
						{
							"name": "alterRow"
						}
					],
					"script": "source(output(\n\t\tagt_description as string,\n\t\tagt_key as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_agreement_type.parquet']) ~> preDimAgreementType\npreDimAgreementType derive(top_key = 'ALL',\n\t\ttop_description = 'All Agreement Types') ~> derivedTopLevel\nderivedTopLevel alterRow(upsertIf(!isNull(agt_key))) ~> alterRow\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_agreement_type.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimAgreementTypeInsert"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_agreement_type')]",
				"[concat(variables('factoryId'), '/datasets/dim_agreement_type')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_business_area')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_business_area",
								"type": "DatasetReference"
							},
							"name": "preDimBusinessArea"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_business_area",
								"type": "DatasetReference"
							},
							"name": "dimBusinessArea"
						}
					],
					"transformations": [
						{
							"name": "derivedtoplevel"
						},
						{
							"name": "alterrow"
						}
					],
					"script": "source(output(\n\t\tbus_description as string,\n\t\tbus_key as string,\n\t\tgrp_key as string,\n\t\tgrp_description as string,\n\t\tbua_key as string,\n\t\tbua_description as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_business_area.parquet']) ~> preDimBusinessArea\npreDimBusinessArea derive(top_key = 'ALL',\n\t\ttop_description = 'All Business Areas') ~> derivedtoplevel\nderivedtoplevel alterRow(upsertIf(!isNull(bus_key))) ~> alterrow\nalterrow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_business_area.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimBusinessArea"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_business_area')]",
				"[concat(variables('factoryId'), '/datasets/dim_business_area')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_claim_detail')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_claim_detail_pa",
								"type": "DatasetReference"
							},
							"name": "preDimClaimDetailPA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_claim_detail",
								"type": "DatasetReference"
							},
							"name": "dimClaimDetail"
						}
					],
					"transformations": [
						{
							"name": "deviredTopLevel"
						},
						{
							"name": "alterRow"
						}
					],
					"script": "source(output(\n\t\tcld_description as string,\n\t\tcld_key as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_claim_detail_pa.parquet']) ~> preDimClaimDetailPA\npreDimClaimDetailPA derive(top_key = 'All',\n\t\ttop_desc = 'All Claim Details') ~> deviredTopLevel\ndeviredTopLevel alterRow(upsertIf(!isNull(top_key))) ~> alterRow\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_claim_detail.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimClaimDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_claim_detail_pa')]",
				"[concat(variables('factoryId'), '/datasets/dim_claim_detail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_country')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_country",
								"type": "DatasetReference"
							},
							"name": "preDimCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_country",
								"type": "DatasetReference"
							},
							"name": "DimCountry"
						}
					],
					"transformations": [
						{
							"name": "DerivedTopLevel",
							"description": "Derive top_key and top_description"
						},
						{
							"name": "AlterRow",
							"description": "Upsert if pk key not null"
						}
					],
					"script": "source(output(\n\t\tpk_key as string,\n\t\treg_code as string,\n\t\treg_description as string,\n\t\tar1_code as string,\n\t\tar1_description as string,\n\t\tar2_code as string,\n\t\tar2_description as string,\n\t\tlast_updated_by as string,\n\t\tcon_2ltr_code as string,\n\t\tcon_country_name as string,\n\t\tcon_oecd as string,\n\t\tcon_currency_code as string,\n\t\tcon_eu as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_country.parquet']) ~> preDimCountry\npreDimCountry derive(top_code = 'All',\n\t\ttop_description = 'All Countries',\n\t\tcon_iso_code = '') ~> DerivedTopLevel\nDerivedTopLevel alterRow(upsertIf(!isNull(pk_key))) ~> AlterRow\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_country.parquet'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimCountry"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_country')]",
				"[concat(variables('factoryId'), '/datasets/dim_country')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_coverage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_coverage",
								"type": "DatasetReference"
							},
							"name": "preDimCoverage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_coverage",
								"type": "DatasetReference"
							},
							"name": "dimCoverage"
						}
					],
					"transformations": [
						{
							"name": "derivedTopColumns"
						},
						{
							"name": "alterRow"
						}
					],
					"script": "source(output(\n\t\tpk_key as string,\n\t\tcov_description as string,\n\t\tcov_exposure_group_code as string,\n\t\tcov_exposure_group_desc as string,\n\t\tgrp_key as string,\n\t\tgrp_description as string,\n\t\tcov_energy_exp_group_code as string,\n\t\tcov_energy_exp_group_desc as string,\n\t\tcov_layer_group_code as string,\n\t\tcov_layer_group_descr as string,\n\t\tcov_gic_group_code as string,\n\t\tcov_gic_group_desc as string,\n\t\tcov_3ltr_code as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_coverage.parquet']) ~> preDimCoverage\npreDimCoverage derive(tot_key = 'ALL',\n\t\ttot_description = 'All Coverages') ~> derivedTopColumns\nderivedTopColumns alterRow(upsertIf(!isNull(pk_key))) ~> alterRow\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_coverage.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimCoverage"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_coverage')]",
				"[concat(variables('factoryId'), '/datasets/dim_coverage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_currency')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_currency",
								"type": "DatasetReference"
							},
							"name": "preDimCurrency"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_currency",
								"type": "DatasetReference"
							},
							"name": "dimCurrency"
						}
					],
					"transformations": [
						{
							"name": "DeriveTopLevel"
						},
						{
							"name": "AlterRow",
							"description": "Upsert if pk key is not null"
						}
					],
					"script": "source(output(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> preDimCurrency\npreDimCurrency derive(top_key = 'All',\n\t\ttop_description = 'All Currencies') ~> DeriveTopLevel\nDeriveTopLevel alterRow(upsertIf(!isNull(PK_KEY))) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_currency.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimCurrency"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_currency')]",
				"[concat(variables('factoryId'), '/datasets/dim_currency')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_employee",
								"type": "DatasetReference"
							},
							"name": "preDimEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_employee",
								"type": "DatasetReference"
							},
							"name": "dimEmployee"
						}
					],
					"transformations": [
						{
							"name": "DeriveTopLevel",
							"description": "Derive top_key and top_description"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "source(output(\n\t\temp_source_key as string,\n\t\tagresso_emp_id as string,\n\t\temp_first_name as string,\n\t\temp_last_name as string,\n\t\temp_job_mobile as string,\n\t\temp_job_email as string,\n\t\tmain_gard_office_location as string,\n\t\temp_name as string,\n\t\tlast_updated_by as string,\n\t\tincident_team_code as string,\n\t\tincident_team_desc as string,\n\t\temp_job_phone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_employee.parquet']) ~> preDimEmployee\npreDimEmployee derive(top_key = 'All',\n\t\ttop_description = 'All Employees') ~> DeriveTopLevel\nDeriveTopLevel alterRow(upsertIf(!isNull(emp_source_key))) ~> AlterRow\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_employee.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_employee')]",
				"[concat(variables('factoryId'), '/datasets/dim_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_guarantee_pa')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/paris"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_guarantee_pa",
								"type": "DatasetReference"
							},
							"name": "PreDimGuarantee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_guarantee",
								"type": "DatasetReference"
							},
							"name": "DimGuarantee"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tGut_Date_Given as timestamp,\n\t\tGut_Guarantee_Issued_To as string,\n\t\tGut_Guarantee_Remarks as string,\n\t\tGut_Date_Expiry as timestamp,\n\t\tGut_Date_Created as timestamp,\n\t\tGut_Key as string,\n\t\tGut_Type_Description as string,\n\t\tGut_Guarantee_Status as string,\n\t\tGut_Inc_Key as string,\n\t\tGut_open_ind as string,\n\t\tGut_Guarantee_type_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_guarantee_pa.parquet']) ~> PreDimGuarantee\nPreDimGuarantee derive(Top_key = 'N/A',\n\t\tTop_Description = 'All Guarantees') ~> DerivedColumn1\nDerivedColumn1 alterRow(upsertIf(1==1)) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_guarantee.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimGuarantee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_guarantee_pa')]",
				"[concat(variables('factoryId'), '/datasets/dim_guarantee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_source_system')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_source_system",
								"type": "DatasetReference"
							},
							"name": "PreDimSourceSystem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_source_system",
								"type": "DatasetReference"
							},
							"name": "DimSourceSystem"
						}
					],
					"transformations": [
						{
							"name": "DeriveTopLevel"
						},
						{
							"name": "RemoveUnusedColumns"
						},
						{
							"name": "SelectOutputColumns"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "source(output(\n\t\tactive as string,\n\t\tdescription as string,\n\t\tpk_source_system as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_source_system.parquet']) ~> PreDimSourceSystem\nRemoveUnusedColumns derive(top_key = 'ALL',\n\t\ttop_description = 'All Source Systems') ~> DeriveTopLevel\nPreDimSourceSystem select(mapColumn(\n\t\tpk_source_system,\n\t\tdescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveUnusedColumns\nDeriveTopLevel select(mapColumn(\n\t\tsou_key = pk_source_system,\n\t\tsou_description = description,\n\t\ttop_key,\n\t\ttop_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOutputColumns\nSelectOutputColumns alterRow(upsertIf(!isNull(sou_key))) ~> AlterRow\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['m_dim_source_system.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimSourceSystem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_source_system')]",
				"[concat(variables('factoryId'), '/datasets/dim_source_system')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_vessel_type_group')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/paris"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_vessel_type_group",
								"type": "DatasetReference"
							},
							"name": "VesselTypeGroup"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "LlyodsVessel"
						},
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tcross"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "crc"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_vessel_type_group",
								"type": "DatasetReference"
							},
							"name": "DimVesselTyprGroup"
						}
					],
					"transformations": [
						{
							"name": "Deduplicator"
						},
						{
							"name": "VesselType"
						},
						{
							"name": "VesselTypeCode"
						},
						{
							"name": "xrefvesseltype"
						},
						{
							"name": "VesselTypeCrossRef"
						},
						{
							"name": "CodeType"
						},
						{
							"name": "Constant"
						},
						{
							"name": "NA"
						},
						{
							"name": "onlycrossref"
						},
						{
							"name": "notInVslTypeGrp"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "notin"
						},
						{
							"name": "finalunion"
						},
						{
							"name": "vesseltypegroupselected"
						},
						{
							"name": "DefaultNull"
						},
						{
							"name": "renamingcolumns"
						},
						{
							"name": "DeriveTopLevels"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "source(output(\n\t\tfp_3_ltr_code as string,\n\t\tfp_level_5_code as string,\n\t\tfp_level_5_decode as string,\n\t\tfp_level_5_desc as string,\n\t\tfp_level_5_hull as double,\n\t\tfp_level_5_sub as string,\n\t\tinsert_date as timestamp,\n\t\tpk_vessel_type_group as double,\n\t\tupdate_date as timestamp,\n\t\tvsl_cefor_group as string,\n\t\tvsl_desc as string,\n\t\tvsl_gard_group as string,\n\t\tvsl_marine_group as string,\n\t\tvsl_risk_group as string,\n\t\tvsl_group1 as integer,\n\t\tvsl_group1_desc as string,\n\t\tvsl_group1_sort as string,\n\t\tvsl_group2 as integer,\n\t\tvsl_group2_desc as string,\n\t\tvsl_group2_sort as string,\n\t\tvsl_group3 as integer,\n\t\tvsl_group3_desc as string,\n\t\tvsl_group3_sort as string,\n\t\tvsl_group4 as integer,\n\t\tvsl_group4_desc as string,\n\t\tvsl_group4_sort as string,\n\t\tvsl_group5 as integer,\n\t\tvsl_group5_desc as string,\n\t\tvsl_group5_sort as string,\n\t\tvsl_groupIV as integer,\n\t\tvsl_groupIV_desc as string,\n\t\tvsl_groupIV_sort as string,\n\t\tvsl_groupLOH as integer,\n\t\tvsl_groupLOH_desc as string,\n\t\tvsl_groupLOH_sort as string,\n\t\tgroup_code_Size as string,\n\t\tgroup_desc_Size as string,\n\t\tfp_Lvl4_code as string,\n\t\tfp_Lvl4_Group as integer,\n\t\tgroup_Lvl4_decode as string,\n\t\tgroup_Lvl3_decode as string,\n\t\tFp_Lvl3_Group as integer,\n\t\tgroup_desc_Lvl3 as string,\n\t\tVessel_Gard_Group as string,\n\t\tVessel_Group_6 as integer,\n\t\tgroup_code_alternative_D6 as string,\n\t\tVessel_Group_6_desc as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> VesselTypeGroup\nsource(output(\n\t\tammonia_ind as string,\n\t\tanswer_back as string,\n\t\taudit_created as timestamp,\n\t\taudit_updated as timestamp,\n\t\tbale_capacity as decimal(38,18),\n\t\tballast_capacity as decimal(38,18),\n\t\tbeneficial_owner_id as decimal(38,18),\n\t\tbeneficial_owner_start_date as timestamp,\n\t\tbollard_pull as decimal(38,18),\n\t\tbore as decimal(38,18),\n\t\tbow_chain_stoppers as string,\n\t\tbow_load_discharge as string,\n\t\tbreadth_extreme as decimal(38,18),\n\t\tbreadth_moulded as decimal(38,18),\n\t\tbreaker_company as string,\n\t\tbroken_end_date as timestamp,\n\t\tbroken_place as string,\n\t\tbuilt_place as string,\n\t\tbulbous_bow_ind as string,\n\t\tcall_sign as string,\n\t\tcar_capacity as decimal(38,18),\n\t\tcasualty_date as timestamp,\n\t\tclass1 as string,\n\t\tclass1_code as string,\n\t\tclass1_esp_ind as string,\n\t\tclass1_ice_class as string,\n\t\tclass1_ice_class_text as string,\n\t\tclass1_last_survey_date as timestamp,\n\t\tclass1_notation as string,\n\t\tclass1_provisional_end_date as timestamp,\n\t\tclass1_provisional_ind as string,\n\t\tclass1_rating as string,\n\t\tclass1_start_date as timestamp,\n\t\tclass1_suspension_ind as string,\n\t\tclass1_vessel_id as string,\n\t\tclass2 as string,\n\t\tclass2_code as string,\n\t\tclass2_esp_ind as string,\n\t\tclass2_ice_class as string,\n\t\tclass2_ice_class_text as string,\n\t\tclass2_last_survey_date as timestamp,\n\t\tclass2_notation as string,\n\t\tclass2_provisional_end_date as timestamp,\n\t\tclass2_provisional_ind as string,\n\t\tclass2_rating as string,\n\t\tclass2_start_date as timestamp,\n\t\tclass2_suspension_ind as string,\n\t\tclass2_vessel_id as string,\n\t\tclass_changes_previous_3_years as decimal(38,18),\n\t\tcls_ind as string,\n\t\tco2_ind as string,\n\t\tcoil_ind as string,\n\t\tcoil_text as string,\n\t\tcollisions as decimal(38,18),\n\t\tcommercial_operator_id as decimal(38,18),\n\t\tcommercial_op_start_date as timestamp,\n\t\tcommon_boiler_type as string,\n\t\tcommon_gear_type as string,\n\t\tcommon_gear_type_code as string,\n\t\tcommon_propeller_type as string,\n\t\tcommon_propeller_type_code as string,\n\t\tconstruction_end as timestamp,\n\t\tconstruction_start as timestamp,\n\t\tconvention_69_ind as string,\n\t\tconversion_date as timestamp,\n\t\tconversion_text as string,\n\t\tcount_designation as double,\n\t\tcount_eng_builder as double,\n\t\tcount_gbowner_chg_5y as double,\n\t\tcow_ind as string,\n\t\tcurrent_flag as string,\n\t\tcurrent_flag_start_date as timestamp,\n\t\tcurrent_name as string,\n\t\tcylinder_arrangement as string,\n\t\tdead_date as timestamp,\n\t\tdeck_tank_capacity as decimal(38,18),\n\t\tdepth as decimal(38,18),\n\t\tdetentions_last_12_months as decimal(38,18),\n\t\tdetentions_last_24mon as decimal(38,18),\n\t\tdetentions_last_3_years as decimal(38,18),\n\t\tdetention_ind as string,\n\t\tdisplacement as decimal(38,18),\n\t\tdraft as decimal(38,18),\n\t\tdwt as decimal(38,18),\n\t\tearliest_engine_dob as timestamp,\n\t\tengine_action as string,\n\t\tengine_builder as string,\n\t\tengine_built_town as string,\n\t\tengine_designation as string,\n\t\tengine_designer as string,\n\t\tengine_position as string,\n\t\tengine_type as string,\n\t\tethylene_ind as string,\n\t\tflag as string,\n\t\tflag_changes_previous_3_years as decimal(38,18),\n\t\tflag_official_number as string,\n\t\tflash_point_60_ind as string,\n\t\tformula_dwt as decimal(38,18),\n\t\tfreeboard as decimal(38,18),\n\t\tfuel_capacity as decimal(38,18),\n\t\tfuel_consumption as string,\n\t\tfuel_type as string,\n\t\tfuel_type2 as string,\n\t\tgas_capacity as decimal(38,18),\n\t\tgas_max_pressure as decimal(38,18),\n\t\tgas_min_pressure as decimal(38,18),\n\t\tgearless_ind as string,\n\t\tgrain_capacity as decimal(38,18),\n\t\tgross as decimal(38,18),\n\t\thatch_type as string,\n\t\theat_exchangers as string,\n\t\theli_deck_ind as string,\n\t\thp as decimal(38,18),\n\t\thull_damage as decimal(38,18),\n\t\thull_design as string,\n\t\thull_type as string,\n\t\tigs_ind as string,\n\t\timo as decimal(38,18),\n\t\timo_rating_1 as string,\n\t\timo_rating_2 as string,\n\t\timo_rating_3 as string,\n\t\tincidents_result_in_pollution as decimal(38,18),\n\t\tincident_result_in_los_of_life as decimal(38,18),\n\t\tinmarsat_code as string,\n\t\tinmarsat_number as string,\n\t\tinspections_last_12_months as decimal(38,18),\n\t\tinspections_last_24mon as decimal(38,18),\n\t\tinspections_last_3_years as decimal(38,18),\n\t\tinspection_precis as string,\n\t\tktm as decimal(38,18),\n\t\tlane_length as decimal(38,18),\n\t\tlane_width as decimal(38,18),\n\t\tlatest_incident_precis as string,\n\t\tlatest_inspection_date as timestamp,\n\t\tlaunch_date as timestamp,\n\t\tlbp as decimal(38,18),\n\t\tliquid_capacity as decimal(38,18),\n\t\tliquid_capacity_barrels as decimal(38,18),\n\t\tlng_containment_ind as string,\n\t\tloa as decimal(38,18),\n\t\tloss_date as timestamp,\n\t\tlrg as decimal(38,18),\n\t\tlt_tonnes as decimal(38,18),\n\t\tmachinery_damage as decimal(38,18),\n\t\tmanifold_distance as decimal(38,18),\n\t\tmanifold_to_bow as decimal(38,18),\n\t\tmanifold_type as string,\n\t\tmaterial_of_build as string,\n\t\tmaximum_hatch_length as decimal(38,18),\n\t\tmaximum_hatch_width as decimal(38,18),\n\t\tmaximum_hold_depth as decimal(38,18),\n\t\tmaximum_hold_length as decimal(38,18),\n\t\tmaximum_hold_width as decimal(38,18),\n\t\tmaximum_individual_gear_swl as decimal(38,18),\n\t\tmaximum_rpm as decimal(38,18),\n\t\tmmsi as string,\n\t\tname_changes_previous_3_years as decimal(38,18),\n\t\tnet as decimal(38,18),\n\t\tnominal_owner_id as decimal(38,18),\n\t\tnominal_owner_start_date as timestamp,\n\t\tno_berths as decimal(38,18),\n\t\tno_bulkheads as decimal(38,18),\n\t\tno_cabins as decimal(38,18),\n\t\tno_centre_tanks as decimal(38,18),\n\t\tno_crew as decimal(38,18),\n\t\tno_cylinders as decimal(38,18),\n\t\tno_decks as decimal(38,18),\n\t\tno_deficiencies_last_12mon as decimal(38,18),\n\t\tno_deficiencies_last_24mon as decimal(38,18),\n\t\tno_engines as decimal(38,18),\n\t\tno_grades as decimal(38,18),\n\t\tno_lines as decimal(38,18),\n\t\tno_passengers as decimal(38,18),\n\t\tno_reefer_plugs as decimal(38,18),\n\t\tno_stainless_steel_tanks as decimal(38,18),\n\t\tno_watertight_compartments as decimal(38,18),\n\t\tno_wing_tanks as decimal(38,18),\n\t\tnumber_deficienci_last_3_year as decimal(38,18),\n\t\tnumber_owner as double,\n\t\torder_cancelled as timestamp,\n\t\torder_date as timestamp,\n\t\torder_value as decimal(38,18),\n\t\tore_capacity_tonnes as decimal(38,18),\n\t\tore_cargo_ind as string,\n\t\toriginal_sched_cons_end as timestamp,\n\t\tpanama_nrt as decimal(38,18),\n\t\tparallel_body_length as decimal(38,18),\n\t\tpiracy as decimal(38,18),\n\t\tpi_changes_previous_3_years as decimal(38,18),\n\t\tpi_club as string,\n\t\tpi_club_id as string,\n\t\tpi_start_date as timestamp,\n\t\tport_of_registry as string,\n\t\tpower_kw as decimal(38,18),\n\t\tpressurised_ind as string,\n\t\tprevious_flag as string,\n\t\tprevious_name as string,\n\t\tpropulsion_text as string,\n\t\tpropulsion_type as string,\n\t\tpump_capacity_cubic as decimal(38,18),\n\t\tpump_capacity_tonnes as decimal(38,18),\n\t\tpump_description as string,\n\t\trecord_last_updated as timestamp,\n\t\trefrigerated_capacity as decimal(38,18),\n\t\trefrigerated_ind as string,\n\t\trefrigerated_teu_capacity as decimal(38,18),\n\t\tregistered_owner_id as decimal(38,18),\n\t\tregistered_owner_start_date as timestamp,\n\t\tsbt_ind as string,\n\t\tscheduled_construction_end as timestamp,\n\t\tsemi_pressurised_ind as string,\n\t\tslop_tank_capacity as decimal(38,18),\n\t\tsnapshot_date as timestamp,\n\t\tspeed as decimal(38,18),\n\t\tspeed_type as string,\n\t\tspm_ind as string,\n\t\tstainles_steel_tanks as string,\n\t\tstart_date as timestamp,\n\t\tstatus as string,\n\t\tstern_load_discharge as string,\n\t\tstrengthened_for_heavy_cargo as string,\n\t\tstroke as decimal(38,18),\n\t\tstroke_type as decimal(38,18),\n\t\tsuez_nrt as decimal(38,18),\n\t\ttank_coated_ind as string,\n\t\ttank_coated_text as string,\n\t\ttank_text as string,\n\t\ttechnical_manager_id as decimal(38,18),\n\t\ttechnical_manager_start_date as timestamp,\n\t\tteu_14t_capacity as decimal(38,18),\n\t\tteu_capacity as decimal(38,18),\n\t\tteu_deck_capacity as decimal(38,18),\n\t\tteu_hold_capacity as decimal(38,18),\n\t\tteu_operation_capacity as decimal(38,18),\n\t\tthird_party_operator_id as decimal(38,18),\n\t\tthird_party_operator_start_dat as timestamp,\n\t\tthruster_ind as string,\n\t\ttotal_ac_current_generators as decimal(38,18),\n\t\ttotal_boilers as decimal(38,18),\n\t\ttotal_casualties as decimal(38,18),\n\t\ttotal_casualties_last_12_month as decimal(38,18),\n\t\ttotal_casualties_last_5_years as decimal(38,18),\n\t\ttotal_dc_current_generators as decimal(38,18),\n\t\ttotal_dead as decimal(38,18),\n\t\ttotal_detentions as decimal(38,18),\n\t\ttotal_generators as decimal(38,18),\n\t\ttotal_generator_power as decimal(38,18),\n\t\ttotal_hatches as decimal(38,18),\n\t\ttotal_holds as decimal(38,18),\n\t\ttotal_injured as decimal(38,18),\n\t\ttotal_inspections as decimal(38,18),\n\t\ttotal_lifting_gear as decimal(38,18),\n\t\ttotal_missing as decimal(38,18),\n\t\ttotal_propellers as decimal(38,18),\n\t\ttotal_pumps as decimal(38,18),\n\t\ttotal_tanks as decimal(38,18),\n\t\ttpcmi as decimal(38,18),\n\t\ttrailer_capacity as decimal(38,18),\n\t\tvcm_ind as string,\n\t\tvessel_builder as string,\n\t\tvessel_id as decimal(38,18),\n\t\tvessel_name as string,\n\t\tvessel_type as string,\n\t\tvessel_type_code as string,\n\t\tyard_number as string,\n\t\tyear_of_build as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> LlyodsVessel\nsource(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcross\nsource(output(\n\t\tcrcccode as decimal(38,18),\n\t\tcrccpers2 as decimal(38,18),\n\t\tcrccpers3 as decimal(38,18),\n\t\tcrccpers4 as decimal(38,18),\n\t\tcrclospro as decimal(38,18),\n\t\tcrcmdescr as string,\n\t\tcrcperinc as string,\n\t\tcrcratcod as string,\n\t\tcrcratcomp as decimal(38,18),\n\t\tcrcsdescr as string,\n\t\tcrcstopuse as string,\n\t\tcrcsw5 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> crc\nLlyodsVessel aggregate(groupBy(vessel_type,\n\t\tvessel_type_code),\n\tvessel_types = first(vessel_type)) ~> Deduplicator\ntcross filter(CODE_TYPE_ID == 45) ~> VesselType\nDeduplicator select(mapColumn(\n\t\tvessel_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> VesselTypeCode\nVesselType select(mapColumn(\n\t\tTarget_Code_vessel_type = TARGET_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefvesseltype\nVesselTypeCode, xrefvesseltype union(byName: false)~> VesselTypeCrossRef\nVesselTypeGroup select(mapColumn(\n\t\tfp_3_ltr_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeType\ncrc derive(NA = 'N/A',\n\t\tnot_applicable = 'Not Applicable',\n\t\tconst_number = toInteger(null()),\n\t\tfp_level5_desc = 'Not Applicable') ~> Constant\nConstant select(mapColumn(\n\t\tNA,\n\t\tfp_level_5_code = NA,\n\t\tfp_level_5_decode = not_applicable,\n\t\tfp_level_5_desc = not_applicable,\n\t\tfp_level_5_hull = const_number,\n\t\tfp_level_5_sub = NA,\n\t\tvsl_cefor_group = not_applicable,\n\t\tvsl_desc = not_applicable,\n\t\tvsl_gard_group = NA,\n\t\tvsl_marine_group = not_applicable,\n\t\tvsl_risk_group = NA,\n\t\tvsl_group1 = const_number,\n\t\tvsl_group1_desc = not_applicable,\n\t\tvsl_group1_sort = not_applicable,\n\t\tvsl_group2 = const_number,\n\t\tvsl_group2_desc = not_applicable,\n\t\tvsl_group2_sort = not_applicable,\n\t\tvsl_group3 = const_number,\n\t\tvsl_group3_desc = not_applicable,\n\t\tvsl_group3_sort = not_applicable,\n\t\tvsl_group4 = const_number,\n\t\tvsl_group4_desc = not_applicable,\n\t\tvsl_group4_sort = not_applicable,\n\t\tvsl_group5 = const_number,\n\t\tvsl_group5_desc = not_applicable,\n\t\tvsl_group5_sort = not_applicable,\n\t\tvsl_groupIV = const_number,\n\t\tvsl_groupIV_desc = not_applicable,\n\t\tvsl_groupIV_sort = not_applicable,\n\t\tvsl_groupLOH = const_number,\n\t\tvsl_groupLOH_desc = not_applicable,\n\t\tvsl_groupLOH_sort = not_applicable,\n\t\tvsl_size_group_code = not_applicable,\n\t\tfp_Lvl4_code = NA,\n\t\tfp_Lvl4_Group = const_number,\n\t\tfp_group_Lvl4_decode = not_applicable,\n\t\tfp_Lvl3_code = NA,\n\t\tfp_Lvl3_Group = const_number,\n\t\tfp_Lvl3_decode = not_applicable,\n\t\tvessel_gard_group = NA\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> NA\nVesselTypeCrossRef, CodeType join(vessel_type_code == fp_3_ltr_code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> onlycrossref\nonlycrossref filter(iif(isNull(fp_3_ltr_code),1,0) == 1) ~> notInVslTypeGrp\nnotInVslTypeGrp derive(NA = 'N/A',\n\t\tnot_applicable = 'Not Applicable',\n\t\tconst_number = toInteger(null())) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tvessel_type_code,\n\t\tfp_level_5_code = NA,\n\t\tfp_level_5_decode = not_applicable,\n\t\tfp_level_5_desc = not_applicable,\n\t\tfp_level_5_hull = const_number,\n\t\tfp_level_5_sub = NA,\n\t\tvsl_cefor_group = not_applicable,\n\t\tvsl_desc = not_applicable,\n\t\tvsl_gard_group = NA,\n\t\tvsl_marine_group = not_applicable,\n\t\tvsl_risk_group = NA,\n\t\tvsl_group1 = const_number,\n\t\tvsl_group1_desc = not_applicable,\n\t\tvsl_group1_sort = not_applicable,\n\t\tvsl_group2 = const_number,\n\t\tvsl_group2_desc = not_applicable,\n\t\tvsl_group2_sort = not_applicable,\n\t\tvsl_group3 = const_number,\n\t\tvsl_group3_desc = not_applicable,\n\t\tvsl_group3_sort = not_applicable,\n\t\tvsl_group4 = const_number,\n\t\tvsl_group4_desc = not_applicable,\n\t\tvsl_group4_sort = not_applicable,\n\t\tvsl_group5 = const_number,\n\t\tvsl_group5_desc = not_applicable,\n\t\tvsl_group5_sort = not_applicable,\n\t\tvsl_groupIV = const_number,\n\t\tvsl_groupIV_desc = not_applicable,\n\t\tvsl_groupIV_sort = not_applicable,\n\t\tvsl_groupLOH = const_number,\n\t\tvsl_groupLOH_desc = not_applicable,\n\t\tvsl_groupLOH_sort = not_applicable,\n\t\tvsl_size_group_code = not_applicable,\n\t\tfp_Lvl4_code = NA,\n\t\tfp_Lvl4_Group = const_number,\n\t\tfp_group_Lvl4_decode = not_applicable,\n\t\tfp_Lvl3_code = NA,\n\t\tfp_Lvl3_Group = const_number,\n\t\tfp_Lvl3_decode = not_applicable,\n\t\tvessel_gard_group = NA\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> notin\nvesseltypegroupselected, notin, NA union(byName: false)~> finalunion\nVesselTypeGroup select(mapColumn(\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tvsl_group1,\n\t\tvsl_group1_desc,\n\t\tvsl_group1_sort,\n\t\tvsl_group2,\n\t\tvsl_group2_desc,\n\t\tvsl_group2_sort,\n\t\tvsl_group3,\n\t\tvsl_group3_desc,\n\t\tvsl_group3_sort,\n\t\tvsl_group4,\n\t\tvsl_group4_desc,\n\t\tvsl_group4_sort,\n\t\tvsl_group5,\n\t\tvsl_group5_desc,\n\t\tvsl_group5_sort,\n\t\tvsl_groupIV,\n\t\tvsl_groupIV_desc,\n\t\tvsl_groupIV_sort,\n\t\tvsl_groupLOH,\n\t\tvsl_groupLOH_desc,\n\t\tvsl_groupLOH_sort,\n\t\tvsl_size_group_code = group_code_Size,\n\t\tfp_Lvl4_code,\n\t\tfp_Lvl4_Group,\n\t\tfp_group_Lvl4_decode = group_Lvl4_decode,\n\t\tfp_Lvl3_code = group_Lvl3_decode,\n\t\tfp_Lvl3_Group = Fp_Lvl3_Group,\n\t\tfp_Lvl3_decode = group_desc_Lvl3,\n\t\tVessel_Gard_Group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> vesseltypegroupselected\nfinalunion derive(fp_3_ltr_code = iifNull(trim(fp_3_ltr_code),'N/A'),\n\t\tfp_level_5_code = iifNull(trim(fp_level_5_code),'N/A'),\n\t\tfp_level_5_decode = iifNull(trim(fp_level_5_decode),'N/A'),\n\t\tfp_level_5_desc = iifNull(trim(fp_level_5_desc),'N/A'),\n\t\tfp_level_5_hull = iifNull(fp_level_5_hull,0),\n\t\tfp_level_5_sub = iifNull(trim(fp_level_5_sub),'N/A'),\n\t\tvsl_cefor_group = iifNull(trim(vsl_cefor_group),'N/A'),\n\t\tvsl_desc = iifNull(trim(vsl_desc),'N/A'),\n\t\tvsl_gard_group = iifNull(trim(vsl_gard_group),'N/A'),\n\t\tvsl_marine_group = iifNull(trim(vsl_marine_group),'N/A'),\n\t\tvsl_risk_group = iifNull(trim(vsl_risk_group),'N/A'),\n\t\tvsl_group1 = iifNull((vsl_group1),0),\n\t\tvsl_group1_desc = iifNull(trim(vsl_group1_desc),'N/A'),\n\t\tvsl_group1_sort = iifNull(trim(vsl_group1_sort),'N/A'),\n\t\tvsl_group2 = iifNull((vsl_group2),0),\n\t\tvsl_group2_desc = iifNull(trim(vsl_group2_desc),'N/A'),\n\t\tvsl_group2_sort = iifNull(trim(vsl_group2_sort),'N/A'),\n\t\tvsl_group3 = iifNull((vsl_group3),0),\n\t\tvsl_group3_desc = iifNull(trim(vsl_group3_desc),'N/A'),\n\t\tvsl_group3_sort = iifNull(trim(vsl_group3_sort),'N/A'),\n\t\tvsl_group4 = iifNull((vsl_group4),0),\n\t\tvsl_group4_desc = iifNull(trim(vsl_group4_desc),'N/A'),\n\t\tvsl_group4_sort = iifNull(trim(vsl_group4_sort),'N/A'),\n\t\tvsl_group5 = iifNull((vsl_group5),0),\n\t\tvsl_group5_desc = iifNull(trim(vsl_group5_desc),'N/A'),\n\t\tvsl_group5_sort = iifNull(trim(vsl_group5_sort),'N/A'),\n\t\tvsl_groupIV = iifNull(vsl_groupIV,0),\n\t\tvsl_groupIV_desc = iifNull(trim(vsl_groupIV_desc),'N/A'),\n\t\tvsl_groupIV_sort = iifNull(trim(vsl_groupIV_sort),'N/A'),\n\t\tvsl_groupLOH = iifNull(vsl_groupLOH,0),\n\t\tvsl_groupLOH_desc = iifNull(trim(vsl_groupLOH_desc),'N/A'),\n\t\tvsl_groupLOH_sort = iifNull(trim(vsl_groupLOH_sort),'N/A'),\n\t\tvsl_size_group_code = iifNull(trim(vsl_size_group_code),'N/A'),\n\t\tfp_Lvl4_code = iifNull(trim(fp_Lvl4_code),'N/A'),\n\t\tfp_Lvl4_Group = iifNull(fp_Lvl4_Group,0),\n\t\tfp_group_Lvl4_decode = iifNull(trim(fp_group_Lvl4_decode),'N/A'),\n\t\tfp_Lvl3_code = iifNull(trim(fp_Lvl3_code),'N/A'),\n\t\tfp_Lvl3_Group = iifNull((fp_Lvl3_Group),0),\n\t\tfp_Lvl3_decode = iifNull(trim(fp_Lvl3_decode),'N/A'),\n\t\tVessel_Gard_Group = iifNull(trim(vsl_gard_group),'N/A')) ~> DefaultNull\nDefaultNull select(mapColumn(\n\t\tgrp_vessel_type_code_3ltr = fp_3_ltr_code,\n\t\tgrp_fp_level_5_code = fp_level_5_code,\n\t\tgrp_fp_level_5_decode = fp_level_5_decode,\n\t\tgrp_fp_level_5_desc = fp_level_5_desc,\n\t\tgrp_fp_level_5_hull = fp_level_5_hull,\n\t\tgrp_fp_level_5_sub = fp_level_5_sub,\n\t\tgrp_vsl_cefor_group = vsl_cefor_group,\n\t\tgrp_vsl_desc = vsl_desc,\n\t\tgrp_vsl_gard_group = vsl_gard_group,\n\t\tgrp_vsl_marine_group = vsl_marine_group,\n\t\tgrp_vsl_risk_group = vsl_risk_group,\n\t\tgrp_vsl_group1 = vsl_group1,\n\t\tgrp_vsl_group1_desc = vsl_group1_desc,\n\t\tgrp_vsl_group1_sort = vsl_group1_sort,\n\t\tgrp_vsl_group2 = vsl_group2,\n\t\tgrp_vsl_group2_desc = vsl_group2_desc,\n\t\tgrp_vsl_group2_sort = vsl_group2_sort,\n\t\tgrp_vsl_group3 = vsl_group3,\n\t\tgrp_vsl_group3_desc = vsl_group3_desc,\n\t\tgrp_vsl_group3_sort = vsl_group3_sort,\n\t\tgrp_vsl_group4 = vsl_group4,\n\t\tgrp_vsl_group4_desc = vsl_group4_desc,\n\t\tgrp_vsl_group4_sort = vsl_group4_sort,\n\t\tgrp_vsl_group5 = vsl_group5,\n\t\tgrp_vsl_group5_desc = vsl_group5_desc,\n\t\tgrp_vsl_group5_sort = vsl_group5_sort,\n\t\tgrp_vsl_groupIV = vsl_groupIV,\n\t\tgrp_vsl_groupIV_desc = vsl_groupIV_desc,\n\t\tgrp_vsl_groupIV_sort = vsl_groupIV_sort,\n\t\tgrp_vsl_groupLOH = vsl_groupLOH,\n\t\tgrp_vsl_groupLOH_desc = vsl_groupLOH_desc,\n\t\tgrp_vsl_groupLOH_sort = vsl_groupLOH_sort,\n\t\tgrp_vsl_size_group_code = vsl_size_group_code,\n\t\tgrp_fp_Lvl4_code = fp_Lvl4_code,\n\t\tgrp_fp_Lvl4_Group = fp_Lvl4_Group,\n\t\tgrp_fp_group_Lvl4_decode = fp_group_Lvl4_decode,\n\t\tgrp_fp_Lvl3_code = fp_Lvl3_code,\n\t\tgrp_fp_Lvl3_Group = fp_Lvl3_Group,\n\t\tgrp_fp_Lvl3_decode = fp_Lvl3_decode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renamingcolumns\nrenamingcolumns derive(top_key = 'ALL',\n\t\ttop_description = 'All Source Systems') ~> DeriveTopLevels\nDeriveTopLevels alterRow(upsertIf(iifNull(grp_vessel_type_code_3ltr,'A')!='A')) ~> AlterRow\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimVesselTyprGroup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/pre_dim_vessel_type_group')]",
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/Paris')]",
				"[concat(variables('factoryId'), '/datasets/dim_vessel_type_group')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_hlp_exchange_rate_usd')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "stage_hlp_exchange_rate",
								"type": "DatasetReference"
							},
							"name": "hlpExhangeRate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "hlp_exchange_rate_to_usd",
								"type": "DatasetReference"
							},
							"name": "hlpExchangeRateUSD"
						}
					],
					"transformations": [
						{
							"name": "FltrUSDCurrency"
						}
					],
					"script": "source(output(\n\t\tcurrency_code_from as string,\n\t\tcurrency_code_to as string,\n\t\tcurrency_id_from as decimal(38,18),\n\t\tcurrency_id_to as decimal(38,18),\n\t\tday as timestamp,\n\t\trate as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tformat: 'parquet') ~> hlpExhangeRate\nhlpExhangeRate filter(currency_code_to=='USD') ~> FltrUSDCurrency\nFltrUSDCurrency sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['stage_hlp_exchange_rate_to_usd.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> hlpExchangeRateUSD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stage_hlp_exchange_rate')]",
				"[concat(variables('factoryId'), '/datasets/hlp_exchange_rate_to_usd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_agreement_pa')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "Pagatable"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "Pagztable"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "Ppebtable"
						},
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tcrossreference"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "SrcSfCompany"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "DimTime"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_agreement",
								"type": "DatasetReference"
							},
							"name": "PreDimAgreement"
						}
					],
					"transformations": [
						{
							"name": "pebtableselect"
						},
						{
							"name": "pebtablemax"
						},
						{
							"name": "MaxPebver"
						},
						{
							"name": "pebisolan",
							"description": "Get last pebisolan pr pabpeaid"
						},
						{
							"name": "agatable"
						},
						{
							"name": "agztable"
						},
						{
							"name": "AgaAgz"
						},
						{
							"name": "AgaPeb"
						},
						{
							"name": "AgaCol"
						},
						{
							"name": "pebtable",
							"description": "Get last pebisolan pr pebpeaid"
						},
						{
							"name": "ParisMarketArea",
							"description": "source_system=PARIS and code_type_id=460"
						},
						{
							"name": "XrefMarketArea",
							"description": "code_type_id=460"
						},
						{
							"name": "ParisEmployee",
							"description": "source_system=PARIS and code_type_id=329"
						},
						{
							"name": "XrefEmpDefClmHandler",
							"description": "Default Claim Handler - Employee - 329"
						},
						{
							"name": "ParisVesslType",
							"description": "source_system=PARIS and code_type_id=45"
						},
						{
							"name": "XrefVesselType",
							"description": "code_type_id=45"
						},
						{
							"name": "ParisMarketSegment",
							"description": "source_system=PARIS and code_type_id=806"
						},
						{
							"name": "XrefMarketSegment",
							"description": "code_type_id=806"
						},
						{
							"name": "XrefEmpDefClmAdjuster",
							"description": "Default Claim Adjuster - Employee - 329"
						},
						{
							"name": "XrefEmpUW",
							"description": "Underwriter - Employee - 329"
						},
						{
							"name": "XrefEmpUwResp",
							"description": "Responsible Underwriter - Employee - 329"
						},
						{
							"name": "XrefEmpUwAss",
							"description": "Underwriter Assistant - Employee - 329"
						},
						{
							"name": "ParisAgreementTypeDetail",
							"description": "Source_system=PARIS and code_type_id=813"
						},
						{
							"name": "XrefAgreementTypeDet",
							"description": "Agreement Type Detail - 813"
						},
						{
							"name": "ParisOffice",
							"description": "Source_system=PARIS and code_type_id=112"
						},
						{
							"name": "XrefOffice",
							"description": "code_tye_id=112"
						},
						{
							"name": "ParisUwAssistTeam",
							"description": "Source_system=PARIS and code_type_id=809"
						},
						{
							"name": "XrefUwAssistTeam",
							"description": "Code_type_id=809"
						},
						{
							"name": "AgaBroker",
							"description": "Include broker_id"
						},
						{
							"name": "ParisCompany",
							"description": "Source_system='PARIS'"
						},
						{
							"name": "SfCompanyBroker",
							"description": "Broker name and id"
						},
						{
							"name": "SfCompanyClient"
						},
						{
							"name": "JoinOffice",
							"description": "Include Office_name"
						},
						{
							"name": "JoinAgreementTypeDet",
							"description": "Include Agreement Type Details"
						},
						{
							"name": "JoinUwAssistTeam",
							"description": "Include Underwriting Assistant Team"
						},
						{
							"name": "JoinUwAssist",
							"description": "Include Underwriter Assistant"
						},
						{
							"name": "JoinUw",
							"description": "Include Underwriter"
						},
						{
							"name": "JoinUwResp",
							"description": "Include Responsible Underwriter"
						},
						{
							"name": "JoinDefClmAdj",
							"description": "Include Default Claim Adjuster"
						},
						{
							"name": "JoinSfClient"
						},
						{
							"name": "JoinSfBroker"
						},
						{
							"name": "JoinMarketArea"
						},
						{
							"name": "JoinMarketSegment"
						},
						{
							"name": "JoinVesselType"
						},
						{
							"name": "UwYear",
							"description": "Select Underwriting year"
						},
						{
							"name": "JoinUwYear"
						},
						{
							"name": "AgreementRef",
							"description": "Agreement Reference"
						},
						{
							"name": "AgtUwYrMarket",
							"description": "Agreement Type, UwYear, UwYrdays, Market Area and Market Segment columns"
						},
						{
							"name": "JoinDefClmHandl"
						},
						{
							"name": "Select1",
							"description": "Include all target columns"
						}
					],
					"script": "source(output(\n\t\tagaadjsign as string,\n\t\tagaadmcode as string,\n\t\tagaagaid as string,\n\t\tagaagname as string,\n\t\tagaagno as decimal(38,18),\n\t\tagaagnorf as decimal(38,18),\n\t\tagaagtype as decimal(38,18),\n\t\tagaalgid as string,\n\t\tagaareacd as string,\n\t\tagaassetno as decimal(38,18),\n\t\tagaassetsubno as decimal(38,18),\n\t\tagaausign as string,\n\t\tagaautoconpol as string,\n\t\tagaavttrkeep as string,\n\t\tagaavttrnote as string,\n\t\tagaavttrpeaid as decimal(38,18),\n\t\tagaavttrpros as decimal(38,18),\n\t\tagaavttrstatus as string,\n\t\tagaavttrynsw as string,\n\t\tagabusnbranch as decimal(38,18),\n\t\tagabusncla as decimal(38,18),\n\t\tagabusndiv as decimal(38,18),\n\t\tagabusnregion as decimal(38,18),\n\t\tagabusnsec as decimal(38,18),\n\t\tagacantxt as string,\n\t\tagacashbefcovdate as timestamp,\n\t\tagacashbeforecover as string,\n\t\tagaccpid as string,\n\t\tagachartradeteam as string,\n\t\tagaclasstype as string,\n\t\tagaclmsign as string,\n\t\tagaclmuat as string,\n\t\tagaclosedate as timestamp,\n\t\tagaclosesign as string,\n\t\tagacloseynsw as string,\n\t\tagacomfacnote as string,\n\t\tagacomfacpeaid as decimal(38,18),\n\t\tagacomfacynsw as string,\n\t\tagacomp2 as decimal(38,18),\n\t\tagacompdisckeep as string,\n\t\tagacompdiscnote as string,\n\t\tagacompdiscpeaid as decimal(38,18),\n\t\tagacompdiscpros as decimal(38,18),\n\t\tagacompdiscynsw as string,\n\t\tagacomtarnote as string,\n\t\tagacomtarpeaid as decimal(38,18),\n\t\tagacomtarstknote as string,\n\t\tagacomtarstkpeaid as decimal(38,18),\n\t\tagacomtarstkynsw as string,\n\t\tagacomtarynsw as string,\n\t\tagaconcern as decimal(38,18),\n\t\tagaconnectsw as string,\n\t\tagaconsrnote as string,\n\t\tagaconsrynsw as string,\n\t\tagacontinsagaid as string,\n\t\tagacontinsagno as decimal(38,18),\n\t\tagacontinsynsw as string,\n\t\tagacrdate as timestamp,\n\t\tagacrsign as string,\n\t\tagacumul as string,\n\t\tagadatcan as timestamp,\n\t\tagadatest as timestamp,\n\t\tagadatora as timestamp,\n\t\tagadatore as timestamp,\n\t\tagadatpca as timestamp,\n\t\tagadecltyp as string,\n\t\tagadwbs as string,\n\t\tagaeldocynsw as string,\n\t\tagaelinvynsw as string,\n\t\tagaendate as timestamp,\n\t\tagaenhour as decimal(38,18),\n\t\tagaentrytype as string,\n\t\tagaeosign as string,\n\t\tagafileref as decimal(38,18),\n\t\tagafixprnote as string,\n\t\tagafixprpeaid as decimal(38,18),\n\t\tagafixprynsw as string,\n\t\tagafromcomp as decimal(38,18),\n\t\tagagday as decimal(38,18),\n\t\tagagen1keep as string,\n\t\tagagen1note as string,\n\t\tagagen1peaid as decimal(38,18),\n\t\tagagen1prov as decimal(38,18),\n\t\tagagen1ynsw as string,\n\t\tagagen2keep as string,\n\t\tagagen2note as string,\n\t\tagagen2peaid as decimal(38,18),\n\t\tagagen2prov as decimal(38,18),\n\t\tagagen2ynsw as string,\n\t\tagagen3keep as string,\n\t\tagagen3note as string,\n\t\tagagen3peaid as decimal(38,18),\n\t\tagagen3prov as decimal(38,18),\n\t\tagagen3ynsw as string,\n\t\tagagident as string,\n\t\tagagmonth as decimal(38,18),\n\t\tagagtype as string,\n\t\tagahealthdate as timestamp,\n\t\tagahealthynsw as string,\n\t\tagaincprovkeep as string,\n\t\tagaincprovnote as string,\n\t\tagaincprovpeaid as decimal(38,18),\n\t\tagaincprovpros as decimal(38,18),\n\t\tagaincprovynsw as string,\n\t\tagaincrebkeep as string,\n\t\tagaincrebnote as string,\n\t\tagaincrebpeaid as decimal(38,18),\n\t\tagaincrebpros as decimal(38,18),\n\t\tagaincrebynsw as string,\n\t\tagaindustrytxt as string,\n\t\tagainstti as string,\n\t\tagaintnote as string,\n\t\tagaisic as string,\n\t\tagaiyear as decimal(38,18),\n\t\tagaknvmark as string,\n\t\tagaktocred as decimal(38,18),\n\t\tagaktocust as decimal(38,18),\n\t\tagaktodeb as decimal(38,18),\n\t\tagaliabendate as timestamp,\n\t\tagalocpolissued as string,\n\t\tagalongname as string,\n\t\tagalostcode as string,\n\t\tagalosttxt35 as string,\n\t\tagaludate as timestamp,\n\t\tagalusign as string,\n\t\tagamaiper as decimal(38,18),\n\t\tagamgrpnote as string,\n\t\tagamgrpynsw as string,\n\t\tagamincurr as string,\n\t\tagaminpre as decimal(38,18),\n\t\taganoterm as decimal(38,18),\n\t\tagansalecom as decimal(38,18),\n\t\taganscomynsw as string,\n\t\taganumpers as decimal(38,18),\n\t\tagaoffice as decimal(38,18),\n\t\tagaoiltyp as decimal(38,18),\n\t\tagaopencover as string,\n\t\tagaordercode as string,\n\t\tagaordertxt35 as string,\n\t\tagaorgcrdate as timestamp,\n\t\tagaorgins as decimal(38,18),\n\t\tagaoxno as decimal(38,18),\n\t\tagaoxrefid as string,\n\t\tagaoyrno as decimal(38,18),\n\t\tagaoyrnote as string,\n\t\tagaoyrto as decimal(38,18),\n\t\tagapeoid as string,\n\t\tagapictype as string,\n\t\tagapwcode as decimal(38,18),\n\t\tagapwfrdate as timestamp,\n\t\tagaratcod as string,\n\t\tagaratemodel as decimal(38,18),\n\t\tagarefcod as string,\n\t\tagareftxt as string,\n\t\tagaremove as decimal(38,18),\n\t\tagarenbatchid as decimal(38,18),\n\t\tagarencod as decimal(38,18),\n\t\tagarentxt as string,\n\t\tagasalesdiv as decimal(38,18),\n\t\tagasetfreq as decimal(38,18),\n\t\tagasettldetprt as string,\n\t\tagashut as string,\n\t\tagasitid as string,\n\t\tagaskipinstadynsw as string,\n\t\tagasource as decimal(38,18),\n\t\tagastat1 as string,\n\t\tagastat2 as string,\n\t\tagastateareacd as string,\n\t\tagastdate as timestamp,\n\t\tagasthour as decimal(38,18),\n\t\tagaswo as string,\n\t\tagatocomp as decimal(38,18),\n\t\tagatrackit as string,\n\t\tagatrackit1 as string,\n\t\tagatrackit2 as string,\n\t\tagatrackit3 as string,\n\t\tagatreatas as string,\n\t\tagaturnover as decimal(38,18),\n\t\tagatzone as string,\n\t\tagauat as string,\n\t\tagaufafpynsw as string,\n\t\tagausage as string,\n\t\tagausecod as string,\n\t\tagauwsign as string,\n\t\tagawbs as string,\n\t\tagawbscust as string,\n\t\tagawntnocperiod as decimal(38,18),\n\t\tagawnttext35 as string,\n\t\tagawntynsw as string,\n\t\tagaxmednote as string,\n\t\tagaxmedpeaid as decimal(38,18),\n\t\tagaxmedynsw as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> Pagatable\nsource(output(\n\t\tagzaccadrpeaid as decimal(38,18),\n\t\tagzactnodate as timestamp,\n\t\tagzactnoofemp as decimal(38,18),\n\t\tagzagzid as string,\n\t\tagzamtcod as string,\n\t\tagzbusntyp as decimal(38,18),\n\t\tagzcedent as decimal(38,18),\n\t\tagzcefoty as string,\n\t\tagzclmadrpeaid as decimal(38,18),\n\t\tagzclmlead as decimal(38,18),\n\t\tagzcooroccynsw as string,\n\t\tagzcshind as decimal(38,18),\n\t\tagzcurrgrosepi as decimal(38,18),\n\t\tagzcurrosgrosepi as decimal(38,18),\n\t\tagzdefcurr as string,\n\t\tagzdefexchrate as decimal(38,18),\n\t\tagzdefinstcalctype as decimal(38,18),\n\t\tagzdefinstpertype as decimal(38,18),\n\t\tagzdefintrst as string,\n\t\tagzdefwarrsw as string,\n\t\tagzepicurr as string,\n\t\tagzextadjynsw as string,\n\t\tagzfagntno as decimal(38,18),\n\t\tagzgtepi as decimal(38,18),\n\t\tagzgvalue as decimal(38,18),\n\t\tagzinstadynz as string,\n\t\tagzleadownline as string,\n\t\tagzndisc as decimal(38,18),\n\t\tagznoofemp as decimal(38,18),\n\t\tagznoofobjepi as decimal(38,18),\n\t\tagzoforder as decimal(38,18),\n\t\tagzordtxt35 as string,\n\t\tagzosgrosepi as decimal(38,18),\n\t\tagzosnetepi as decimal(38,18),\n\t\tagzosnpml as decimal(38,18),\n\t\tagzospml as decimal(38,18),\n\t\tagzourlin as decimal(38,18),\n\t\tagzratind as decimal(38,18),\n\t\tagztogrosepi as decimal(38,18),\n\t\tagztonetepi as decimal(38,18),\n\t\tagztonpml as decimal(38,18),\n\t\tagztotind as decimal(38,18),\n\t\tagztotpml as decimal(38,18),\n\t\tagzuwradrpeaid as decimal(38,18),\n\t\tagzvescod as string,\n\t\tagzwarrenty as decimal(38,18),\n\t\tagzwroforder as decimal(38,18),\n\t\tagzwrshare as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> Pagztable\nsource(output(\n\t\tpebbrdate as timestamp,\n\t\tpebcivilstatus as decimal(38,18),\n\t\tpebconbusncla as decimal(38,18),\n\t\tpebconbusndiv as decimal(38,18),\n\t\tpebconbusnsec as decimal(38,18),\n\t\tpebconcomp2 as decimal(38,18),\n\t\tpebconoffice as decimal(38,18),\n\t\tpebdistrict as string,\n\t\tpebdunco as decimal(38,18),\n\t\tpebemlcurr as string,\n\t\tpebemlmdescr as string,\n\t\tpebetcbroker as string,\n\t\tpebfortsector as decimal(38,18),\n\t\tpebforttrade as string,\n\t\tpebgeneml as decimal(38,18),\n\t\tpebgroup as decimal(38,18),\n\t\tpebhourprice as decimal(38,18),\n\t\tpebinstadynz as string,\n\t\tpebisolan as string,\n\t\tpebkycapprdate as timestamp,\n\t\tpebkycapproved as string,\n\t\tpebkyccompany as decimal(38,18),\n\t\tpebkyccompdescr as string,\n\t\tpebkycid as string,\n\t\tpebludate as timestamp,\n\t\tpeblusign as string,\n\t\tpebmacheml as decimal(38,18),\n\t\tpebmansanctdescr as string,\n\t\tpebmansanction as string,\n\t\tpebmdescr as string,\n\t\tpebmvaynsw as string,\n\t\tpebnmisic as string,\n\t\tpebnmnyk as string,\n\t\tpeboffsanctdescr as string,\n\t\tpeboffsanction as string,\n\t\tpebonrisk as string,\n\t\tpebonriskdate as timestamp,\n\t\tpebpaylevel as decimal(38,18),\n\t\tpebpeaid as decimal(38,18),\n\t\tpebpebid as string,\n\t\tpebpeoid as string,\n\t\tpebpeoopeaid as decimal(38,18),\n\t\tpebpersacc as decimal(38,18),\n\t\tpebpever as decimal(38,18),\n\t\tpebpibregdate as timestamp,\n\t\tpebpibregsign as string,\n\t\tpebpidcname as string,\n\t\tpebpidid as decimal(38,18),\n\t\tpebpricecurr as string,\n\t\tpebqadate as timestamp,\n\t\tpebqasign as string,\n\t\tpebqastatus as string,\n\t\tpebratcod as string,\n\t\tpebratcomp as decimal(38,18),\n\t\tpebratedate as timestamp,\n\t\tpebratludate as timestamp,\n\t\tpebratsign as string,\n\t\tpebreason as string,\n\t\tpebressign as string,\n\t\tpebsitid as string,\n\t\tpebsupporter as string,\n\t\tpebtaxno as string,\n\t\tpebtypelevel as decimal(38,18),\n\t\tpebusstate as string,\n\t\tpebvaldate as timestamp,\n\t\tpebverstat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> Ppebtable\nsource(output(\n\t\tsource_code_key as string,\n\t\tsource_system as string,\n\t\ttarget_code as string,\n\t\ttarget_description as string,\n\t\tcode_type_id as double,\n\t\tcode2 as string,\n\t\tom_x_ref as string,\n\t\tcode_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcrossreference\nsource(output(\n\t\taccount_resp_me as string,\n\t\taccount_resp_pi as string,\n\t\taccount_status as string,\n\t\tclient_lost_reason as string,\n\t\tcompany_email as string,\n\t\tcompany_id as double,\n\t\tcompany_name as string,\n\t\tcompany_owner_full_name as string,\n\t\tcompany_owner_id as string,\n\t\tcountry as string,\n\t\tcuo_full_name as string,\n\t\tcuo_user_id as string,\n\t\tdate_inserted as timestamp,\n\t\tdate_updated as timestamp,\n\t\tgard_contact_id as string,\n\t\tmarket_area_code as string,\n\t\tmarket_area_description as string,\n\t\tmarket_area_id as string,\n\t\tparent_company_id as double,\n\t\tparent_company_name as string,\n\t\tparis_gic_id as double,\n\t\tprimary_contact_email as string,\n\t\tprimary_contact_name as string,\n\t\tsf_last_updated_date as timestamp,\n\t\tsource_system as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'sf_company',\n\tformat: 'parquet') ~> SrcSfCompany\nsource(output(\n\t\taccounting_month_end_date as timestamp,\n\t\taccounting_month_id as double,\n\t\taccounting_month_key as decimal(38,18),\n\t\taccounting_month_of_quarter as double,\n\t\taccounting_month_of_year as double,\n\t\taccounting_month_start_date as timestamp,\n\t\taccounting_month_time_span as double,\n\t\taccounting_qtr_end_date as timestamp,\n\t\taccounting_qtr_of_year as double,\n\t\taccounting_qtr_start_date as timestamp,\n\t\taccounting_qtr_time_span as double,\n\t\taccounting_quarter_id as double,\n\t\taccounting_quarter_key as decimal(38,18),\n\t\taccounting_year_end_date as timestamp,\n\t\taccounting_year_id as double,\n\t\taccounting_year_key as decimal(38,18),\n\t\taccounting_year_number as double,\n\t\taccounting_year_start_date as timestamp,\n\t\taccounting_year_time_span as double,\n\t\tall_years as string,\n\t\tcalendar_date_id as double,\n\t\tcalendar_date_key as timestamp,\n\t\tday as timestamp,\n\t\tday_name as string,\n\t\tday_of_accounting_month as double,\n\t\tday_of_accounting_quarter as double,\n\t\tday_of_accounting_year as double,\n\t\tday_of_policy_month as double,\n\t\tday_of_policy_quarter as double,\n\t\tday_of_policy_year as double,\n\t\tday_of_underwriting_month as double,\n\t\tday_of_underwriting_quarter as double,\n\t\tday_of_underwriting_year as double,\n\t\tdimension_key as double,\n\t\tpolicy_month_end_date as timestamp,\n\t\tpolicy_month_id as double,\n\t\tpolicy_month_key as decimal(38,18),\n\t\tpolicy_month_name as string,\n\t\tpolicy_month_of_quarter as double,\n\t\tpolicy_month_of_year as double,\n\t\tpolicy_month_start_date as timestamp,\n\t\tpolicy_month_time_span as double,\n\t\tpolicy_qtr_end_date as timestamp,\n\t\tpolicy_qtr_of_year as double,\n\t\tpolicy_qtr_start_date as timestamp,\n\t\tpolicy_qtr_time_span as double,\n\t\tpolicy_quarter_id as double,\n\t\tpolicy_quarter_key as decimal(38,18),\n\t\tpolicy_year_end_date as timestamp,\n\t\tpolicy_year_id as double,\n\t\tpolicy_year_key as decimal(38,18),\n\t\tpolicy_year_number as double,\n\t\tpolicy_year_start_date as timestamp,\n\t\tpolicy_year_time_span as double,\n\t\ttop_id as double,\n\t\ttop_key as decimal(38,18),\n\t\tunderwriting_month_end_date as timestamp,\n\t\tunderwriting_month_id as double,\n\t\tunderwriting_month_key as decimal(38,18),\n\t\tunderwriting_month_of_quarter as double,\n\t\tunderwriting_month_of_year as double,\n\t\tunderwriting_month_start_date as timestamp,\n\t\tunderwriting_month_time_span as double,\n\t\tunderwriting_qtr_end_date as timestamp,\n\t\tunderwriting_qtr_of_year as double,\n\t\tunderwriting_qtr_start_date as timestamp,\n\t\tunderwriting_qtr_time_span as double,\n\t\tunderwriting_quarter_id as double,\n\t\tunderwriting_quarter_key as decimal(38,18),\n\t\tunderwriting_year_end_date as timestamp,\n\t\tunderwriting_year_id as double,\n\t\tunderwriting_year_key as decimal(38,18),\n\t\tunderwriting_year_number as double,\n\t\tunderwriting_year_start_date as timestamp,\n\t\tunderwriting_year_time_span as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> DimTime\nPpebtable select(mapColumn(\n\t\tpebpeaid,\n\t\tpebpever,\n\t\tpebisolan\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> pebtableselect\nPpebtable select(mapColumn(\n\t\tpebpeaid,\n\t\tpebpever\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> pebtablemax\npebtablemax aggregate(groupBy(pebpeaid),\n\tpebpever = max(pebpever)) ~> MaxPebver\npebtableselect, MaxPebver join(pebtableselect@pebpeaid == MaxPebver@pebpeaid\n\t&& pebtableselect@pebpever == MaxPebver@pebpever,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> pebisolan\nPagatable select(mapColumn(\n\t\tagaagaid,\n\t\tagaiyear,\n\t\tagaagno,\n\t\tagaagname,\n\t\tagaoffice,\n\t\tagabusndiv,\n\t\tagabusnsec,\n\t\tagabusncla,\n\t\tagasource,\n\t\tagaorgins,\n\t\tagastdate,\n\t\tagaendate,\n\t\tagauwsign,\n\t\tagaausign,\n\t\tagaclmsign,\n\t\tagaisic,\n\t\tagaadjsign,\n\t\tagaeosign,\n\t\tagasitid,\n\t\tagaadjsign,\n\t\tagaintnote,\n\t\tagadatest,\n\t\tagauat,\n\t\tagaordercode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> agatable\nPagztable select(mapColumn(\n\t\tagzagzid,\n\t\tagzcefoty,\n\t\tagzcurrgrosepi,\n\t\tagzepicurr,\n\t\tagzextadjynsw,\n\t\tagzfagntno,\n\t\tagzgtepi,\n\t\tagznoofobjepi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> agztable\nagatable, agztable join(agaagaid == agzagzid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> AgaAgz\nAgaAgz, pebtable join(agasource == pebpeaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> AgaPeb\nAgaPeb select(mapColumn(\n\t\tagaagaid,\n\t\tagaiyear,\n\t\tagaagno,\n\t\tagaagname,\n\t\tagaoffice,\n\t\tagabusndiv,\n\t\tagabusnsec,\n\t\tagabusncla,\n\t\tagasource,\n\t\tagaorgins,\n\t\tagastdate,\n\t\tagaendate,\n\t\tagauwsign,\n\t\tagaausign,\n\t\tagaclmsign,\n\t\tagaisic,\n\t\tagaadjsign,\n\t\tagaeosign,\n\t\tagasitid,\n\t\tagaintnote,\n\t\tagadatest,\n\t\tagauat,\n\t\tagzagzid,\n\t\tagzcefoty,\n\t\tagzcurrgrosepi,\n\t\tagzepicurr,\n\t\tagzextadjynsw,\n\t\tagzfagntno,\n\t\tagzgtepi,\n\t\tagznoofobjepi,\n\t\tpebisolan,\n\t\tagaordercode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AgaCol\npebisolan select(mapColumn(\n\t\tpebpeaid = pebtableselect@pebpeaid,\n\t\tpebpever = pebtableselect@pebpever,\n\t\tpebisolan\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> pebtable\ntcrossreference filter(source_system=='PARIS' && code_type_id==460) ~> ParisMarketArea\nParisMarketArea select(mapColumn(\n\t\tsource_code_key_market_area = source_code_key,\n\t\ttarget_code_market_area = target_code,\n\t\ttarget_desc_market_area = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefMarketArea\ntcrossreference filter(source_system=='PARIS' && code_type_id==329) ~> ParisEmployee\nParisEmployee select(mapColumn(\n\t\tsource_code_key_def_clm_h = source_code_key,\n\t\ttarget_code_def_clm_h = target_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefEmpDefClmHandler\ntcrossreference filter(source_system=='PARIS' && code_type_id==45) ~> ParisVesslType\nParisVesslType select(mapColumn(\n\t\tsource_code_key_vessel_type = source_code_key,\n\t\ttarget_code_vessel_type = target_code,\n\t\ttarget_desc_vessel_type = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefVesselType\ntcrossreference filter(source_system=='PARIS' && code_type_id==806) ~> ParisMarketSegment\nParisMarketSegment select(mapColumn(\n\t\tsource_code_key_MarkSegemnt = source_code_key,\n\t\ttarget_code_MarkSegemnt = target_code,\n\t\ttarget_desc_MarkSegemnt = target_description,\n\t\tcode2_MarkSegemnt = code2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefMarketSegment\nParisEmployee select(mapColumn(\n\t\tsource_code_defclmadj = source_code_key,\n\t\ttarget_code_defclmadj = target_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefEmpDefClmAdjuster\nParisEmployee select(mapColumn(\n\t\tsource_code_key_UW = source_code_key,\n\t\ttarget_code_UW = target_code,\n\t\ttarget_desc_UW = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefEmpUW\nParisEmployee select(mapColumn(\n\t\tsource_code_key_UwResp = source_code_key,\n\t\ttarget_code_UwResp = target_code,\n\t\ttarget_desc_UwResp = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefEmpUwResp\nParisEmployee select(mapColumn(\n\t\tsource_system_uwass = source_code_key,\n\t\ttarget_code_uwass = target_code,\n\t\ttarget_desc_uwass = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefEmpUwAss\ntcrossreference filter(source_system=='PARIS' && code_type_id==813) ~> ParisAgreementTypeDetail\nParisAgreementTypeDetail select(mapColumn(\n\t\tsource_code_key_agt_det = source_code_key,\n\t\ttarge_code_agt_det = target_code,\n\t\ttarget_desc_agt_det = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefAgreementTypeDet\ntcrossreference filter(source_system=='PARIS' && code_type_id==112) ~> ParisOffice\nParisOffice select(mapColumn(\n\t\tsource_code_key_office = source_code_key,\n\t\ttarget_desc_office = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefOffice\ntcrossreference filter(source_system=='PARIS' && code_type_id==809) ~> ParisUwAssistTeam\nParisUwAssistTeam select(mapColumn(\n\t\tsource_code_key_uwassteam = source_code_key,\n\t\ttarget_code_uwassteam = target_code,\n\t\ttarget_desc_uwassteam = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefUwAssistTeam\nAgaCol derive(broker_id = case(agabusncla==8, iifNull(agzfagntno,case(agasource==agaorgins, toDecimal(null()), agasource)), case(agasource==agaorgins, toDecimal(null()), agasource)),\n\t\tagaoffice_string = toString(agaoffice,'##########0')) ~> AgaBroker\nSrcSfCompany filter(source_system=='Paris') ~> ParisCompany\nParisCompany select(mapColumn(\n\t\tsf_company_id_broker = company_id,\n\t\tsf_company_name_broker = company_name,\n\t\tsf_paris_gic_id_broker = paris_gic_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SfCompanyBroker\nParisCompany select(mapColumn(\n\t\tsf_client_lost_reason = client_lost_reason,\n\t\tsf_company_id_client = company_id,\n\t\tsf_company_name_client = company_name,\n\t\tsf_company_owner_full_name = company_owner_full_name,\n\t\tsf_market_area_code = market_area_code,\n\t\tsf_market_area_description = market_area_description,\n\t\tsf_source_system_id = paris_gic_id,\n\t\tsf_source_system = source_system,\n\t\tsf_company\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SfCompanyClient\nAgaBroker, XrefOffice join(toString(agaoffice,'########0') == source_code_key_office,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinOffice\nJoinOffice, XrefAgreementTypeDet join(toString(agabusncla,'#########0') == source_code_key_agt_det,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinAgreementTypeDet\nJoinAgreementTypeDet, XrefUwAssistTeam join(agauat == source_code_key_uwassteam,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUwAssistTeam\nJoinUwAssistTeam, XrefEmpUwAss join(agaausign == source_system_uwass,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUwAssist\nJoinUwAssist, XrefEmpUW join(agauwsign == source_code_key_UW,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUw\nJoinUw, XrefEmpUwResp join(agaeosign == source_code_key_UwResp,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUwResp\nJoinUwResp, XrefEmpDefClmAdjuster join(agaadjsign == source_code_defclmadj,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDefClmAdj\nJoinUwYear, SfCompanyClient join(agaorgins == sf_source_system_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSfClient\nJoinSfClient, SfCompanyBroker join(agasource == sf_paris_gic_id_broker,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSfBroker\nJoinDefClmHandl, XrefMarketArea join(agasitid == source_code_key_market_area,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMarketArea\nJoinMarketArea, XrefMarketSegment join(pebisolan == source_code_key_MarkSegemnt,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinMarketSegment\nJoinMarketSegment, XrefVesselType join(agzcefoty == source_code_key_vessel_type,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVesselType\nDimTime select(mapColumn(\n\t\tday,\n\t\tunderwriting_year_number,\n\t\tunderwriting_year_start_date,\n\t\tunderwriting_year_end_date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UwYear\nJoinVesselType, UwYear join(agastdate == day,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinUwYear\nAgtUwYrMarket derive(agreement_reference = concat(toString(agaiyear,'0000'), Agreement_type , lpad(toString(agaagno,'#####0'),6,'0')),\n\t\tna_desc = 'Not Applicable',\n\t\tna_id = 1,\n\t\tna_code = 'N') ~> AgreementRef\nJoinSfBroker derive(Agreement_type = case(agabusndiv==1, 'M', case(agabusndiv==2, 'E', case(agabusndiv==3, 'B', 'P'))),\n\t\tagr_uw_year = case(agabusnsec==91, toString(agaiyear,'0000'), toString(underwriting_year_number,'0000')),\n\t\tagr_uw_year_numeric = case(agabusnsec==91, agaiyear, toDecimal(underwriting_year_number,4,0)),\n\t\tagr_uw_year_days = toDecimal(underwriting_year_end_date - underwriting_year_start_date,3,0) + 1,\n\t\tagr_market_segment_code = case(target_code_market_area=='OWN', 'OWN', \r\ncase( in(['N/A','NA'],iifNull(target_code_market_area,'N/A')), 'NA', 'SPEC')),\n\t\tagr_market_segment = case(target_code_market_area=='OWN', 'Shipowners', \r\ncase( in(['N/A','NA'],iifNull(target_code_market_area,'N/A')), 'Not Assigned', 'Specialty')),\n\t\tagr_market_segment_split_code = target_code_market_area,\n\t\tagr_market_segment_split = target_desc_market_area,\n\t\tagr_market_area_code = case(target_code_market_area == 'OWN', target_code_MarkSegemnt, target_code_market_area),\n\t\tagr_market_area = case(target_code_market_area == 'OWN', target_desc_MarkSegemnt, target_desc_market_area),\n\t\tagr_market_area_sort = case(target_code_market_area == 'OWN', code2_MarkSegemnt, \r\nconcat('Z',target_desc_market_area)),\n\t\tagr_sf_key = concat(sf_source_system,toString(sf_source_system_id))) ~> AgtUwYrMarket\nJoinDefClmAdj, XrefEmpDefClmHandler join(agaclmsign == source_code_key_def_clm_h,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDefClmHandl\nAgreementRef select(mapColumn(\n\t\tpk_key = agaagaid,\n\t\tagr_date_start = agastdate,\n\t\tagr_date_end = agaendate,\n\t\tagr_uw_year,\n\t\tagr_reference = agreement_reference,\n\t\tagr_office = target_desc_office,\n\t\tagr_uw_code = target_code_UW,\n\t\tagr_uw_description = target_desc_UW,\n\t\tagr_agreement_name = agaagname,\n\t\tagr_market_area_code,\n\t\tagr_market_area_desc = agr_market_area,\n\t\tagr_member_number = agaorgins,\n\t\tagr_sf_market_area_code = sf_market_area_code,\n\t\tagr_sf_market_area_desc = sf_market_area_description,\n\t\tagr_sf_company_id = sf_company_id_client,\n\t\tagr_sf_key,\n\t\tagr_sf_client_lost_reason = sf_client_lost_reason,\n\t\tagr_sf_company_name_client = sf_company_name_client,\n\t\tagr_sf_company_owner = sf_company_owner_full_name,\n\t\tagr_sf_company_name_broker = sf_company_name_broker,\n\t\tagr_sf_top_group_client = na_desc,\n\t\tagr_sf_top_group_client_id = na_id,\n\t\tagr_sf_company_broker_id = sf_company_id_broker,\n\t\tagr_sf_top_group_broker = na_desc,\n\t\tagr_sf_top_group_broker_id = na_id,\n\t\tagr_def_clhndl_dry_cargo_pri = na_desc,\n\t\tagr_def_clhndl_pi_crew_pri = na_desc,\n\t\tagr_def_clhandl_casualty_pri = na_desc,\n\t\tagr_def_clhandl_defence_pri = na_desc,\n\t\tagr_def_clhandl_liquid_ca_pri = na_desc,\n\t\tagr_def_clhandl_environm_pri = na_desc,\n\t\tagr_def_clhndl_dry_cargo_sec = na_desc,\n\t\tagr_def_clhndl_pi_crew_sec = na_desc,\n\t\tagr_def_clhandl_casualty_sec = na_desc,\n\t\tagr_def_clhandl_defence_sec = na_desc,\n\t\tagr_def_clhandl_liquid_ca_sec = na_desc,\n\t\tagr_def_clhandl_environm_sec = na_desc,\n\t\tagr_dev_claims_handler_paris = target_code_def_clm_h,\n\t\tagr_uw_assist_code = target_code_uwass,\n\t\tagr_uw_assist_description = target_desc_uwass,\n\t\tagr_club_retention = na_id,\n\t\tcharterers_trad_clm_team_ind = na_code,\n\t\tagr_def_claim_adjuster = target_code_defclmadj,\n\t\tagr_dummy_ind = na_code,\n\t\tagr_club_retention_stat = na_id,\n\t\tagr_abatement_usd = na_id,\n\t\tagr_abatement_stat = na_id,\n\t\tagr_uw_year_days,\n\t\tagr_resp_uw_code = target_code_UwResp,\n\t\tagr_resp_uw_desc = target_desc_UwResp,\n\t\tagr_ext_adjuster_ind = agzextadjynsw,\n\t\tagr_order_code = agaordercode,\n\t\tagr_internal_note = againtnote,\n\t\tagr_date_established = agadatest,\n\t\tagr_market_segm_cnt_grp_code = target_code_MarkSegemnt,\n\t\tagr_market_segm_country_group = target_desc_MarkSegemnt,\n\t\tagr_market_segm_cnt_grp_sort = code2_MarkSegemnt,\n\t\tagr_market_segment_code,\n\t\tagr_market_segment,\n\t\tagr_market_segment_split_code,\n\t\tagr_market_segment_split,\n\t\tagr_market_area_sort,\n\t\tagr_uw_assist_team_code = target_code_uwassteam,\n\t\tagr_uw_assist_team_desc = target_desc_uwassteam,\n\t\tagr_agreement_type_detail_code = targe_code_agt_det,\n\t\tagr_agreement_type_detail_desc = target_desc_agt_det,\n\t\tagr_est_total_gross_ton = agzgtepi,\n\t\tagr_main_vessel_type_code = target_code_vessel_type,\n\t\tagr_main_vessel_type_desc = target_desc_vessel_type,\n\t\tagr_est_premium_currency_code = agzepicurr,\n\t\tagr_est_premium_org = agzcurrgrosepi\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_agreement.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimAgreement"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Paris')]",
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_agreement')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_agreement_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/pre_dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tcrossreference"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_agreement_type",
								"type": "DatasetReference"
							},
							"name": "preDimAgreementType"
						}
					],
					"transformations": [
						{
							"name": "agreementtype"
						},
						{
							"name": "deduplicator"
						},
						{
							"name": "renameOutputColumn"
						},
						{
							"name": "addLastUpdatedBy"
						},
						{
							"name": "alterrow"
						}
					],
					"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcrossreference\ntcrossreference filter(CODE_TYPE_ID == 113) ~> agreementtype\nagreementtype aggregate(groupBy(TARGET_DESCRIPTION),\n\tTARGET_CODE = first(TARGET_CODE)) ~> deduplicator\ndeduplicator select(mapColumn(\n\t\tagt_description = TARGET_DESCRIPTION,\n\t\tagt_key = TARGET_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renameOutputColumn\nrenameOutputColumn derive(last_updated_by = 'pre_dim_agreement_type') ~> addLastUpdatedBy\naddLastUpdatedBy alterRow(upsertIf(!isNull(agt_key))) ~> alterrow\nalterrow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_agreement_type.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimAgreementType"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_agreement_type')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_business_area')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/pre_dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tcrossreference"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_business_area",
								"type": "DatasetReference"
							},
							"name": "preDimBusinessArea"
						}
					],
					"transformations": [
						{
							"name": "businessarea"
						},
						{
							"name": "deduplicator"
						},
						{
							"name": "expression"
						},
						{
							"name": "xrefBusarea"
						},
						{
							"name": "predimbusareatable"
						},
						{
							"name": "alterrow"
						}
					],
					"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcrossreference\ntcrossreference filter(CODE_TYPE_ID==106 && TARGET_CODE!='PI') ~> businessarea\nxrefBusarea aggregate(groupBy(bus_description),\n\tbus_key = first(bus_key)) ~> deduplicator\ndeduplicator derive(grp_key = case(in(['EN','BU'],bus_key), 'EG', case(in(['PM', 'PF'], bus_key), 'PI', bus_key)),\n\t\tgrp_description = case(in(['EN','BU'],bus_key), 'Energy+', case(in(['PM', 'PF'], bus_key), 'P&I', bus_description)),\n\t\tbua_key = case(in(['PM','PF'],bus_key), 'PI', bus_key),\n\t\tbua_description = case(in(['PM','PF'],bus_key), 'P&I', bus_description),\n\t\tlast_updated_by = 'm_pre_dim_business_area') ~> expression\nbusinessarea select(mapColumn(\n\t\tbus_key = TARGET_CODE,\n\t\tbus_description = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefBusarea\nexpression select(mapColumn(\n\t\tbus_description,\n\t\tbus_key,\n\t\tgrp_key,\n\t\tgrp_description,\n\t\tbua_key,\n\t\tbua_description,\n\t\tlast_updated_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> predimbusareatable\npredimbusareatable alterRow(upsertIf(!isNull(bus_key))) ~> alterrow\nalterrow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_business_area.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimBusinessArea"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_business_area')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_claim_detail_pa')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pre DIM claim detail from Paris ",
				"folder": {
					"name": "dwh_prepare/pre_dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tcrossreference"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_claim_detail_pa",
								"type": "DatasetReference"
							},
							"name": "preDimClaimPA"
						}
					],
					"transformations": [
						{
							"name": "parisClaimDetail"
						},
						{
							"name": "deduplicator"
						},
						{
							"name": "xrefcld"
						},
						{
							"name": "alterRow"
						},
						{
							"name": "lastupdatedby"
						}
					],
					"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcrossreference\ntcrossreference filter(SOURCE_SYSTEM=='PARIS' && CODE_TYPE_ID==775) ~> parisClaimDetail\nxrefcld aggregate(groupBy(cld_description),\n\tcld_key = first(cld_key)) ~> deduplicator\nparisClaimDetail select(mapColumn(\n\t\tcld_key = TARGET_CODE,\n\t\tcld_description = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefcld\nlastupdatedby alterRow(upsertIf(!isNull(cld_key))) ~> alterRow\ndeduplicator derive(last_updated_by = 'pre_dim_claim_detail') ~> lastupdatedby\nalterRow sink(input(\n\t\tagt_description as string,\n\t\tagt_key as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_claim_detail_pa.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimClaimPA"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_claim_detail_pa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_country')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/pre_dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "vcrossreference"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_country",
								"type": "DatasetReference"
							},
							"name": "preDimCountry"
						}
					],
					"transformations": [
						{
							"name": "country50"
						},
						{
							"name": "area219"
						},
						{
							"name": "regionA374"
						},
						{
							"name": "region367"
						},
						{
							"name": "region219"
						},
						{
							"name": "join1xRefCountryRegion"
						},
						{
							"name": "xRefCountry50"
						},
						{
							"name": "xRefRegion219"
						},
						{
							"name": "xRefArea219"
						},
						{
							"name": "Join1"
						},
						{
							"name": "area3"
						},
						{
							"name": "JoinxRefCountryRegionA"
						},
						{
							"name": "xRefRegionA374"
						},
						{
							"name": "JoinxRefCountryRegionARegion"
						},
						{
							"name": "xRefRegion367"
						},
						{
							"name": "Join0"
						},
						{
							"name": "area2"
						},
						{
							"name": "JoinCountryRegion"
						},
						{
							"name": "JoinArea"
						},
						{
							"name": "area1"
						},
						{
							"name": "setOperation"
						},
						{
							"name": "deduplicator"
						},
						{
							"name": "expression"
						},
						{
							"name": "alterRow"
						},
						{
							"name": "predimcountrytable"
						}
					],
					"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tPARENT_CODE_TYPE_ID as double,\n\t\tPARENT_TARGET_CODE as string,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> vcrossreference\nvcrossreference filter(CODE_TYPE_ID==50) ~> country50\nvcrossreference filter(CODE_TYPE_ID==219) ~> area219\nvcrossreference filter(CODE_TYPE_ID==374) ~> regionA374\nvcrossreference filter(CODE_TYPE_ID==367) ~> region367\nvcrossreference filter(CODE_TYPE_ID==219) ~> region219\nxRefCountry50, xRefRegion219 join(country_parent_target_code == region_target_code\n\t&& country_parent_code_type_id == region_code_type_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> join1xRefCountryRegion\ncountry50 select(mapColumn(\n\t\tcountry_source_code_key = SOURCE_CODE_KEY,\n\t\tcountry_source_system = SOURCE_SYSTEM,\n\t\tcountry_target_code = TARGET_CODE,\n\t\tcountry_target_description = TARGET_DESCRIPTION,\n\t\tcountry_code_type = CODE_TYPE,\n\t\tcountry_code_type_id = CODE_TYPE_ID,\n\t\tcountry_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tcountry_parent_target_code = PARENT_TARGET_CODE,\n\t\tcountry_code2 = CODE2,\n\t\tcountry_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCountry50\nregion219 select(mapColumn(\n\t\tregion_source_code_key = SOURCE_CODE_KEY,\n\t\tregion_source_system = SOURCE_SYSTEM,\n\t\tregion_target_code = TARGET_CODE,\n\t\tregion_target_description = TARGET_DESCRIPTION,\n\t\tregion_code_type = CODE_TYPE,\n\t\tregion_code_type_id = CODE_TYPE_ID,\n\t\tregion_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tregion_parent_target_code = PARENT_TARGET_CODE,\n\t\tregion_code2 = CODE2,\n\t\tregion_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegion219\narea219 select(mapColumn(\n\t\tarea_source_code_key = SOURCE_CODE_KEY,\n\t\tarea_source_system = SOURCE_SYSTEM,\n\t\tarea_target_code = TARGET_CODE,\n\t\tarea_target_description = TARGET_DESCRIPTION,\n\t\tarea_code_type = CODE_TYPE,\n\t\tarea_code_type_id = CODE_TYPE_ID,\n\t\tarea_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tarea_parent_target_code = PARENT_TARGET_CODE,\n\t\tarea_code2 = CODE2,\n\t\tarea_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefArea219\njoin1xRefCountryRegion, xRefArea219 join(country_parent_target_code == area_target_code\n\t&& country_parent_code_type_id == area_code_type_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tcountry_target_code,\n\t\tcountry_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> area3\nxRefCountry50, xRefRegionA374 join(country_parent_code_type_id == region_A_code_type_id\n\t&& country_parent_target_code == region_A_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinxRefCountryRegionA\nregionA374 select(mapColumn(\n\t\tregion_A_source_code_key = SOURCE_CODE_KEY,\n\t\tregion_A_source_system = SOURCE_SYSTEM,\n\t\tregion_A_target_code = TARGET_CODE,\n\t\tregion_A_target_description = TARGET_DESCRIPTION,\n\t\tregion_A_code_type = CODE_TYPE,\n\t\tregion_A_code_type_id = CODE_TYPE_ID,\n\t\tregion_A_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tregion_A_parent_target_code = PARENT_TARGET_CODE,\n\t\tregion_A_code2 = CODE2,\n\t\tregion_A_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegionA374\nJoinxRefCountryRegionA, xRefRegion367 join(region_A_parent_code_type_id == region_code_type_id\n\t&& region_A_parent_target_code == region_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinxRefCountryRegionARegion\nregion367 select(mapColumn(\n\t\tregion_source_code_key = SOURCE_CODE_KEY,\n\t\tregion_source_system = SOURCE_SYSTEM,\n\t\tregion_target_code = TARGET_CODE,\n\t\tregion_target_description = TARGET_DESCRIPTION,\n\t\tregion_code_type = CODE_TYPE,\n\t\tregion_code_type_id = CODE_TYPE_ID,\n\t\tregion_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tregion_parent_target_code = PARENT_TARGET_CODE,\n\t\tregion_code2 = CODE2,\n\t\tregion_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegion367\nJoinxRefCountryRegionARegion, xRefArea219 join(region_parent_code_type_id == area_code_type_id\n\t&& region_parent_target_code == area_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join0\nJoin0 select(mapColumn(\n\t\tcountry_target_code,\n\t\tcountry_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> area2\nxRefCountry50, xRefRegion367 join(country_parent_code_type_id == region_code_type_id\n\t&& country_parent_target_code == region_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCountryRegion\nJoinCountryRegion, xRefArea219 join(region_parent_code_type_id == area_code_type_id\n\t&& region_parent_target_code == area_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinArea\nJoinArea select(mapColumn(\n\t\tcountry_target_code,\n\t\tcountry_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> area1\narea1, area2, area3 union(byName: true)~> setOperation\nsetOperation aggregate(groupBy(country_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description),\n\tcountry_target_code = first(country_target_code)) ~> deduplicator\ndeduplicator derive(ar2_target_code = case\n(\n    compare(area_target_code,'AME')==0, area_target_code, \n    (\n        case\n        (\n            compare(area_target_code,'ASI')==0, area_target_code, \n            (\n                case\n                    (\n                        compare(area_target_code,'EUR')==0, \n                        \n                            case\n                                (\n                                    compare(region_target_code,'SCA')==0, region_target_code, area_target_code \n                                ), \n                                case\n                                    (\n                                        compare(area_target_code,'RUS')==0, 'EUR', 'OTH'\n                                    ) \n                        \n                    )\n            )\n        )\n    )\n),\n\t\tar2_target_description = case\n(\n    compare(area_target_code,'AME')==0, area_target_description, \n    (\n        case\n        (\n            compare(area_target_code,'ASI')==0, area_target_description, \n            (\n                case\n                    (\n                        compare(area_target_code,'EUR')==0, \n                        \n                            case\n                                (\n                                    compare(region_target_code,'SCA')==0, region_target_description, area_target_description \n                                ), \n                                case\n                                    (\n                                        compare(area_target_code,'RUS')==0, 'Europe', 'Other'\n                                    ) \n                        \n                    )\n            )\n        )\n    )\n),\n\t\tlast_updated_by = 'm_pre_dim_country',\n\t\tcon_2ltr_code = '',\n\t\tcon_country_name = '',\n\t\tcon_oecd = '',\n\t\tcon_currency_code = '',\n\t\tcon_eu = '') ~> expression\npredimcountrytable alterRow(upsertIf(!isNull(pk_key))) ~> alterRow\nexpression select(mapColumn(\n\t\tpk_key = country_target_code,\n\t\treg_code = region_target_code,\n\t\treg_description = region_target_description,\n\t\tar1_code = area_target_code,\n\t\tar1_description = area_target_description,\n\t\tar2_code = ar2_target_code,\n\t\tar2_description = ar2_target_description,\n\t\tlast_updated_by,\n\t\tcon_2ltr_code,\n\t\tcon_country_name,\n\t\tcon_oecd,\n\t\tcon_currency_code,\n\t\tcon_eu\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> predimcountrytable\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_country.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimCountry"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_country')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_coverage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/pre_dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "TCrossReference"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "CoverageGroup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_coverage",
								"type": "DatasetReference"
							},
							"name": "preDimCoverageInsert"
						}
					],
					"transformations": [
						{
							"name": "FilterProdGroups",
							"description": "Filtering rows on 'CODE_TYPE_ID' =-3"
						},
						{
							"name": "filterCoverageCodes",
							"description": "Filtering rows on 'CODE_TYPE_ID' = 122 (Coverage code)"
						},
						{
							"name": "xRefCoverage",
							"description": "Removing unused columns"
						},
						{
							"name": "xRefprodGroups",
							"description": "Removing unused columns"
						},
						{
							"name": "CoverageCodeProdGroup"
						},
						{
							"name": "Deduplicate"
						},
						{
							"name": "DerviveProdGroupProdDesc",
							"description": "Creating prd product_group and pruduct_desc"
						},
						{
							"name": "LookupCoverageGroup"
						},
						{
							"name": "SelectOutputColumns"
						},
						{
							"name": "LastUpdatedBy",
							"description": "Creating constant 'lastUpdatedBy'"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> TCrossReference\nsource(output(\n\t\tcoverage_code as string,\n\t\tcoverage_desc as string,\n\t\tdate_inserted as timestamp,\n\t\tdate_updated as timestamp,\n\t\tenergy_exp_group_code as string,\n\t\tenergy_exp_group_desc as string,\n\t\texposure_group_code as string,\n\t\texposure_group_desc as string,\n\t\tgic_group_code as string,\n\t\tgic_group_desc as string,\n\t\tinserted_by as string,\n\t\tlayer_group_code as string,\n\t\tlayer_group_descr as string,\n\t\tpk_coverage_group as double,\n\t\tsort_order as double,\n\t\tupdated_by as string,\n\t\twar_indicator as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> CoverageGroup\nTCrossReference filter(CODE_TYPE_ID == -3) ~> FilterProdGroups\nTCrossReference filter(CODE_TYPE_ID == 122) ~> filterCoverageCodes\nfilterCoverageCodes select(mapColumn(\n\t\tcoverage_source_code = SOURCE_CODE_KEY,\n\t\tsource_system = SOURCE_SYSTEM,\n\t\tcoverage_target_code = TARGET_CODE,\n\t\tcoverage_target_desc = TARGET_DESCRIPTION,\n\t\tcode_type = CODE_TYPE,\n\t\tcode_type_id = CODE_TYPE_ID,\n\t\tcode2 = CODE2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCoverage\nFilterProdGroups select(mapColumn(\n\t\tcoverage_source_code = SOURCE_CODE_KEY,\n\t\tprd_group_target_code = TARGET_CODE,\n\t\tsource_system = SOURCE_SYSTEM,\n\t\tprd_group_target_desc = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefprodGroups\nxRefCoverage, xRefprodGroups join(xRefCoverage@coverage_source_code == xRefprodGroups@coverage_source_code\n\t&& xRefCoverage@source_system == xRefprodGroups@source_system,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> CoverageCodeProdGroup\nDerviveProdGroupProdDesc aggregate(groupBy(coverage_target_code,\n\t\tproduct_group,\n\t\tproduct_descr,\n\t\tcode2),\n\tcoverage_target_desc = first(coverage_target_desc)) ~> Deduplicate\nCoverageCodeProdGroup derive(product_group = coalesce(prd_group_target_code,'N/A'),\n\t\tproduct_descr = coalesce(prd_group_target_desc, 'Not Applicable')) ~> DerviveProdGroupProdDesc\nDeduplicate, CoverageGroup lookup(coverage_target_code == coverage_code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCoverageGroup\nLastUpdatedBy select(mapColumn(\n\t\tpk_key = coverage_target_code,\n\t\tcov_description = coverage_target_desc,\n\t\tcov_exposure_group_code = exposure_group_code,\n\t\tcov_exposure_group_desc = exposure_group_desc,\n\t\tgrp_key = product_group,\n\t\tgrp_description = product_descr,\n\t\tcov_energy_exp_group_code = energy_exp_group_code,\n\t\tcov_energy_exp_group_desc = energy_exp_group_desc,\n\t\tcov_layer_group_code = layer_group_code,\n\t\tcov_layer_group_descr = layer_group_descr,\n\t\tcov_gic_group_code = gic_group_code,\n\t\tcov_gic_group_desc = gic_group_desc,\n\t\tcov_3ltr_code = code2,\n\t\tlast_updated_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOutputColumns\nLookupCoverageGroup derive(last_updated_by = 'm_pre_dim_coverage') ~> LastUpdatedBy\nSelectOutputColumns alterRow(upsertIf(!isNull(pk_key))) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_coverage.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimCoverageInsert"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_coverage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_currency')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "HlpExchangeRateToUsd"
						},
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tCrossReference"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_currency",
								"type": "DatasetReference"
							},
							"name": "preDimCurrency"
						}
					],
					"transformations": [
						{
							"name": "FilterDates",
							"description": "Filtering rows on 'EXCHANGE_FROM_DATE' <= currentTimestamp"
						},
						{
							"name": "exchrateToUSD",
							"description": "Removing and renaming of columns"
						},
						{
							"name": "SelectExhangeRate",
							"description": "Removing unused columns"
						},
						{
							"name": "NewestExchangeDates",
							"description": "Get newest ExchangeFromDate for each currency"
						},
						{
							"name": "JoinNewestDateWithRate",
							"description": "Inner join to get newest exchange rate for each currency"
						},
						{
							"name": "LastKnownRate",
							"description": "Creating/updating columns"
						},
						{
							"name": "RemoveUnusedColumns"
						},
						{
							"name": "Deduplicate"
						},
						{
							"name": "RemoveExtraColumn",
							"description": "Remove duplicated column"
						},
						{
							"name": "Expression",
							"description": "Case currency from is USD, rate equals 1.\nAdd last_updated_by column"
						},
						{
							"name": "LookupAllCurrencies"
						},
						{
							"name": "SelectOutputColums",
							"description": "Selecting and renaming relevant columns"
						},
						{
							"name": "ReplaceNull",
							"description": "Replacing null values with N/A"
						},
						{
							"name": "AlterRow",
							"description": "Upsert if not null"
						},
						{
							"name": "xrefCurrency"
						}
					],
					"script": "source(output(\n\t\tFROM_CURRENCY_ID as double,\n\t\tTO_CURRENCY_ID as double,\n\t\tEXCHANGE_FROM_DATE as timestamp,\n\t\tEXCHANGE_RATE as decimal(38,18),\n\t\tEXCHANGE_TO_DATE as timestamp,\n\t\tFROM_CURRENCY_CODE as string,\n\t\tTO_CURRENCY_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> HlpExchangeRateToUsd\nsource(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tCrossReference\nexchrateToUSD filter(exchange_from_date <= currentTimestamp()) ~> FilterDates\nHlpExchangeRateToUsd select(mapColumn(\n\t\texchange_from_date = EXCHANGE_FROM_DATE,\n\t\texchange_rate = EXCHANGE_RATE,\n\t\tfrom_currency_code = FROM_CURRENCY_CODE,\n\t\tto_currency_code = TO_CURRENCY_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateToUSD\nexchrateToUSD select(mapColumn(\n\t\texchange_rate,\n\t\tfrom_currency_code,\n\t\texchange_from_date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectExhangeRate\nFilterDates aggregate(groupBy(from_currency_code),\n\tEXCHANGE_FROM_DATE = max(exchange_from_date)) ~> NewestExchangeDates\nNewestExchangeDates, SelectExhangeRate join(NewestExchangeDates@from_currency_code == SelectExhangeRate@from_currency_code\n\t&& NewestExchangeDates@EXCHANGE_FROM_DATE == SelectExhangeRate@exchange_from_date,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinNewestDateWithRate\nRemoveExtraColumn derive(exchange_rate = case(exchange_rate==0, toDecimal(null()),toDecimal(exchange_rate))) ~> LastKnownRate\nxrefCurrency select(mapColumn(\n\t\ttarget_code = TARGET_CODE,\n\t\ttarget_description = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveUnusedColumns\nRemoveUnusedColumns aggregate(groupBy(target_code),\n\ttarget_description = first(target_description)) ~> Deduplicate\nJoinNewestDateWithRate select(mapColumn(\n\t\tfrom_currency_code = NewestExchangeDates@from_currency_code,\n\t\texchange_rate,\n\t\tfrom_currency_code = SelectExhangeRate@from_currency_code,\n\t\texchange_from_date = SelectExhangeRate@exchange_from_date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveExtraColumn\nReplaceNull derive(curr_last_exchange_rate_to_usd = case(from_currency_code=='USD', toDecimal(1), exchange_rate),\n\t\tlast_updated_by = 'm_pre_dim_currency') ~> Expression\nDeduplicate, LastKnownRate lookup(target_code == from_currency_code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupAllCurrencies\nExpression select(mapColumn(\n\t\tpk_key = target_code,\n\t\tcur_description = target_description,\n\t\tcurr_last_exchange_rate_to_usd,\n\t\tlast_updated_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOutputColums\nLookupAllCurrencies derive(from_currency_code = case(isNull(from_currency_code),'N/A',from_currency_code)) ~> ReplaceNull\nSelectOutputColums alterRow(upsertIf(!isNull(pk_key))) ~> AlterRow\ntCrossReference filter(CODE_TYPE_ID == 124) ~> xrefCurrency\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_currency.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimCurrency"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_currency')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/pre_dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tcrossreference"
						},
						{
							"dataset": {
								"referenceName": "Agresso",
								"type": "DatasetReference"
							},
							"name": "udvAgressoEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_employee",
								"type": "DatasetReference"
							},
							"name": "preDimEmployee"
						}
					],
					"transformations": [
						{
							"name": "employee"
						},
						{
							"name": "deduplicator"
						},
						{
							"name": "xrefEmployee"
						},
						{
							"name": "empname"
						},
						{
							"name": "LkpUdvAgsEmployee"
						},
						{
							"name": "deduplicator0"
						},
						{
							"name": "alterRow"
						},
						{
							"name": "addLastupdatedby"
						},
						{
							"name": "predimemployeetable"
						},
						{
							"name": "emp1Pos1"
						}
					],
					"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcrossreference\nsource(output(\n\t\tEMPLOYEE_ID as string,\n\t\tCOMPANY as string,\n\t\tCOMPANY_NAME as string,\n\t\tMAIN_EMPLOYER as decimal(38,18),\n\t\tCONTRACT_TYPE as string,\n\t\tCONTRACT_DESCRIPTION as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tAD_NAME as string,\n\t\tJOBPHONE as string,\n\t\tSHORTPHONE as string,\n\t\tJOBMOBILE as string,\n\t\tEMAIL as string,\n\t\tCOSTCENTER as string,\n\t\tCOSTCENTER_DATE_FROM as timestamp,\n\t\tCOSTCENTER_DATE_TO as timestamp,\n\t\tCOSTCENTER_DESCRIPTION as string,\n\t\tCOSTCENTER_MANAGER as string,\n\t\tHR_MANAGER as string,\n\t\tLAST_UPDATE as timestamp,\n\t\tPOSITION as string,\n\t\tMAIN_POSITION as decimal(38,18),\n\t\tPOSITION_TITLE as string,\n\t\tPOSTIION_DATE_FROM as timestamp,\n\t\tPOSITION_DATE_TO as timestamp,\n\t\tSENIORITY as string,\n\t\tSENIORITY_TITLE as string,\n\t\tDISPLAY_NAME as string,\n\t\tOFFICE as string,\n\t\tSTATUS as string,\n\t\tSTATUS_DESCRIPTION as string,\n\t\tCONTRACT_DATE_FROM as timestamp,\n\t\tCONTRACT_DATE_TO as timestamp,\n\t\tSTATUS_DATE_FROM as timestamp,\n\t\tSTATUS_DATE_TO as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Agresso/s_udv_ags_employee.parquet']) ~> udvAgressoEmployee\ntcrossreference filter(CODE_TYPE_ID == 329) ~> employee\nxrefEmployee aggregate(groupBy(target_description_employee),\n\ttarget_code_employee = first(target_code_employee)) ~> deduplicator\nemployee select(mapColumn(\n\t\teach(match(name=='TARGET_CODE'||name=='TARGET_DESCRIPTION'),\n\t\t\tlower($$)+'_employee' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefEmployee\nLkpUdvAgsEmployee derive(emp_name = substring(target_description_employee, 1, 40)) ~> empname\ndeduplicator, emp1Pos1 lookup(target_code_employee == AD_NAME,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpUdvAgsEmployee\nempname aggregate(groupBy(EMPLOYEE_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tJOBMOBILE,\n\t\tEMAIL,\n\t\tOFFICE,\n\t\temp_name,\n\t\tJOBPHONE),\n\ttarget_code_employee = first(target_code_employee)) ~> deduplicator0\npredimemployeetable alterRow(upsertIf(!isNull(emp_source_key))) ~> alterRow\ndeduplicator0 derive(last_updated_by = 'pre_dim_employee',\n\t\tincident_team_code = '',\n\t\tincident_team_desc = '') ~> addLastupdatedby\naddLastupdatedby select(mapColumn(\n\t\temp_source_key = target_code_employee,\n\t\tagresso_emp_id = EMPLOYEE_ID,\n\t\temp_first_name = FIRST_NAME,\n\t\temp_last_name = LAST_NAME,\n\t\temp_job_mobile = JOBMOBILE,\n\t\temp_job_email = EMAIL,\n\t\tmain_gard_office_location = OFFICE,\n\t\temp_name,\n\t\tlast_updated_by,\n\t\tincident_team_code,\n\t\tincident_team_desc,\n\t\temp_job_phone = JOBPHONE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> predimemployeetable\nudvAgressoEmployee filter(MAIN_EMPLOYER == 1 && MAIN_POSITION == 1 && POSTIION_DATE_FROM <= fromUTC(currentTimestamp(), 'CET')) ~> emp1Pos1\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_employee.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/Agresso')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_guarantee_pa')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/paris"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "pea"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "lga"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_guarantee_pa",
								"type": "DatasetReference"
							},
							"name": "PreDimGuarantee"
						}
					],
					"transformations": [
						{
							"name": "PeaTable"
						},
						{
							"name": "LgaTable"
						},
						{
							"name": "PeaLga"
						},
						{
							"name": "expression"
						},
						{
							"name": "SelectedColumns"
						}
					],
					"script": "source(output(\n\t\tpeaaaddbo as decimal(38,18),\n\t\tpeaaccaddynsw as string,\n\t\tpeaaclmadv as decimal(38,18),\n\t\tpeaaclmbo as decimal(38,18),\n\t\tpeaaclobo as decimal(38,18),\n\t\tpeaacorbo as decimal(38,18),\n\t\tpeaaddbor as decimal(38,18),\n\t\tpeaaddmailfreq as decimal(38,18),\n\t\tpeaalternatepayer as decimal(38,18),\n\t\tpeaaprobo as decimal(38,18),\n\t\tpeabirtno as string,\n\t\tpeabirtws as decimal(38,18),\n\t\tpeacalamt as decimal(38,18),\n\t\tpeacalcurr as string,\n\t\tpeaccint as string,\n\t\tpeaccintr as decimal(38,18),\n\t\tpeacclamt as decimal(38,18),\n\t\tpeacclcurr as string,\n\t\tpeaccode as decimal(38,18),\n\t\tpeaclamailfreq as decimal(38,18),\n\t\tpeaclmadv as decimal(38,18),\n\t\tpeaclmbor as decimal(38,18),\n\t\tpeaclmintynsw as string,\n\t\tpeaclmmailfreq as decimal(38,18),\n\t\tpeaclobor as decimal(38,18),\n\t\tpeaclomet as decimal(38,18),\n\t\tpeaclosmailfreq as decimal(38,18),\n\t\tpeacolid as string,\n\t\tpeacomp2 as decimal(38,18),\n\t\tpeacorbo as decimal(38,18),\n\t\tpeacorrmailfreq as decimal(38,18),\n\t\tpeacrdate as timestamp,\n\t\tpeacrmid as decimal(38,18),\n\t\tpeacrsign as string,\n\t\tpeacruser as decimal(38,18),\n\t\tpeacustomerid as string,\n\t\tpeadueday as decimal(38,18),\n\t\tpeaendate as timestamp,\n\t\tpeaextid as string,\n\t\tpeaextid2 as string,\n\t\tpeaexttransfer as string,\n\t\tpeaexttransfer2 as string,\n\t\tpeafromcomp as decimal(38,18),\n\t\tpeaie2busndiv as decimal(38,18),\n\t\tpeaie2busnse as decimal(38,18),\n\t\tpeaie3busndiv as decimal(38,18),\n\t\tpeaie3busnse as decimal(38,18),\n\t\tpeaiebusndiv as decimal(38,18),\n\t\tpeaiebusnse as decimal(38,18),\n\t\tpeaiecon1 as decimal(38,18),\n\t\tpeaiecon2 as decimal(38,18),\n\t\tpeaiecon3 as decimal(38,18),\n\t\tpeaiecon4 as decimal(38,18),\n\t\tpeaiecon5 as decimal(38,18),\n\t\tpeaiecond as string,\n\t\tpeaiediv as string,\n\t\tpeaieint as string,\n\t\tpeaieint1 as string,\n\t\tpeaieint2 as string,\n\t\tpeaieint3 as string,\n\t\tpeaieint4 as string,\n\t\tpeaieint5 as string,\n\t\tpeaiesect as string,\n\t\tpeaincreday as decimal(38,18),\n\t\tpeaingiro as decimal(38,18),\n\t\tpeaingiroludate as timestamp,\n\t\tpeaingirolusign as string,\n\t\tpeaingirono as string,\n\t\tpeainvisible as string,\n\t\tpeaiselectronic as string,\n\t\tpeaiyear as decimal(38,18),\n\t\tpeaknvmark as string,\n\t\tpealang2 as string,\n\t\tpealeicode as string,\n\t\tpealudate as timestamp,\n\t\tpealusign as string,\n\t\tpealuuser as decimal(38,18),\n\t\tpeamailcndnsplit as string,\n\t\tpeamailsizemb as decimal(38,18),\n\t\tpeamailuseservadress as string,\n\t\tpeamasked as string,\n\t\tpeamaxper as decimal(38,18),\n\t\tpeamdescr as string,\n\t\tpeamexamt as decimal(38,18),\n\t\tpeamexcdate as timestamp,\n\t\tpeamexcurr as string,\n\t\tpeamexpro as decimal(38,18),\n\t\tpeanopdue as decimal(38,18),\n\t\tpeanopurr as string,\n\t\tpeanotaco as decimal(38,18),\n\t\tpeanotdays as decimal(38,18),\n\t\tpeanotlay as decimal(38,18),\n\t\tpeanotsort as decimal(38,18),\n\t\tpeaorgno as string,\n\t\tpeaorigmemberfrom as decimal(38,18),\n\t\tpeaoutcreday as decimal(38,18),\n\t\tpeaoutgiro as decimal(38,18),\n\t\tpeaoutgiroludate as timestamp,\n\t\tpeaoutgirolusign as string,\n\t\tpeaoutgirono as string,\n\t\tpeapeaid as decimal(38,18),\n\t\tpeapersid as string,\n\t\tpeapersrfl as decimal(38,18),\n\t\tpeapibregsign as string,\n\t\tpeaprobor as decimal(38,18),\n\t\tpeaprovmailfreq as decimal(38,18),\n\t\tpeapurtyp as decimal(38,18),\n\t\tpearesdat as timestamp,\n\t\tpeasex as string,\n\t\tpeastaamt as decimal(38,18),\n\t\tpeastaniv as decimal(38,18),\n\t\tpeastatyp as decimal(38,18),\n\t\tpeastdate as timestamp,\n\t\tpeastensw as decimal(38,18),\n\t\tpeastopcod as decimal(38,18),\n\t\tpeastoppremnote as string,\n\t\tpeastopuse as string,\n\t\tpeasttniv as decimal(38,18),\n\t\tpeasttprmclm as decimal(38,18),\n\t\tpeasubtype as decimal(38,18),\n\t\tpeasw10 as string,\n\t\tpeaswink as decimal(38,18),\n\t\tpeaswrun as decimal(38,18),\n\t\tpeausecolfee as string,\n\t\tpeavatno as string,\n\t\tpeavendorid as string,\n\t\tpeaxlcurr as string,\n\t\tpeaxlpoin as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> pea\nsource(output(\n\t\tlgacandate as timestamp,\n\t\tlgaclmcat as string,\n\t\tlgaclmtype as string,\n\t\tlgacrcode as string,\n\t\tlgacrcrdate as timestamp,\n\t\tlgacrcrsign as string,\n\t\tlgacrdate as timestamp,\n\t\tlgacrlgaid as string,\n\t\tlgacrsign as string,\n\t\tlgacrynsw as string,\n\t\tlgaendate as timestamp,\n\t\tlgaguaamt as decimal(38,18),\n\t\tlgaguacurr as string,\n\t\tlgaintnote as string,\n\t\tlgaintynsw as string,\n\t\tlgajurisdiction as string,\n\t\tlgaknvmark as string,\n\t\tlgalcaid as string,\n\t\tlgalccid as string,\n\t\tlgalgaid as string,\n\t\tlgaln2 as decimal(38,18),\n\t\tlgaludate as timestamp,\n\t\tlgalusign as string,\n\t\tlgaobocname as string,\n\t\tlgaobopeaid as decimal(38,18),\n\t\tlgareceiver as decimal(38,18),\n\t\tlgastatus as string,\n\t\tlgastdate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lga\npea select(mapColumn(\n\t\tpeapeaid,\n\t\tpeamdescr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PeaTable\nlga select(mapColumn(\n\t\tlgalcaid,\n\t\tlgalgaid,\n\t\tlgacrcode,\n\t\tlgastdate,\n\t\tlgaendate,\n\t\tlgaintnote,\n\t\tlgacrcrdate,\n\t\tlgareceiver,\n\t\tlgastatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LgaTable\nPeaTable, LgaTable join(peapeaid == lgareceiver,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> PeaLga\nPeaLga derive(Gut_Key = concat('P', lgalgaid),\n\t\tGut_Type_Description = case (lgacrcode == 'C','Provided Guarantee',\r\n       case(lgacrcode == 'R','Received Guarantee','Received Counter Guarantee'\r\n           )\r\n     ),\n\t\tGut_Guarantee_Status = case (lgastatus == 'A','Open',\r\n       case(lgastatus == 'R','Closed','Closed'\r\n           )\r\n     ),\n\t\tGut_Inc_Key = concat('P', lgalcaid),\n\t\tGut_open_ind = case (lgastatus == 'A','Y',\r\n       case(lgastatus == 'R','N','N'\r\n           )\r\n     ),\n\t\tGut_Guarantee_type_Code = lgacrcode) ~> expression\nexpression select(mapColumn(\n\t\tGut_Date_Given = lgastdate,\n\t\tGut_Guarantee_Issued_To = peamdescr,\n\t\tGut_Guarantee_Remarks = lgaintnote,\n\t\tGut_Date_Expiry = lgaendate,\n\t\tGut_Date_Created = lgacrcrdate,\n\t\teach(match(left(name,3)=='Gut'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumns\nSelectedColumns sink(input(\n\t\tagt_description as string,\n\t\tagt_key as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_guarantee_pa.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimGuarantee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Paris')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_guarantee_pa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_partner_me')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/paris"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "paa"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "pea"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "peb"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "pez"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "qtbtable"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "crctable"
						},
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "tcrossreference"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "pectable"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "cbsttable"
						},
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "cbstable2"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "SfCompany"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_partner",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "maxpeb"
						},
						{
							"name": "pebmaxpeb"
						},
						{
							"name": "pebdunco"
						},
						{
							"name": "Prtstatusjoin"
						},
						{
							"name": "peatable"
						},
						{
							"name": "Prtstatus"
						},
						{
							"name": "prtpea"
						},
						{
							"name": "crcselected"
						},
						{
							"name": "peacrc"
						},
						{
							"name": "paatable"
						},
						{
							"name": "Paafiltered"
						},
						{
							"name": "crcpaa"
						},
						{
							"name": "peztable"
						},
						{
							"name": "paapez"
						},
						{
							"name": "lookupState"
						},
						{
							"name": "pebtable"
						},
						{
							"name": "Expression1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "lookupCapital"
						},
						{
							"name": "Select2"
						},
						{
							"name": "lookupCompSubtype"
						},
						{
							"name": "Select3"
						},
						{
							"name": "lookupCountry"
						},
						{
							"name": "Select4"
						},
						{
							"name": "lookupContractType"
						},
						{
							"name": "Select5"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Lookup2"
						},
						{
							"name": "partner"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "constantBroker"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "constantcontract"
						},
						{
							"name": "Union1"
						},
						{
							"name": "deduplicate"
						},
						{
							"name": "state"
						},
						{
							"name": "capital"
						},
						{
							"name": "country"
						},
						{
							"name": "Select8"
						},
						{
							"name": "selectedcolumns"
						},
						{
							"name": "compsubtype"
						}
					],
					"script": "source(output(\n\t\tpaabusncla as decimal(38,18),\n\t\tpaabusnsec as decimal(38,18),\n\t\tpaacaddrcountry as string,\n\t\tpaacaddress1 as string,\n\t\tpaacaddress2 as string,\n\t\tpaacaddress3 as string,\n\t\tpaacaddress4 as string,\n\t\tpaacaddress5 as string,\n\t\tpaacaddrpostal as string,\n\t\tpaaccmail as string,\n\t\tpaacfax as string,\n\t\tpaacname as string,\n\t\tpaacname2 as string,\n\t\tpaacontcname as string,\n\t\tpaacontcphone as string,\n\t\tpaacontemail as string,\n\t\tpaacontmobcphone as string,\n\t\tpaacontpeaid as decimal(38,18),\n\t\tpaacphone as string,\n\t\tpaactelex as string,\n\t\tpaafunct as decimal(38,18),\n\t\tpaaintnet as string,\n\t\tpaaintnote as string,\n\t\tpaalcname as string,\n\t\tpaalongname as string,\n\t\tpaamail as string,\n\t\tpaapeaid as decimal(38,18),\n\t\tpaarevcname as string,\n\t\tpaascname as string,\n\t\tpaaspbusndiv as decimal(38,18),\n\t\tpaawww as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> paa\nsource(output(\n\t\tpeaaaddbo as decimal(38,18),\n\t\tpeaaccaddynsw as string,\n\t\tpeaaclmadv as decimal(38,18),\n\t\tpeaaclmbo as decimal(38,18),\n\t\tpeaaclobo as decimal(38,18),\n\t\tpeaacorbo as decimal(38,18),\n\t\tpeaaddbor as decimal(38,18),\n\t\tpeaaddmailfreq as decimal(38,18),\n\t\tpeaalternatepayer as decimal(38,18),\n\t\tpeaaprobo as decimal(38,18),\n\t\tpeabirtno as string,\n\t\tpeabirtws as decimal(38,18),\n\t\tpeacalamt as decimal(38,18),\n\t\tpeacalcurr as string,\n\t\tpeaccint as string,\n\t\tpeaccintr as decimal(38,18),\n\t\tpeacclamt as decimal(38,18),\n\t\tpeacclcurr as string,\n\t\tpeaccode as decimal(38,18),\n\t\tpeaclamailfreq as decimal(38,18),\n\t\tpeaclmadv as decimal(38,18),\n\t\tpeaclmbor as decimal(38,18),\n\t\tpeaclmintynsw as string,\n\t\tpeaclmmailfreq as decimal(38,18),\n\t\tpeaclobor as decimal(38,18),\n\t\tpeaclomet as decimal(38,18),\n\t\tpeaclosmailfreq as decimal(38,18),\n\t\tpeacolid as string,\n\t\tpeacomp2 as decimal(38,18),\n\t\tpeacorbo as decimal(38,18),\n\t\tpeacorrmailfreq as decimal(38,18),\n\t\tpeacrdate as timestamp,\n\t\tpeacrmid as decimal(38,18),\n\t\tpeacrsign as string,\n\t\tpeacruser as decimal(38,18),\n\t\tpeacustomerid as string,\n\t\tpeadueday as decimal(38,18),\n\t\tpeaendate as timestamp,\n\t\tpeaextid as string,\n\t\tpeaextid2 as string,\n\t\tpeaexttransfer as string,\n\t\tpeaexttransfer2 as string,\n\t\tpeafromcomp as decimal(38,18),\n\t\tpeaie2busndiv as decimal(38,18),\n\t\tpeaie2busnse as decimal(38,18),\n\t\tpeaie3busndiv as decimal(38,18),\n\t\tpeaie3busnse as decimal(38,18),\n\t\tpeaiebusndiv as decimal(38,18),\n\t\tpeaiebusnse as decimal(38,18),\n\t\tpeaiecon1 as decimal(38,18),\n\t\tpeaiecon2 as decimal(38,18),\n\t\tpeaiecon3 as decimal(38,18),\n\t\tpeaiecon4 as decimal(38,18),\n\t\tpeaiecon5 as decimal(38,18),\n\t\tpeaiecond as string,\n\t\tpeaiediv as string,\n\t\tpeaieint as string,\n\t\tpeaieint1 as string,\n\t\tpeaieint2 as string,\n\t\tpeaieint3 as string,\n\t\tpeaieint4 as string,\n\t\tpeaieint5 as string,\n\t\tpeaiesect as string,\n\t\tpeaincreday as decimal(38,18),\n\t\tpeaingiro as decimal(38,18),\n\t\tpeaingiroludate as timestamp,\n\t\tpeaingirolusign as string,\n\t\tpeaingirono as string,\n\t\tpeainvisible as string,\n\t\tpeaiselectronic as string,\n\t\tpeaiyear as decimal(38,18),\n\t\tpeaknvmark as string,\n\t\tpealang2 as string,\n\t\tpealeicode as string,\n\t\tpealudate as timestamp,\n\t\tpealusign as string,\n\t\tpealuuser as decimal(38,18),\n\t\tpeamailcndnsplit as string,\n\t\tpeamailsizemb as decimal(38,18),\n\t\tpeamailuseservadress as string,\n\t\tpeamasked as string,\n\t\tpeamaxper as decimal(38,18),\n\t\tpeamdescr as string,\n\t\tpeamexamt as decimal(38,18),\n\t\tpeamexcdate as timestamp,\n\t\tpeamexcurr as string,\n\t\tpeamexpro as decimal(38,18),\n\t\tpeanopdue as decimal(38,18),\n\t\tpeanopurr as string,\n\t\tpeanotaco as decimal(38,18),\n\t\tpeanotdays as decimal(38,18),\n\t\tpeanotlay as decimal(38,18),\n\t\tpeanotsort as decimal(38,18),\n\t\tpeaorgno as string,\n\t\tpeaorigmemberfrom as decimal(38,18),\n\t\tpeaoutcreday as decimal(38,18),\n\t\tpeaoutgiro as decimal(38,18),\n\t\tpeaoutgiroludate as timestamp,\n\t\tpeaoutgirolusign as string,\n\t\tpeaoutgirono as string,\n\t\tpeapeaid as decimal(38,18),\n\t\tpeapersid as string,\n\t\tpeapersrfl as decimal(38,18),\n\t\tpeapibregsign as string,\n\t\tpeaprobor as decimal(38,18),\n\t\tpeaprovmailfreq as decimal(38,18),\n\t\tpeapurtyp as decimal(38,18),\n\t\tpearesdat as timestamp,\n\t\tpeasex as string,\n\t\tpeastaamt as decimal(38,18),\n\t\tpeastaniv as decimal(38,18),\n\t\tpeastatyp as decimal(38,18),\n\t\tpeastdate as timestamp,\n\t\tpeastensw as decimal(38,18),\n\t\tpeastopcod as decimal(38,18),\n\t\tpeastoppremnote as string,\n\t\tpeastopuse as string,\n\t\tpeasttniv as decimal(38,18),\n\t\tpeasttprmclm as decimal(38,18),\n\t\tpeasubtype as decimal(38,18),\n\t\tpeasw10 as string,\n\t\tpeaswink as decimal(38,18),\n\t\tpeaswrun as decimal(38,18),\n\t\tpeausecolfee as string,\n\t\tpeavatno as string,\n\t\tpeavendorid as string,\n\t\tpeaxlcurr as string,\n\t\tpeaxlpoin as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> pea\nsource(output(\n\t\tpebbrdate as timestamp,\n\t\tpebcivilstatus as decimal(38,18),\n\t\tpebconbusncla as decimal(38,18),\n\t\tpebconbusndiv as decimal(38,18),\n\t\tpebconbusnsec as decimal(38,18),\n\t\tpebconcomp2 as decimal(38,18),\n\t\tpebconoffice as decimal(38,18),\n\t\tpebdistrict as string,\n\t\tpebdunco as decimal(38,18),\n\t\tpebemlcurr as string,\n\t\tpebemlmdescr as string,\n\t\tpebetcbroker as string,\n\t\tpebfortsector as decimal(38,18),\n\t\tpebforttrade as string,\n\t\tpebgeneml as decimal(38,18),\n\t\tpebgroup as decimal(38,18),\n\t\tpebhourprice as decimal(38,18),\n\t\tpebinstadynz as string,\n\t\tpebisolan as string,\n\t\tpebkycapprdate as timestamp,\n\t\tpebkycapproved as string,\n\t\tpebkyccompany as decimal(38,18),\n\t\tpebkyccompdescr as string,\n\t\tpebkycid as string,\n\t\tpebludate as timestamp,\n\t\tpeblusign as string,\n\t\tpebmacheml as decimal(38,18),\n\t\tpebmansanctdescr as string,\n\t\tpebmansanction as string,\n\t\tpebmdescr as string,\n\t\tpebmvaynsw as string,\n\t\tpebnmisic as string,\n\t\tpebnmnyk as string,\n\t\tpeboffsanctdescr as string,\n\t\tpeboffsanction as string,\n\t\tpebonrisk as string,\n\t\tpebonriskdate as timestamp,\n\t\tpebpaylevel as decimal(38,18),\n\t\tpebpeaid as decimal(38,18),\n\t\tpebpebid as string,\n\t\tpebpeoid as string,\n\t\tpebpeoopeaid as decimal(38,18),\n\t\tpebpersacc as decimal(38,18),\n\t\tpebpever as decimal(38,18),\n\t\tpebpibregdate as timestamp,\n\t\tpebpibregsign as string,\n\t\tpebpidcname as string,\n\t\tpebpidid as decimal(38,18),\n\t\tpebpricecurr as string,\n\t\tpebqadate as timestamp,\n\t\tpebqasign as string,\n\t\tpebqastatus as string,\n\t\tpebratcod as string,\n\t\tpebratcomp as decimal(38,18),\n\t\tpebratedate as timestamp,\n\t\tpebratludate as timestamp,\n\t\tpebratsign as string,\n\t\tpebreason as string,\n\t\tpebressign as string,\n\t\tpebsitid as string,\n\t\tpebsupporter as string,\n\t\tpebtaxno as string,\n\t\tpebtypelevel as decimal(38,18),\n\t\tpebusstate as string,\n\t\tpebvaldate as timestamp,\n\t\tpebverstat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> peb\nsource(output(\n\t\tpezdefaccrebynsw as string,\n\t\tpezdefagtnol as decimal(38,18),\n\t\tpezdefbusnbranch as decimal(38,18),\n\t\tpezdefbusncla as decimal(38,18),\n\t\tpezdefbusndiv as decimal(38,18),\n\t\tpezdefbusnsec as decimal(38,18),\n\t\tpezdefccpid as string,\n\t\tpezdefcomcod as string,\n\t\tpezdefcurr as string,\n\t\tpezdefinstcalctype as decimal(38,18),\n\t\tpezdefmortg as decimal(38,18),\n\t\tpezdefncomm as decimal(38,18),\n\t\tpezdefoffice as decimal(38,18),\n\t\tpezdeftarcodof as string,\n\t\tpezpezid as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> pez\nsource(output(\n\t\tqtbdispynsw as string,\n\t\tqtbfieldn as string,\n\t\tqtbmdescr as string,\n\t\tqtbsdescr as string,\n\t\tqtbvalue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> qtbtable\nsource(output(\n\t\tcrcccode as decimal(38,18),\n\t\tcrccpers2 as decimal(38,18),\n\t\tcrccpers3 as decimal(38,18),\n\t\tcrccpers4 as decimal(38,18),\n\t\tcrclospro as decimal(38,18),\n\t\tcrcmdescr as string,\n\t\tcrcperinc as string,\n\t\tcrcratcod as string,\n\t\tcrcratcomp as decimal(38,18),\n\t\tcrcsdescr as string,\n\t\tcrcstopuse as string,\n\t\tcrcsw5 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> crctable\nsource(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcrossreference\nsource(output(\n\t\tpeccofobl as string,\n\t\tpeccofopt as decimal(38,18),\n\t\tpecconpeaid as decimal(38,18),\n\t\tpeccontyp as string,\n\t\tpecdepint as decimal(38,18),\n\t\tpecdepity as string,\n\t\tpecduedate as timestamp,\n\t\tpecextkey as string,\n\t\tpecibnrpr as decimal(38,18),\n\t\tpeciyear as decimal(38,18),\n\t\tpecmanfee as decimal(38,18),\n\t\tpecnoofyr as decimal(38,18),\n\t\tpecnoufyr as decimal(38,18),\n\t\tpecpcaid as string,\n\t\tpecpecid as decimal(38,18),\n\t\tpecprocom as decimal(38,18),\n\t\tpecprosw1 as string,\n\t\tpecprosw2 as string,\n\t\tpecsw5 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> pectable\nsource(output(\n\t\tcbsaddper as decimal(38,18),\n\t\tcbsagform as string,\n\t\tcbsaowreb as decimal(38,18),\n\t\tcbsautocl as decimal(38,18),\n\t\tcbsbusnbranch as decimal(38,18),\n\t\tcbsbusnsec as decimal(38,18),\n\t\tcbscnform as string,\n\t\tcbscrewform as string,\n\t\tcbsdefcondco as decimal(38,18),\n\t\tcbsdefpayer as string,\n\t\tcbsdnform as string,\n\t\tcbsetcpremium as string,\n\t\tcbslang2 as string,\n\t\tcbsmdescr as string,\n\t\tcbsmutual as string,\n\t\tcbspitype as string,\n\t\tcbsrefcod as string,\n\t\tcbsrenew as decimal(38,18),\n\t\tcbsrenewendrule as decimal(38,18),\n\t\tcbsrenewperiod as decimal(38,18),\n\t\tcbssdescr as string,\n\t\tcbssiidef as string,\n\t\tcbsstopuse as string,\n\t\tcbssw10 as string,\n\t\tcbstarynsw as string,\n\t\tcbstaxappl as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> cbsttable\nsource(output(\n\t\tcbsaddper as decimal(38,18),\n\t\tcbsagform as string,\n\t\tcbsaowreb as decimal(38,18),\n\t\tcbsautocl as decimal(38,18),\n\t\tcbsbusnbranch as decimal(38,18),\n\t\tcbsbusnsec as decimal(38,18),\n\t\tcbscnform as string,\n\t\tcbscrewform as string,\n\t\tcbsdefcondco as decimal(38,18),\n\t\tcbsdefpayer as string,\n\t\tcbsdnform as string,\n\t\tcbsetcpremium as string,\n\t\tcbslang2 as string,\n\t\tcbsmdescr as string,\n\t\tcbsmutual as string,\n\t\tcbspitype as string,\n\t\tcbsrefcod as string,\n\t\tcbsrenew as decimal(38,18),\n\t\tcbsrenewendrule as decimal(38,18),\n\t\tcbsrenewperiod as decimal(38,18),\n\t\tcbssdescr as string,\n\t\tcbssiidef as string,\n\t\tcbsstopuse as string,\n\t\tcbssw10 as string,\n\t\tcbstarynsw as string,\n\t\tcbstaxappl as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> cbstable2\nsource(output(\n\t\taccount_resp_me as string,\n\t\taccount_resp_pi as string,\n\t\taccount_status as string,\n\t\tclient_lost_reason as string,\n\t\tcompany_email as string,\n\t\tcompany_id as double,\n\t\tcompany_name as string,\n\t\tcompany_owner_full_name as string,\n\t\tcompany_owner_id as string,\n\t\tcountry as string,\n\t\tcuo_full_name as string,\n\t\tcuo_user_id as string,\n\t\tdate_inserted as timestamp,\n\t\tdate_updated as timestamp,\n\t\tgard_contact_id as string,\n\t\tmarket_area_code as string,\n\t\tmarket_area_description as string,\n\t\tmarket_area_id as string,\n\t\tparent_company_id as double,\n\t\tparent_company_name as string,\n\t\tparis_gic_id as double,\n\t\tprimary_contact_email as string,\n\t\tprimary_contact_name as string,\n\t\tsf_last_updated_date as timestamp,\n\t\tsource_system as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> SfCompany\npeb aggregate(groupBy(pebpeaid),\n\tMAXPEBPEVER = max(pebpever)) ~> maxpeb\npebtable, maxpeb join(pebtable@pebpeaid == maxpeb@pebpeaid\n\t&& pebpever == MAXPEBPEVER,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> pebmaxpeb\nqtbtable filter(qtbfieldn=='pebdunco') ~> pebdunco\npebmaxpeb, pebdunco join(pebdunco == toInteger(qtbvalue),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Prtstatusjoin\npea select(mapColumn(\n\t\tpeapeaid,\n\t\tpeamdescr,\n\t\tpeaccode,\n\t\tpealeicode,\n\t\tpeasubtype,\n\t\tpeaextid2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> peatable\nPrtstatusjoin select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid = pebtable@pebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tPebpever = pebpever,\n\t\tpebdunco,\n\t\tpebpeaid = maxpeb@pebpeaid,\n\t\tMAXPEBPEVER,\n\t\tQTBFIELDN = qtbfieldn,\n\t\tQTBVALUE = qtbvalue,\n\t\tQTBMDESCR = qtbmdescr,\n\t\tQTBSDESCR = qtbsdescr,\n\t\tQTBDISPYNSW = qtbdispynsw\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Prtstatus\nPrtstatus, peatable join(pebpeaid == peapeaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> prtpea\ncrctable select(mapColumn(\n\t\tcrcratcod,\n\t\tcrcmdescr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> crcselected\nprtpea, crcselected join(pebratcod == crcratcod,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> peacrc\npaa select(mapColumn(\n\t\tpaapeaid,\n\t\tpaafunct,\n\t\tpaalongname,\n\t\tpaacaddress1,\n\t\tpaacaddress4,\n\t\tpaacaddress2,\n\t\tpaacname,\n\t\tpaacaddress3,\n\t\tpaactelex\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> paatable\npaatable filter(iifNull(paafunct,0) ==0) ~> Paafiltered\npeacrc, Paafiltered join(peapeaid == paapeaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> crcpaa\npez select(mapColumn(\n\t\tpezpezid,\n\t\tpezdefbusnbranch\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> peztable\ncrcpaa, peztable join(peapeaid == pezpezid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> paapez\nExpression1, state lookup(pebtaxno == SOURCE_CODE_KEY,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupState\npeb select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tpebpever,\n\t\tpebdunco\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> pebtable\npaapez derive(Key = concat('P',toString(peapeaid)),\n\t\t{Partner Name} = iifNull(trim(paalongname),iifNull(trim(paacname, peamdescr))),\n\t\tAddress = concat(trim(paacaddress1),iif(isNull((concat(trim(paacaddress2),concat(trim(paacaddress3), trim(paacaddress4))))),' ',paacaddress2)),\n\t\t{Rating Code} = case(isNull(pebratcod),'N/A',pebratcod),\n\t\t{Rating Code desc} = case(isNull(crcmdescr),'N/A',crcmdescr),\n\t\t{Partner Short Name} = peamdescr,\n\t\tPezdefbusnbranch = toString(pezdefbusnbranch),\n\t\tpeasubtype = toString(peasubtype),\n\t\t{Source System} = 'PARIS',\n\t\t{Code Type State} = 368,\n\t\t{Code Type Capital} = 116,\n\t\t{Code Type Comp Sub} = 795,\n\t\t{Code Type Country} = 50) ~> Expression1\nlookupState select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tPebpever,\n\t\tpebdunco,\n\t\tMAXPEBPEVER,\n\t\tQTBFIELDN,\n\t\tQTBVALUE,\n\t\tQTBMDESCR,\n\t\tQTBSDESCR,\n\t\tQTBDISPYNSW,\n\t\tpeapeaid,\n\t\tpeamdescr,\n\t\tpeaccode,\n\t\tpealeicode,\n\t\tpeasubtype,\n\t\tpeaextid2,\n\t\tcrcratcod,\n\t\tcrcmdescr,\n\t\tpaapeaid,\n\t\tpaafunct,\n\t\tpaalongname,\n\t\tpaacaddress1,\n\t\tpaacaddress4,\n\t\tpaacaddress2,\n\t\tpaacname,\n\t\tpaacaddress3,\n\t\tpaactelex,\n\t\tpezpezid,\n\t\tKey,\n\t\t{Partner Name},\n\t\tAddress,\n\t\t{Rating Code},\n\t\t{Rating Code desc},\n\t\t{Partner Short Name},\n\t\tPezdefbusnbranch = Expression1@Pezdefbusnbranch,\n\t\t{Source System},\n\t\t{Code Type State},\n\t\t{Code Type Capital},\n\t\t{Code Type Comp Sub},\n\t\t{Code Type Country},\n\t\tSOURCE_CODE_KEY,\n\t\tSOURCE_SYSTEM,\n\t\t{State Code} = TARGET_CODE,\n\t\t{State Description} = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, capital lookup(Pezdefbusnbranch == tcrossreference@SOURCE_CODE_KEY,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupCapital\nlookupCapital select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tPebpever,\n\t\tpebdunco,\n\t\tMAXPEBPEVER,\n\t\tQTBFIELDN,\n\t\tQTBVALUE,\n\t\tQTBMDESCR,\n\t\tQTBSDESCR,\n\t\tQTBDISPYNSW,\n\t\tpeapeaid,\n\t\tpeamdescr,\n\t\tpeaccode,\n\t\tpealeicode,\n\t\tpeasubtype,\n\t\tpeaextid2,\n\t\tcrcratcod,\n\t\tcrcmdescr,\n\t\tpaapeaid,\n\t\tpaafunct,\n\t\tpaalongname,\n\t\tpaacaddress1,\n\t\tpaacaddress4,\n\t\tpaacaddress2,\n\t\tpaacname,\n\t\tpaacaddress3,\n\t\tpaactelex,\n\t\tpezpezid,\n\t\tKey,\n\t\t{Partner Name},\n\t\tAddress,\n\t\t{Rating Code},\n\t\t{Rating Code desc},\n\t\t{Partner Short Name},\n\t\tPezdefbusnbranch,\n\t\t{Source System},\n\t\t{Code Type State},\n\t\t{Code Type Capital},\n\t\t{Code Type Comp Sub},\n\t\t{Code Type Country},\n\t\t{State Code},\n\t\t{State Description},\n\t\t{Capital Code} = TARGET_CODE,\n\t\t{Capital Description} = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2, compsubtype lookup(peasubtype == SOURCE_CODE_KEY,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupCompSubtype\nlookupCompSubtype select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tPebpever,\n\t\tpebdunco,\n\t\tMAXPEBPEVER,\n\t\tQTBFIELDN,\n\t\tQTBVALUE,\n\t\tQTBMDESCR,\n\t\tQTBSDESCR,\n\t\tQTBDISPYNSW,\n\t\tpeapeaid,\n\t\tpeamdescr,\n\t\tpeaccode,\n\t\tpealeicode,\n\t\tpeasubtype,\n\t\tpeaextid2,\n\t\tcrcratcod,\n\t\tcrcmdescr,\n\t\tpaapeaid,\n\t\tpaafunct,\n\t\tpaalongname,\n\t\tpaacaddress1,\n\t\tpaacaddress4,\n\t\tpaacaddress2,\n\t\tpaacname,\n\t\tpaacaddress3,\n\t\tpaactelex,\n\t\tpezpezid,\n\t\tKey,\n\t\t{Partner Name},\n\t\tAddress,\n\t\t{Rating Code},\n\t\t{Rating Code desc},\n\t\t{Partner Short Name},\n\t\tPezdefbusnbranch,\n\t\t{Source System},\n\t\t{Code Type State},\n\t\t{Code Type Capital},\n\t\t{Code Type Comp Sub},\n\t\t{Code Type Country},\n\t\t{State Code},\n\t\t{State Description},\n\t\t{Capital Code},\n\t\t{Capital Description},\n\t\t{Company Sub Code} = TARGET_CODE,\n\t\t{Company Sub Description} = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3, country lookup(pebisolan == SOURCE_CODE_KEY,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupCountry\nlookupCountry select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tPebpever,\n\t\tpebdunco,\n\t\tMAXPEBPEVER,\n\t\tQTBFIELDN,\n\t\tQTBVALUE,\n\t\tQTBMDESCR,\n\t\tQTBSDESCR,\n\t\tQTBDISPYNSW,\n\t\tpeapeaid,\n\t\tpeamdescr,\n\t\tpeaccode,\n\t\tpealeicode,\n\t\tpeasubtype,\n\t\tpeaextid2,\n\t\tcrcratcod,\n\t\tcrcmdescr,\n\t\tpaapeaid,\n\t\tpaafunct,\n\t\tpaalongname,\n\t\tpaacaddress1,\n\t\tpaacaddress4,\n\t\tpaacaddress2,\n\t\tpaacname,\n\t\tpaacaddress3,\n\t\tpaactelex,\n\t\tpezpezid,\n\t\tKey,\n\t\t{Partner Name},\n\t\tAddress,\n\t\t{Rating Code},\n\t\t{Rating Code desc},\n\t\t{Partner Short Name},\n\t\tPezdefbusnbranch,\n\t\t{Source System},\n\t\t{Code Type State},\n\t\t{Code Type Capital},\n\t\t{Code Type Comp Sub},\n\t\t{Code Type Country},\n\t\t{State Code},\n\t\t{State Description},\n\t\t{Capital Code},\n\t\t{Capital Description},\n\t\t{Domicile Code} = TARGET_CODE,\n\t\t{Domicile Description} = TARGET_DESCRIPTION,\n\t\t{Company Sub Code},\n\t\t{Company Sub Description}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4, pectable lookup(peapeaid == pecpecid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupContractType\nlookupContractType select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tPebpever,\n\t\tpebdunco,\n\t\tMAXPEBPEVER,\n\t\tQTBFIELDN,\n\t\tQTBVALUE,\n\t\tQTBMDESCR,\n\t\tQTBSDESCR,\n\t\tQTBDISPYNSW,\n\t\tpeapeaid,\n\t\tpeamdescr,\n\t\tpeaccode,\n\t\tpealeicode,\n\t\tpeasubtype,\n\t\tpeaextid2,\n\t\tcrcratcod,\n\t\tcrcmdescr,\n\t\tpaapeaid,\n\t\tpaafunct,\n\t\tpaalongname,\n\t\tpaacaddress1,\n\t\tpaacaddress4,\n\t\tpaacaddress2,\n\t\tpaacname,\n\t\tpaacaddress3,\n\t\tpaactelex,\n\t\tpezpezid,\n\t\tKey,\n\t\t{Partner Name},\n\t\tAddress,\n\t\t{Rating Code},\n\t\t{Rating Code desc},\n\t\t{Partner Short Name},\n\t\tPezdefbusnbranch,\n\t\t{Source System},\n\t\t{Code Type State},\n\t\t{Code Type Capital},\n\t\t{Code Type Comp Sub},\n\t\t{Code Type Country},\n\t\t{State Code},\n\t\t{State Description},\n\t\t{Capital Code},\n\t\t{Capital Description},\n\t\t{Domicile Code},\n\t\t{Domicile Description},\n\t\tpeccontype = peccontyp,\n\t\t{Company Sub Code},\n\t\t{Company Sub Description}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5 derive({Contract Type} = case(peccontype == '0' , 'NORMAL',case(peccontype == '1','WAR',case(peccontype == '9','XL','OTHER')))) ~> DerivedColumn1\nDerivedColumn1, paa lookup(pebratcomp == paa@paapeaid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup2\nLookup2 select(mapColumn(\n\t\tkey = Key,\n\t\t{Partner Name},\n\t\tAddress,\n\t\tpebdunco,\n\t\tQtbmdescr = QTBMDESCR,\n\t\tAddress1 = Select5@paacaddress1,\n\t\tAddress2 = Select5@paacaddress2,\n\t\tAddress3 = Select5@paacaddress3,\n\t\tAddress4 = Select5@paacaddress4,\n\t\tpaacaddress3 = Select5@paacaddress3,\n\t\t{Rating Company} = paa@paacname,\n\t\tPebratcod = pebratcod,\n\t\t{Rating Code desc},\n\t\tPebratedate = pebratedate,\n\t\t{Domicile Code},\n\t\t{Domicile Description},\n\t\tPeaccode = peaccode,\n\t\t{Capital Code},\n\t\t{Capital Description},\n\t\t{Company Sub code} = {Company Sub Code},\n\t\t{Company Sub Description},\n\t\tState = {State Description},\n\t\t{Paacname RatingComp} = paa@paacname,\n\t\tPeaextid2 = peaextid2,\n\t\t{Contract Type}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> partner\ncbsttable derive(Key = 'PDIR99',\n\t\t{Partner Name} = 'Direct Placed',\n\t\tAddress = 'Not Applicable',\n\t\tpebdunco = toDecimal(null()),\n\t\tDuncodesc = 'Not Applicable',\n\t\tAddress1 = 'Not Applicable',\n\t\tAddress2 = 'Not Applicable',\n\t\tAddress3 = 'Not Applicable',\n\t\tAddress4 = 'Not Applicable',\n\t\t{Rating Company} = 'Not Applicable',\n\t\t{Rating Code} = 'N/A',\n\t\t{Rating Code Description} = 'Not Applicable',\n\t\t{Rating Date} = toTimestamp(case(1!=1,1)),\n\t\t{Domicile Code} = 'N/A',\n\t\t{Domicile Description} = 'Not Applicable',\n\t\tPeacode = toDecimal(null()),\n\t\t{Capital Code} = toString(null()),\n\t\t{Capital Description} = toString(null()),\n\t\t{Company Sub code} = toString(null()),\n\t\t{Company Sub Desc} = toString(null()),\n\t\tState = 'N/A',\n\t\tPeaextid2 = toString(null()),\n\t\t{Contract Type} = toString(null())) ~> DerivedColumn3\nDerivedColumn3 select(mapColumn(\n\t\tkey = Key,\n\t\t{Partner Name},\n\t\tAddress,\n\t\tpebdunco,\n\t\tQtbmdescr = Duncodesc,\n\t\tAddress1,\n\t\tAddress2,\n\t\tAddress3,\n\t\tAddress4,\n\t\t{Rating Company},\n\t\tPebratcod = {Rating Code},\n\t\t{Rating Code desc} = {Rating Code Description},\n\t\tPebratedate = {Rating Date},\n\t\t{Domicile Code},\n\t\t{Domicile Description},\n\t\tPeaccode = Peacode,\n\t\t{Capital Code},\n\t\t{Capital Description},\n\t\t{Company Sub code},\n\t\t{Company Sub Description} = {Company Sub Desc},\n\t\tState,\n\t\tPeaextid2,\n\t\t{Contract Type}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> constantBroker\ncbstable2 derive({Partner Name} = 'Facultativ',\n\t\t{Pk Key} = 'PFACULTATIV',\n\t\tAddress = 'Not Applicable',\n\t\tAddress1 = 'Not Applicable',\n\t\tAddress2 = 'Not Applicable',\n\t\tAddress3 = 'Not Applicable',\n\t\tAddress4 = 'Not Applicable',\n\t\t{Rating Company} = 'Not Applicable',\n\t\t{Rating Code} = 'N/A',\n\t\t{Rating Code desc} = 'Not Applicable',\n\t\t{Domicile Description} = 'Not Applicable',\n\t\tPebratedate = toTimestamp(case(1!=1,1)),\n\t\tCity = 'N/A',\n\t\tState = 'N/A',\n\t\tPebdunco = toDecimal(null()),\n\t\tDuncodesc = 'Not Applicable',\n\t\t{Pea Lei Code} = toString(null()),\n\t\tPeaccode = toDecimal(null()),\n\t\t{Contract Type} = 'OTHER') ~> DerivedColumn4\nDerivedColumn4 select(mapColumn(\n\t\tkey = {Pk Key},\n\t\t{Partner Name},\n\t\tAddress,\n\t\tpebdunco = Pebdunco,\n\t\tQtbmdescr = Duncodesc,\n\t\tAddress1,\n\t\tAddress2,\n\t\tAddress3,\n\t\tAddress4,\n\t\t{Rating Company},\n\t\tPebratcod = {Rating Company},\n\t\t{Rating Code desc},\n\t\tPebratedate,\n\t\t{Domicile Code} = City,\n\t\t{Domicile Description},\n\t\tPeaccode,\n\t\t{Capital Code} = {Pea Lei Code},\n\t\t{Capital Description} = {Pea Lei Code},\n\t\t{Company Sub code} = {Pea Lei Code},\n\t\t{Company Sub Description} = {Pea Lei Code},\n\t\tState,\n\t\t{Contract Type},\n\t\tPeaextid2 = {Pea Lei Code}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> constantcontract\npartner, constantBroker, constantcontract union(byName: true)~> Union1\nUnion1 aggregate(groupBy(Key = key),\n\teach(match(name!='key'), $$ = first($$))) ~> deduplicate\ntcrossreference filter(CODE_TYPE_ID == 368 && SOURCE_SYSTEM == 'PARIS') ~> state\ntcrossreference filter(CODE_TYPE_ID == 116 && SOURCE_SYSTEM == 'PARIS') ~> capital\ntcrossreference filter(CODE_TYPE_ID == 50 && SOURCE_SYSTEM == 'PARIS') ~> country\nSfCompany select(mapColumn(\n\t\taccount_resp_me,\n\t\taccount_resp_pi,\n\t\taccount_status,\n\t\tclient_lost_reason,\n\t\tcompany_email,\n\t\tcompany_id,\n\t\tcompany_name,\n\t\tcompany_owner_full_name,\n\t\tcompany_owner_id,\n\t\tcountry,\n\t\tcuo_full_name,\n\t\tcuo_user_id,\n\t\tdate_inserted,\n\t\tdate_updated,\n\t\tgard_contact_id,\n\t\tmarket_area_code,\n\t\tmarket_area_description,\n\t\tmarket_area_id,\n\t\tparent_company_id,\n\t\tparent_company_name,\n\t\tparis_gic_id,\n\t\tprimary_contact_email,\n\t\tprimary_contact_name,\n\t\tsf_last_updated_date,\n\t\tsource_system\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\ndeduplicate select(mapColumn(\n\t\tKey,\n\t\tPartner_Name = {Partner Name},\n\t\tAddress,\n\t\tpebdunco,\n\t\tQtbmdescr,\n\t\tAddress1,\n\t\tAddress2,\n\t\tAddress3,\n\t\tAddress4,\n\t\tRating_Company = {Rating Company},\n\t\tPebratcod,\n\t\tRating_Code_desc = {Rating Code desc},\n\t\tPebratedate,\n\t\tDomicile_Code = {Domicile Code},\n\t\tDomicile_Description = {Domicile Description},\n\t\tPeaccode,\n\t\tCapital_Code = {Capital Code},\n\t\tCapital_Description = {Capital Description},\n\t\tCompany_Sub_code = {Company Sub code},\n\t\tCompany_Sub_Description = {Company Sub Description},\n\t\tState,\n\t\tPeaextid = Peaextid2,\n\t\tContract_Type = {Contract Type}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectedcolumns\ntcrossreference filter(CODE_TYPE_ID == 795 && SOURCE_SYSTEM == 'PARIS') ~> compsubtype\nselectedcolumns sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Paris')]",
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_partner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_premium_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/paris"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Other",
								"type": "DatasetReference"
							},
							"name": "TCrossref"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_premium_type",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CodeTypePremiumType"
						},
						{
							"name": "Deduplicator"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> TCrossref\nTCrossref filter(CODE_TYPE_ID == 802) ~> CodeTypePremiumType\nCodeTypePremiumType aggregate(groupBy(TARGET_CODE,\n\t\tTARGET_DESCRIPTION),\n\tCODE_TYPE = max(CODE_TYPE_ID)) ~> Deduplicator\nDeduplicator derive(Map_date = toDate(case(1!=1,1)),\n\t\tPk_key_pty = TARGET_CODE,\n\t\tPty_code = TARGET_CODE,\n\t\tPty_Description = TARGET_DESCRIPTION,\n\t\tInserted_By = 'M_PRE_DIM_PREMIUM_TYPE',\n\t\tDate_Inserted = currentDate(),\n\t\tLast_Updated_By = 'M_PRE_DIM_PREMIUM_TYPE',\n\t\tDate_Last_Updated = currentDate(),\n\t\tPty_Source_Column = 'TARGET_CODE',\n\t\tPty_Source_system = 'MAPPINGSYSTEM') ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\tMap_date,\n\t\tPk_key_pty,\n\t\tPty_code,\n\t\tPty_Description,\n\t\tInserted_By,\n\t\tDate_Inserted,\n\t\tLast_Updated_By,\n\t\tDate_Last_Updated,\n\t\tPty_Source_Column,\n\t\tPty_Source_system\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Other')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_premium_type')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_premium_type_me')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/paris"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Paris",
								"type": "DatasetReference"
							},
							"name": "ipa"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_premium_type",
								"type": "DatasetReference"
							},
							"name": "predimpremtype"
						}
					],
					"transformations": [
						{
							"name": "ipatcode"
						},
						{
							"name": "ipatable"
						}
					],
					"script": "source(output(\n\t\tipaabatementpercentage as decimal(38,18),\n\t\tipaaccrebamtp as decimal(38,18),\n\t\tipaaccrebbase as decimal(38,18),\n\t\tipaaccrebp as decimal(38,18),\n\t\tipaaccrebsh as decimal(38,18),\n\t\tipaadarea as string,\n\t\tipaadcom as decimal(38,18),\n\t\tipaadcomc as decimal(38,18),\n\t\tipaaddst as decimal(38,18),\n\t\tipaadicomamtp as decimal(38,18),\n\t\tipaadicombase as decimal(38,18),\n\t\tipaadicomp as decimal(38,18),\n\t\tipaadmfee as decimal(38,18),\n\t\tipaadocomamtp as decimal(38,18),\n\t\tipaadocombase as decimal(38,18),\n\t\tipaadocomp as decimal(38,18),\n\t\tipaagaid as string,\n\t\tipaagbaseamtp as decimal(38,18),\n\t\tipaagtynsw as string,\n\t\tipaapprovestatus as string,\n\t\tipaassetsubno as decimal(38,18),\n\t\tipabonusamt as decimal(38,18),\n\t\tipabonusndisc as decimal(38,18),\n\t\tipaccqid as string,\n\t\tipaclodate as timestamp,\n\t\tipaclstat as decimal(38,18),\n\t\tipacosig1 as string,\n\t\tipacosig2 as string,\n\t\tipacrdate as timestamp,\n\t\tipacrsign as string,\n\t\tipacurr as string,\n\t\tipadwbsname as string,\n\t\tipaeingrpre as decimal(38,18),\n\t\tipaendate as timestamp,\n\t\tipaenhour as decimal(38,18),\n\t\tipaeoutpre as decimal(38,18),\n\t\tipagnsw as decimal(38,18),\n\t\tipagrossamtp as decimal(38,18),\n\t\tipagrossprem as decimal(38,18),\n\t\tipaicaid as string,\n\t\tipaienteredprem as decimal(38,18),\n\t\tipainaid as string,\n\t\tipaindate as timestamp,\n\t\tipainstad as decimal(38,18),\n\t\tipainstcalctype as decimal(38,18),\n\t\tipainstpertype as decimal(38,18),\n\t\tipaipaid as string,\n\t\tipairatecrew as decimal(38,18),\n\t\tipaiusdgt as decimal(38,18),\n\t\tipaknvmark as string,\n\t\tipalastinstamtp as decimal(38,18),\n\t\tipalastinstperc as decimal(38,18),\n\t\tipalisig1 as string,\n\t\tipalisig2 as string,\n\t\tipaludate as timestamp,\n\t\tipalusign as string,\n\t\tipamaninsynsw as string,\n\t\tipamarketripercentage as decimal(38,18),\n\t\tipaminprem as decimal(38,18),\n\t\tipaminrate as decimal(38,18),\n\t\tipanatpre as decimal(38,18),\n\t\tipanetamtp as decimal(38,18),\n\t\tipanetprem as decimal(38,18),\n\t\tipanote as string,\n\t\tipanoterm as decimal(38,18),\n\t\tipaobno as decimal(38,18),\n\t\tipaorate as decimal(38,18),\n\t\tipaotherexpences as decimal(38,18),\n\t\tipaousdgt as decimal(38,18),\n\t\tipapcdtxt as string,\n\t\tipapcod2 as string,\n\t\tipapcode as string,\n\t\tipapdays as decimal(38,18),\n\t\tipapocid as string,\n\t\tipapocprtln3 as decimal(38,18),\n\t\tipapolnn19 as string,\n\t\tipapoolpercentage as decimal(38,18),\n\t\tipapremn3 as decimal(38,18),\n\t\tipapremri as string,\n\t\tipaprfcomamtp as decimal(38,18),\n\t\tipaprfcombase as decimal(38,18),\n\t\tipaprfcomp as decimal(38,18),\n\t\tipaprocomamtp as decimal(38,18),\n\t\tipaprocombase as decimal(38,18),\n\t\tipaprocomp as decimal(38,18),\n\t\tiparate as decimal(38,18),\n\t\tiparatype as string,\n\t\tiparelcallamtp as decimal(38,18),\n\t\tiparelcallperc as decimal(38,18),\n\t\tipareopenipaid as string,\n\t\tiparesig1 as decimal(38,18),\n\t\tiparesig2 as decimal(38,18),\n\t\tiparetndisc as decimal(38,18),\n\t\tiparetynsw as string,\n\t\tiparicalcdate as timestamp,\n\t\tiparipercentage as decimal(38,18),\n\t\tiparistor as decimal(38,18),\n\t\tiparoundrule as string,\n\t\tipasecrebamtp as decimal(38,18),\n\t\tipasecrebbase as decimal(38,18),\n\t\tipasecrebp as decimal(38,18),\n\t\tipaslipsw as string,\n\t\tipastdate as timestamp,\n\t\tipasthour as decimal(38,18),\n\t\tipatarifamt as decimal(38,18),\n\t\tipatarifndisc as decimal(38,18),\n\t\tipataxamt as decimal(38,18),\n\t\tipataxgnsw as decimal(38,18),\n\t\tipatxcom as decimal(38,18),\n\t\tipatxcomc as decimal(38,18),\n\t\tipavalueicaid as string,\n\t\tipavalueipaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> ipa\nipa select(mapColumn(\n\t\tipaipaid,\n\t\tipapcode,\n\t\tipapcod2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ipatcode\nipatcode derive(Pty_Code = iif( upper(trim(ipapcod2)) == 'XB','SMD',\r\n    iif(upper(trim(ipapcod2)) == 'XP','AJD',\r\n         iif(upper(trim(ipapcod2)) == 'XR','SRE',\r\n             iif(upper(trim(ipapcod2)) == 'XM','SMD',\r\n             iif(upper(trim(ipapcod2)) == 'XX','SMD',\r\n             iif(upper(trim(ipapcode)) == 'A','GAD',\r\n             iif(upper(trim(ipapcod2)) == 'C','CAN',\r\n             iif(upper(trim(ipapcod2)) == 'F','OTH',\r\n             iif(upper(trim(ipapcod2)) == 'G','GER',\r\n             iif(upper(trim(ipapcod2)) == 'L','LAY',\r\n             iif(upper(trim(ipapcod2)) == 'O','ORG',\r\n             iif(upper(trim(ipapcod2)) == 'P','PRO',\r\n             iif(upper(trim(ipapcod2)) == 'Q','OTH',\r\n             iif(upper(trim(ipapcod2)) == 'R','RVA',\r\n             iif(upper(trim(ipapcod2)) == 'S','SAL',\r\n             iif(upper(trim(ipapcod2)) == 'T','TRI',\r\n             iif(upper(trim(ipapcod2)) == 'X','OTH',\r\n                'N/A'\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                )\r\n            )\r\n        )\r\n     ),\n\t\tPty_Description = iif( upper(trim(ipapcod2)) == 'XB','Minimum & Deposit',\r\n    iif(upper(trim(ipapcod2)) == 'XP','Adjustment Premium',\r\n         iif(upper(trim(ipapcod2)) == 'XR','Reinstatement Premium',\r\n         iif(upper(trim(ipapcod2)) == 'XM','Minimum & Deposit',\r\n         iif(upper(trim(ipapcod2)) == 'XX','Minimum & Deposit',\r\n         iif(upper(trim(ipapcode)) == 'A','General Add',\r\n         iif(upper(trim(ipapcod2)) == 'C','Cancel',\r\n         iif(upper(trim(ipapcod2)) == 'F','Other',\r\n         iif(upper(trim(ipapcod2)) == 'G','General Return',\r\n         iif(upper(trim(ipapcod2)) == 'L','Layup',\r\n         iif(upper(trim(ipapcod2)) == 'O','Original',\r\n         iif(upper(trim(ipapcod2)) == 'P','Prolongation',\r\n         iif(upper(trim(ipapcod2)) == 'Q','Other',\r\n         iif(upper(trim(ipapcod2)) == 'R','Return Value',\r\n         iif(upper(trim(ipapcod2)) == 'S','Sale/Stop',\r\n         iif(upper(trim(ipapcod2)) == 'T','Trip',\r\n         iif(upper(trim(ipapcod2)) == 'X','Other',\r\n                'Not Applicable'\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                    )\r\n                )\r\n            )\r\n        )\r\n     ),\n\t\tPty_Source_code = case(in(['XB','XP','XR','XM','XX'],trim(upper(ipapcod2))),ipapcod2,ipapcode),\n\t\tSource_column = case(in(['XB','XP','XR','XM','XX'],trim(upper(ipapcod2))),'ipapcod2','ipapcode'),\n\t\tSource_System = 'PARIS',\n\t\tDate_inserted = currentDate(),\n\t\tDate_Last_Updated = currentDate(),\n\t\tInserted_By = 'M_PRE_DIM_PREMIUM_TYPE_ME',\n\t\tLast_Updated_by = 'M_PRE_DIM_PREMIUM_TYPE_ME',\n\t\tMap_date = toDate(case(1!=1,1))) ~> ipatable\nipatable sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_premium_type.parquet'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> predimpremtype"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Paris')]",
				"[concat(variables('factoryId'), '/datasets/dim_premium_type')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_source_system')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "StaSourceSystem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_source_system",
								"type": "DatasetReference"
							},
							"name": "preDimSourceSystem"
						}
					],
					"transformations": [
						{
							"name": "RemoveUnusedColumns"
						},
						{
							"name": "NotApplicable"
						},
						{
							"name": "NotApplicableRow"
						},
						{
							"name": "UnionWithNotApplicable"
						},
						{
							"name": "LastUpdatedBy"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "source(output(\n\t\tactive as string,\n\t\tdescription as string,\n\t\tinserted_by as string,\n\t\tinserted_date as timestamp,\n\t\tpk_source_system as string,\n\t\tupdated_by as string,\n\t\tupdated_date as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> StaSourceSystem\nStaSourceSystem select(mapColumn(\n\t\tactive,\n\t\tdescription,\n\t\tpk_source_system\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveUnusedColumns\nRemoveUnusedColumns derive(pk_source_system = 'N/A',\n\t\tdescription = 'Not Applicable') ~> NotApplicable\nNotApplicable aggregate(groupBy(pk_source_system),\n\tdescription = first(description)) ~> NotApplicableRow\nRemoveUnusedColumns, NotApplicableRow union(byName: true)~> UnionWithNotApplicable\nUnionWithNotApplicable derive(last_updated_by = 'm_pre_dim_source_system') ~> LastUpdatedBy\nLastUpdatedBy alterRow(upsertIf(!isNull(pk_source_system))) ~> AlterRow\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_source_system.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimSourceSystem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_source_system')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_pre_dim_vessel_type_group')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_prepare/paris"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "StaVesselTypeGroup"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "StaRiskDriverGroup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pre_dim_vessel_type_group",
								"type": "DatasetReference"
							},
							"name": "PreDimVesselTypeGroup"
						}
					],
					"transformations": [
						{
							"name": "RiskD1"
						},
						{
							"name": "VesslTypeGroup"
						},
						{
							"name": "RiskD6"
						},
						{
							"name": "RiskGroup1"
						},
						{
							"name": "RiskD2"
						},
						{
							"name": "RiskD3"
						},
						{
							"name": "RiskD4"
						},
						{
							"name": "RiskD5"
						},
						{
							"name": "RiskIV"
						},
						{
							"name": "RiskLOH"
						},
						{
							"name": "RiskSize"
						},
						{
							"name": "RiskLvl4"
						},
						{
							"name": "RiskLvl3"
						},
						{
							"name": "RiskGrdGrp"
						},
						{
							"name": "Select1"
						},
						{
							"name": "RiskGroup2"
						},
						{
							"name": "Select2"
						},
						{
							"name": "RiskGroup3"
						},
						{
							"name": "Select3"
						},
						{
							"name": "RiskGroup4"
						},
						{
							"name": "Select4"
						},
						{
							"name": "RiskGroup5"
						},
						{
							"name": "Select5"
						},
						{
							"name": "RiskGroupIV"
						},
						{
							"name": "Select6"
						},
						{
							"name": "RiskGroupLOH"
						},
						{
							"name": "Select7"
						},
						{
							"name": "RisGroupSize"
						},
						{
							"name": "Select8"
						},
						{
							"name": "RiskGroupLvl3"
						},
						{
							"name": "Select9"
						},
						{
							"name": "RiskGroupLvl4"
						},
						{
							"name": "Select10"
						},
						{
							"name": "RiskGardGp"
						},
						{
							"name": "Select11"
						},
						{
							"name": "RiskGroupD6"
						},
						{
							"name": "RelevantColumns"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tfk_gard_group as double,\n\t\tfk_rsk_driver_grp_1 as double,\n\t\tfk_rsk_driver_grp_2 as double,\n\t\tfk_rsk_driver_grp_3 as double,\n\t\tfk_rsk_driver_grp_4 as double,\n\t\tfk_rsk_driver_grp_5 as double,\n\t\tfk_rsk_driver_grp_6 as double,\n\t\tfk_rsk_driver_iv as double,\n\t\tfk_rsk_driver_loh as double,\n\t\tfk_rsk_driver_lvl3 as double,\n\t\tfk_rsk_driver_lvl4 as double,\n\t\tfk_rsk_driver_size as double,\n\t\tfk_rsk_grp_cargo as double,\n\t\tfk_rsk_grp_crew as double,\n\t\tfk_rsk_grp_hull as double,\n\t\tfk_rsk_grp_machinery as double,\n\t\tfk_rsk_grp_main as double,\n\t\tfk_rsk_grp_passenger as double,\n\t\tfk_rsk_grp_pollution as double,\n\t\tfk_rsk_grp_ri as double,\n\t\tfk_rsk_grp_size as double,\n\t\tfp_3_ltr_code as string,\n\t\tfp_level_5_code as string,\n\t\tfp_level_5_decode as string,\n\t\tfp_level_5_desc as string,\n\t\tfp_level_5_hull as double,\n\t\tfp_level_5_sub as string,\n\t\tinsert_date as timestamp,\n\t\tpk_vessel_type_group as double,\n\t\tupdate_date as timestamp,\n\t\tvsl_cefor_group as string,\n\t\tvsl_desc as string,\n\t\tvsl_gard_group as string,\n\t\tvsl_marine_group as string,\n\t\tvsl_risk_group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> StaVesselTypeGroup\nsource(output(\n\t\tgroup_code as string,\n\t\tgroup_code_alternative as string,\n\t\tgroup_desc as string,\n\t\tgroup_desc_sort as string,\n\t\tgroup_name as string,\n\t\tpk_risk_driver_group as double,\n\t\ttable_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> StaRiskDriverGroup\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code1 = group_code,\n\t\tgroup_desc1 = group_desc,\n\t\tgroup_desc_sort1 = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskD1\nStaVesselTypeGroup select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> VesslTypeGroup\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code_D6 = group_code,\n\t\tgroup_code_alternative_D6 = group_code_alternative,\n\t\tgroup_desc_D6 = group_desc,\n\t\tgroup_desc_sort_D6 = group_desc_sort,\n\t\tgroup_name_D6 = group_name,\n\t\tpk_risk_driver_group_D6 = pk_risk_driver_group,\n\t\ttable_name_D6 = table_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskD6\nVesslTypeGroup, RiskD1 join(fk_rsk_driver_grp_1 == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroup1\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code2 = group_code,\n\t\tgroup_desc2 = group_desc,\n\t\tgroup_desc_sort2 = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskD2\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code3 = group_code,\n\t\tgroup_desc3 = group_desc,\n\t\tgroup_desc_sort3 = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskD3\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code4 = group_code,\n\t\tgroup_desc4 = group_desc,\n\t\tgroup_desc_sort4 = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskD4\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code5 = group_code,\n\t\tgroup_desc5 = group_desc,\n\t\tgroup_desc_sort5 = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskD5\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code_IV = group_code,\n\t\tgroup_desc_IV = group_desc,\n\t\tgroup_desc_sort_IV = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskIV\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code_LOH = group_code,\n\t\tgroup_desc_LOH = group_desc,\n\t\tgroup_desc_sort_LOH = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskLOH\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code_Size = group_code,\n\t\tgroup_desc_Size = group_desc,\n\t\tgroup_desc_sort_Size = group_desc_sort,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskSize\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code_Lvl4 = group_code,\n\t\tgroup_code_alternative_Lvl4 = group_code_alternative,\n\t\tgroup_desc_Lvl4 = group_desc,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskLvl4\nStaRiskDriverGroup select(mapColumn(\n\t\tfp_Lvl3_code = group_code,\n\t\tgroup_code_alternative_Lvl3 = group_code_alternative,\n\t\tfp_Lvl3_decode = group_desc,\n\t\tpk_risk_driver_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskLvl3\nStaRiskDriverGroup select(mapColumn(\n\t\tgroup_code_Ggp = group_code,\n\t\tgroup_code_alternative_Ggp = group_code_alternative,\n\t\tgroup_desc_Ggp = group_desc,\n\t\tgroup_desc_sort_Ggp = group_desc_sort,\n\t\tgroup_name_Ggp = group_name,\n\t\tpk_risk_driver_group,\n\t\ttable_name_Ggp = table_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RiskGrdGrp\nRiskGroup1 select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, RiskD2 join(fk_rsk_driver_grp_2 == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroup2\nRiskGroup2 select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2, RiskD3 join(fk_rsk_driver_grp_3 == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroup3\nRiskGroup3 select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3, RiskD4 join(fk_rsk_driver_grp_4 == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroup4\nRiskGroup4 select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4, RiskD5 join(fk_rsk_driver_grp_5 == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroup5\nRiskGroup5 select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4,\n\t\tgroup_code5,\n\t\tgroup_desc5,\n\t\tgroup_desc_sort5\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5, RiskIV join(fk_rsk_driver_iv == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroupIV\nRiskGroupIV select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4,\n\t\tgroup_code5,\n\t\tgroup_desc5,\n\t\tgroup_desc_sort5,\n\t\tgroup_code_IV,\n\t\tgroup_desc_IV,\n\t\tgroup_desc_sort_IV\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nSelect6, RiskLOH join(fk_rsk_driver_loh == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroupLOH\nRiskGroupLOH select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4,\n\t\tgroup_code5,\n\t\tgroup_desc5,\n\t\tgroup_desc_sort5,\n\t\tgroup_code_IV,\n\t\tgroup_desc_IV,\n\t\tgroup_desc_sort_IV,\n\t\tgroup_code_LOH,\n\t\tgroup_desc_LOH,\n\t\tgroup_desc_sort_LOH\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nSelect7, RiskSize join(fk_rsk_driver_size == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RisGroupSize\nRisGroupSize select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4,\n\t\tgroup_code5,\n\t\tgroup_desc5,\n\t\tgroup_desc_sort5,\n\t\tgroup_code_IV,\n\t\tgroup_desc_IV,\n\t\tgroup_desc_sort_IV,\n\t\tgroup_code_LOH,\n\t\tgroup_desc_LOH,\n\t\tgroup_desc_sort_LOH,\n\t\tgroup_code_Size,\n\t\tgroup_desc_Size\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select8\nSelect8, RiskLvl4 join(fk_rsk_driver_lvl4 == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroupLvl3\nRiskGroupLvl3 select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4,\n\t\tgroup_code5,\n\t\tgroup_desc5,\n\t\tgroup_desc_sort5,\n\t\tgroup_code_IV,\n\t\tgroup_desc_IV,\n\t\tgroup_desc_sort_IV,\n\t\tgroup_code_LOH,\n\t\tgroup_desc_LOH,\n\t\tgroup_desc_sort_LOH,\n\t\tgroup_code_Size,\n\t\tgroup_desc_Size,\n\t\tgroup_Lvl4_code = group_code_Lvl4,\n\t\tFp_Lvl4_Group = group_code_alternative_Lvl4,\n\t\tgroup_Lvl4_decode = group_desc_Lvl4\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select9\nSelect9, RiskLvl3 join(fk_rsk_driver_lvl3 == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroupLvl4\nRiskGroupLvl4 select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4,\n\t\tgroup_code5,\n\t\tgroup_desc5,\n\t\tgroup_desc_sort5,\n\t\tgroup_code_IV,\n\t\tgroup_desc_IV,\n\t\tgroup_desc_sort_IV,\n\t\tgroup_code_LOH,\n\t\tgroup_desc_LOH,\n\t\tgroup_desc_sort_LOH,\n\t\tgroup_code_Size,\n\t\tgroup_desc_Size,\n\t\tgroup_Lvl4_code,\n\t\tFp_Lvl4_Group,\n\t\tgroup_Lvl4_decode,\n\t\tgroup_Lvl3_decode = fp_Lvl3_code,\n\t\tFp_Lvl3_Group = group_code_alternative_Lvl3,\n\t\tgroup_desc_Lvl3 = fp_Lvl3_decode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select10\nSelect10, RiskGrdGrp join(fk_gard_group == pk_risk_driver_group,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGardGp\nRiskGardGp select(mapColumn(\n\t\tfk_gard_group,\n\t\tfk_rsk_driver_grp_1,\n\t\tfk_rsk_driver_grp_2,\n\t\tfk_rsk_driver_grp_3,\n\t\tfk_rsk_driver_grp_4,\n\t\tfk_rsk_driver_grp_5,\n\t\tfk_rsk_driver_grp_6,\n\t\tfk_rsk_driver_iv,\n\t\tfk_rsk_driver_loh,\n\t\tfk_rsk_driver_lvl3,\n\t\tfk_rsk_driver_lvl4,\n\t\tfk_rsk_driver_size,\n\t\tfk_rsk_grp_cargo,\n\t\tfk_rsk_grp_crew,\n\t\tfk_rsk_grp_hull,\n\t\tfk_rsk_grp_machinery,\n\t\tfk_rsk_grp_main,\n\t\tfk_rsk_grp_passenger,\n\t\tfk_rsk_grp_pollution,\n\t\tfk_rsk_grp_ri,\n\t\tfk_rsk_grp_size,\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tgroup_code1,\n\t\tgroup_desc1,\n\t\tgroup_desc_sort1,\n\t\tgroup_code2,\n\t\tgroup_desc2,\n\t\tgroup_desc_sort2,\n\t\tgroup_code3,\n\t\tgroup_desc3,\n\t\tgroup_desc_sort3,\n\t\tgroup_code4,\n\t\tgroup_desc4,\n\t\tgroup_desc_sort4,\n\t\tgroup_code5,\n\t\tgroup_desc5,\n\t\tgroup_desc_sort5,\n\t\tgroup_code_IV,\n\t\tgroup_desc_IV,\n\t\tgroup_desc_sort_IV,\n\t\tgroup_code_LOH,\n\t\tgroup_desc_LOH,\n\t\tgroup_desc_sort_LOH,\n\t\tgroup_code_Size,\n\t\tgroup_desc_Size,\n\t\tgroup_Lvl4_code,\n\t\tFp_Lvl4_Group,\n\t\tgroup_Lvl4_decode,\n\t\tgroup_Lvl3_decode,\n\t\tFp_Lvl3_Group,\n\t\tgroup_desc_Lvl3,\n\t\tVessel_Gard_Group = group_desc_Ggp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select11\nSelect11, RiskD6 join(fk_rsk_driver_grp_6 == pk_risk_driver_group_D6,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RiskGroupD6\nDerivedColumn1 select(mapColumn(\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tinsert_date,\n\t\tpk_vessel_type_group,\n\t\tupdate_date,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tvsl_group1 = group_code1,\n\t\tvsl_group1_desc = group_desc1,\n\t\tvsl_group1_sort = group_desc_sort1,\n\t\tvsl_group2 = group_code2,\n\t\tvsl_group2_desc = group_desc2,\n\t\tvsl_group2_sort = group_desc_sort2,\n\t\tvsl_group3 = group_code3,\n\t\tvsl_group3_desc = group_desc3,\n\t\tvsl_group3_sort = group_desc_sort3,\n\t\tvsl_group4 = group_code4,\n\t\tvsl_group4_desc = group_desc4,\n\t\tvsl_group4_sort = group_desc_sort4,\n\t\tvsl_group5 = group_code5,\n\t\tvsl_group5_desc = group_desc5,\n\t\tvsl_group5_sort = group_desc_sort5,\n\t\tvsl_groupIV = group_code_IV,\n\t\tvsl_groupIV_desc = group_desc_IV,\n\t\tvsl_groupIV_sort = group_desc_sort_IV,\n\t\tvsl_groupLOH = group_code_LOH,\n\t\tvsl_groupLOH_desc = group_desc_LOH,\n\t\tvsl_groupLOH_sort = group_desc_sort_LOH,\n\t\tgroup_code_Size,\n\t\tgroup_desc_Size,\n\t\tfp_Lvl4_code = group_Lvl4_code,\n\t\tfp_Lvl4_Group = Fp_Lvl4_Group,\n\t\tgroup_Lvl4_decode,\n\t\tgroup_Lvl3_decode,\n\t\tFp_Lvl3_Group,\n\t\tgroup_desc_Lvl3,\n\t\tVessel_Gard_Group,\n\t\tVessel_Group_6 = group_code_D6,\n\t\tgroup_code_alternative_D6,\n\t\tVessel_Group_6_desc = group_code_D6\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> RelevantColumns\nRiskGroupD6 derive(group_code1 = toInteger(group_code1),\n\t\tgroup_code2 = toInteger(group_code2),\n\t\tgroup_code3 = toInteger(group_code3),\n\t\tgroup_code4 = toInteger(group_code4),\n\t\tgroup_code5 = toInteger(group_code5),\n\t\tgroup_code_D6 = toInteger(group_code_D6),\n\t\tgroup_code_IV = toInteger(group_code_IV),\n\t\tgroup_code_LOH = toInteger(group_code_LOH),\n\t\tFp_Lvl4_Group = toInteger(Fp_Lvl4_Group),\n\t\tFp_Lvl3_Group = toInteger(Fp_Lvl3_Group)) ~> DerivedColumn1\nRelevantColumns sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_vessel_type_group.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimVesselTypeGroup"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/pre_dim_vessel_type_group')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_sf_company')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "SfCompanyNew",
							"description": "Sf Comapny new from Oltp05"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sf_company",
								"type": "DatasetReference"
							},
							"name": "SfCompany"
						}
					],
					"transformations": [
						{
							"name": "NotNullCompany"
						},
						{
							"name": "RelevantColumns"
						},
						{
							"name": "Deduplicate"
						},
						{
							"name": "Expression"
						}
					],
					"script": "source(output(\n\t\taccount_resp_me as string,\n\t\taccount_resp_pi as string,\n\t\taccount_status as string,\n\t\tclient_lost_reason as string,\n\t\tcompany_email as string,\n\t\tcompany_id as double,\n\t\tcompany_name as string,\n\t\tcompany_owner_full_name as string,\n\t\tcompany_owner_id as string,\n\t\tcountry as string,\n\t\tcuo_full_name as string,\n\t\tcuo_user_id as string,\n\t\tdate_inserted as timestamp,\n\t\tdate_updated as timestamp,\n\t\tgard_contact_id as string,\n\t\tmarket_area_code as string,\n\t\tmarket_area_description as string,\n\t\tmarket_area_id as string,\n\t\tparent_company_id as double,\n\t\tparent_company_name as string,\n\t\tparis_gic_id as double,\n\t\tprimary_contact_email as string,\n\t\tprimary_contact_name as string,\n\t\tsf_last_updated_date as timestamp,\n\t\tsource_system as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> SfCompanyNew\nSfCompanyNew filter(iifNull(company_name,'NULL') != 'NULL' && iifNull(company_id,00) != 00) ~> NotNullCompany\nNotNullCompany select(mapColumn(\n\t\taccount_resp_me,\n\t\taccount_resp_pi,\n\t\taccount_status,\n\t\tclient_lost_reason,\n\t\tcompany_email,\n\t\tcompany_id,\n\t\tcompany_name,\n\t\tcompany_owner_full_name,\n\t\tgard_contact_id,\n\t\tgard_market_area_code = market_area_code,\n\t\tgard_market_area_desc = market_area_description,\n\t\tparent_company_id,\n\t\tparent_company_name,\n\t\tsource_system_id = paris_gic_id,\n\t\tprimary_contact_email,\n\t\tprimary_contact_name,\n\t\tsource_system\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RelevantColumns\nRelevantColumns aggregate(groupBy(company_id),\n\teach(match(name!='company_id'), $$ = first($$))) ~> Deduplicate\nDeduplicate derive(company_id = toInteger(company_id),\n\t\tsource_system_id = case(iifNull(source_system_id,0)==0, toInteger(company_id) , toInteger(source_system_id)),\n\t\tsource_system = case(iifNull(source_system,'NULL')=='NULL','SF', upper(source_system)),\n\t\tgard_market_area_code = substring(gard_market_area_code, 1, 10)) ~> Expression\nExpression sink(input(\n\t\tFROM_CURRENCY_ID as double,\n\t\tTO_CURRENCY_ID as double,\n\t\tEXCHANGE_FROM_DATE as timestamp,\n\t\tEXCHANGE_RATE as decimal(38,18),\n\t\tEXCHANGE_TO_DATE as timestamp,\n\t\tFROM_CURRENCY_CODE as string,\n\t\tTO_CURRENCY_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['sf_company.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SfCompany"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Oltp05')]",
				"[concat(variables('factoryId'), '/datasets/sf_company')]"
			]
		}
	]
}