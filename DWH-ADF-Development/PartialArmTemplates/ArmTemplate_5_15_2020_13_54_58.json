{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-ADF-Development"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/copy_exchange_rate_to_lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UntilExRateOraSrcecmplte",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('inside_lkp_exchange_rate_status').output.firstRow.load_completion_status,'Y')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 180
									}
								},
								{
									"name": "inside_lkp_exchange_rate_status",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": "select \"load_completion_status\" from \"hlp_exchange_rate_status\"",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "oracle_exchange_rate_status",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "inside_lkp_exchange_rate_status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vSourceLoadstatus",
										"value": {
											"value": "@activity('inside_lkp_exchange_rate_status').output.firstRow.load_completion_status",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.01:00:00"
						}
					},
					{
						"name": "copy_hlp_exchange_rate",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "UntilExRateOraSrcecmplte",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "oracle_exchange_rate",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "stage_hlp_exchange_rate",
								"type": "DatasetReference"
							}
						]
					}
				],
				"variables": {
					"vSourceLoadstatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "copy job/dwh_stage/oltp05"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_exchange_rate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookup_exchange_file_status",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \"file_arrival_status\" from \"hlp_exchange_rate_status\"",
								"partitionOption": "None",
								"queryTimeout": "00:10:00"
							},
							"dataset": {
								"referenceName": "oracle_exchange_rate_status",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "lookup_exchange_file_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('lookup_exchange_file_status').output.firstRow.file_arrival_status,'Y')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pipeline_send_email",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipeline_send_email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pPipelineName": "Pipeline Name",
											"pEmailSubject": "ADF DWH Alert ! Exchange rate file not arrived to load and copy into Azure.",
											"pEmailBody": "Exchange rate file not available",
											"pEmailTo": "sudipta.dutta@gard.no;siv.borve@gard.no"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "copy_exchange_rate_to_lake",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copy_exchange_rate_to_lake",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true
									}
								}
							]
						}
					},
					{
						"name": "error_handling",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "load_exchange_rate",
								"pPipelineErrorMsg": "Pipeline failed. Please check"
							}
						}
					},
					{
						"name": "pipeline_send_email_1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_send_email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "load_exchange_rate",
								"pEmailSubject": "ADF DWH Alert ! Exchange rate copy job completed successfully",
								"pEmailBody": "HLP_EXCHNAGE_RATE data copied into Azure SQL server successfully",
								"pEmailTo": "sudipta.dutta@gard.no;siv.borve@gard.no"
							}
						}
					}
				],
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline_error_handling')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_send_email')]",
				"[concat(variables('factoryId'), '/pipelines/copy_exchange_rate_to_lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_master_dwh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "load_pre_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_stage_common",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_pre_dim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "load_stage_common",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_stage_common",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"variables": {
					"vMasterRevitErrorStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_master"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/load_pre_dim')]",
				"[concat(variables('factoryId'), '/pipelines/load_stage_common')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_master_pre_dwh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "load_static_stage_dwh",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_static_stage_dwh",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "copy_exact_to_lake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_static_stage_dwh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_exact_to_lake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "error_handling",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_exact_to_lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "copy_exact_to_lake",
								"pPipelineErrorMsg": {
									"value": "@activity('copy_exact_to_lake').error.message",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error_handling_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_static_stage_dwh",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": "load_static_stage_dwh",
								"pPipelineErrorMsg": {
									"value": "@activity('load_static_stage_dwh').error.message",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"vFailStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/load_static_stage_dwh')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_error_handling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_pre_dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "vPreDim",
							"value": "'This is inside load_pre_dim'"
						}
					},
					{
						"name": "m_pre_dim_agreement_pa",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "m_pre_dim_agreement_pa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"variables": {
					"vPreDim": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_prepare"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_stage_common')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_hlp_exchange_rate_usd",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "m_hlp_exchange_rate_usd",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/m_hlp_exchange_rate_usd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/load_static_stage_dwh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "load_stage_lloyds_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load_stage_lloyds_table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "pl_copy_static_to_lake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_static_to_lake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "error_handling",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_copy_static_to_lake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": {
									"value": "copy_static_to_lake",
									"type": "Expression"
								},
								"pPipelineErrorMsg": {
									"value": "@activity('pl_copy_static_to_lake').error.message",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "error_handling_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_stage_lloyds_table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipeline_error_handling",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineName": {
									"value": "load_stage_lloyds_table",
									"type": "Expression"
								},
								"pPipelineErrorMsg": {
									"value": "@activity('load_stage_lloyds_table').error.message",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"vInnerFailStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline_error_handling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_crossreference')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_crossreference",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "m_crossreference",
								"type": "DataFlowReference",
								"datasetParameters": {
									"OmMapCodeValues": {
										"fileName": "\"map_code_values\""
									},
									"OmMapCodeType": {
										"fileName": "\"map_code_type\""
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/m_crossreference')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_hlp_exchange_rate_usd')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "m_hlp_exchange_rate_usd",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "m_hlp_exchange_rate_usd",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_error_handling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send email on error",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-111.westeurope.logic.azure.com:443/workflows/854a1b1a7a70443ea407fcc8ad02a8d6/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=xI0dgmzlPJOnVcQ4PjxydVz2E5UIM0Qke2J4gC8Mkbo",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@pipeline().parameters.pPipelineName",
								"Subject": "@variables('vSubject')",
								"ErrorMessage": "@pipeline().parameters.pPipelineErrorMsg",
								"EmailTo": "@variables('vEmailTo')"
							}
						}
					}
				],
				"parameters": {
					"pPipelineName": {
						"type": "string",
						"defaultValue": "Pipeline Name"
					},
					"pPipelineErrorMsg": {
						"type": "string",
						"defaultValue": "Pipeline failed. Please check"
					}
				},
				"variables": {
					"vEmailTo": {
						"type": "String",
						"defaultValue": "sudipta.dutta@gard.no;siv.borve@gard.no;liv.rasmussen@gard.no"
					},
					"vSubject": {
						"type": "String",
						"defaultValue": "ADF DWH Alert ! Pipeline Failed"
					}
				},
				"folder": {
					"name": "pipeline/dwh_master"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_send_email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send email",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-55.westeurope.logic.azure.com:443/workflows/68a9e67bb1dd4c218b0aedeb2cc185d1/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=aCHFbRtDBEqszJgzokENqPEYosNnrAjhSVjDmKSri3A",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@pipeline().parameters.pPipelineName",
								"Subject": "@pipeline().parameters.pEmailSubject",
								"Message": "@pipeline().parameters.pEmailBody",
								"EmailTo": "@pipeline().parameters.pEmailTo"
							}
						}
					}
				],
				"parameters": {
					"pPipelineName": {
						"type": "string",
						"defaultValue": "Pipeline Name"
					},
					"pEmailSubject": {
						"type": "string",
						"defaultValue": "Azure DWH Alert ! Exchange rate file not available"
					},
					"pEmailBody": {
						"type": "string",
						"defaultValue": "Exchange rate file not available"
					},
					"pEmailTo": {
						"type": "string",
						"defaultValue": "sudipta.dutta@gard.no"
					}
				},
				"folder": {
					"name": "pipeline/dwh_master"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trgr_load_exchange_rate')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to execute exchange rate copy job",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "load_exchange_rate",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-05-12T10:32:00.000Z",
						"endTime": "2020-07-01T10:32:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/load_exchange_rate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_crossreference')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "OmMapCodeValues"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "OmMapCodeType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "t_crossreference",
								"type": "DatasetReference"
							},
							"name": "tCrossReference"
						}
					],
					"transformations": [
						{
							"name": "CodeValues",
							"description": "Removing columns not used in mapping"
						},
						{
							"name": "CodeTypes",
							"description": "Remove columns not used in mapping"
						},
						{
							"name": "JoinCodeTypeAndValues",
							"description": "Inner join on 'map_code_type_id'"
						},
						{
							"name": "DerivedSourceCodeKey"
						},
						{
							"name": "FilterCodeTypeID"
						},
						{
							"name": "SelectTcrossReference",
							"description": "Remove unused columns"
						},
						{
							"name": "Deduplicate",
							"description": "Getting only distinct rows"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "FilteredCodeValues"
						}
					],
					"script": "source(output(\n\t\tactive_flag as string,\n\t\tcode2 as string,\n\t\tcode2_description as string,\n\t\tcreated_by as string,\n\t\tcreated_date as timestamp,\n\t\tgard_comments as string,\n\t\tintech_comments as string,\n\t\tmap_code_status as string,\n\t\tmap_code_type_id as double,\n\t\tmap_code_val_id as double,\n\t\tmap_rule as string,\n\t\tmodified_by as string,\n\t\tmodified_date as timestamp,\n\t\tom_x_ref as string,\n\t\tpredefined_om_code as string,\n\t\tsource_code_action as string,\n\t\tsource_code_descr as string,\n\t\tsource_code_field1 as string,\n\t\tsource_code_field1_value as string,\n\t\tsource_code_field2 as string,\n\t\tsource_code_field2_value as string,\n\t\tsource_code_field3 as string,\n\t\tsource_code_field3_value as string,\n\t\tsource_code_field4 as string,\n\t\tsource_code_field4_value as string,\n\t\tsource_code_key as string,\n\t\tsource_code_table as string,\n\t\tsource_system as string,\n\t\tsource_table2_id as double,\n\t\tsource_table_id as double,\n\t\tsource_tab_col_id as double,\n\t\ttarget_code as string,\n\t\ttarget_long_descr as string,\n\t\ttarget_short_descr as string,\n\t\ttarget_table_id as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> OmMapCodeValues\nsource(output(\n\t\tcodeset_category as string,\n\t\tcodeset_type as string,\n\t\tcomments as string,\n\t\tcreated_by as string,\n\t\tcreated_date as timestamp,\n\t\tdummy_modified_by as string,\n\t\tdwh_notify as string,\n\t\teditable as string,\n\t\tfairplay_table as string,\n\t\tfunctional as string,\n\t\tgard_resp as string,\n\t\tidx_max_length as double,\n\t\tidx_min_length as double,\n\t\tintech_notify as string,\n\t\tmap_code_status as string,\n\t\tmap_code_type as string,\n\t\tmap_code_type_descr as string,\n\t\tmap_code_type_id as double,\n\t\tmap_code_type_parent as double,\n\t\tmodified_by as string,\n\t\tmodified_date as timestamp,\n\t\tmodule as string,\n\t\tom_index_code as string,\n\t\tparent_required as string,\n\t\ttarget_column_name as string,\n\t\ttarget_table_id as double,\n\t\ttarget_table_name as string,\n\t\ttarget_tab_col_id as double,\n\t\tto_load as string,\n\t\ttrial_version as double,\n\t\tused_in_dwh as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> OmMapCodeType\nFilteredCodeValues select(mapColumn(\n\t\tcode2,\n\t\tmap_code_type_id,\n\t\tsource_code_key,\n\t\tsource_system,\n\t\tom_x_ref,\n\t\ttarget_long_descr,\n\t\ttarget_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeValues\nFilterCodeTypeID select(mapColumn(\n\t\tmap_code_type_id,\n\t\tmap_code_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeTypes\nCodeValues, CodeTypes join(CodeValues@map_code_type_id == CodeTypes@map_code_type_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCodeTypeAndValues\nJoinCodeTypeAndValues derive(source_code_key = case(source_system =='PARIS' && contains([122,173], #item == CodeValues@map_code_type_id),source_code_key,source_code_key)) ~> DerivedSourceCodeKey\nOmMapCodeType filter(contains([329, 106,122,113,50,45,124,367,219,374,151,167, 101, 100, 180, 108, 107,    \r\n370,117,112,466, 136,179,404, 157, 148, 391,127,116, 464,384,161, 198 ,109,771,770,\r\n774,775,773,772,776,777,127,169,170,460,785,787,788,791,786,792,794,123,793,795,797,\r\n798,796,800,801,368,802,803,804,806,807,407,809,811,812,813,816,827,828], #item == map_code_type_id)) ~> FilterCodeTypeID\nDerivedSourceCodeKey select(mapColumn(\n\t\tsource_code_key,\n\t\tsource_system,\n\t\ttarget_code,\n\t\ttarget_description = target_long_descr,\n\t\tcode_type = map_code_type,\n\t\tcode_type_id = CodeValues@map_code_type_id,\n\t\tcode2,\n\t\tom_x_ref\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTcrossReference\nSelectTcrossReference aggregate(groupBy(source_code_key,\n\t\tsource_system,\n\t\ttarget_code,\n\t\ttarget_description,\n\t\tcode_type_id,\n\t\tcode2,\n\t\tom_x_ref),\n\tcode_type = first(code_type)) ~> Deduplicate\nDeduplicate alterRow(upsertIf(!isNull(target_code))) ~> AlterRow\nOmMapCodeValues filter(!contains([source_code_field1,source_code_field2,source_code_field3,source_code_field4],#item=='created_by')) ~> FilteredCodeValues\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['tcrossreference.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tCrossReference"
				}
			},
			"dependsOn": []
		}
	]
}