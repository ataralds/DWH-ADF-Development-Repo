{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-ADF-Development"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_destination_peatable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleAzureDwh",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/marts_to_oracle"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_DWH",
					"table": "P_PEATABLE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_lloyds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "sta_exchange_rate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": {
						"value": "@dataset().fileName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_oltp05_dummy_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is used to check if there is any data in the Oracle source table.",
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "pipeline/dwh_stage"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "DUMMY_TABLE_DATASET"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_config_paris')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset is pointing to the cinfig file in stage_itf. Temp solution",
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "AZURE_CONFIG"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_configfile_oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "AZURE_CONFIG"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_exact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "map_code_values"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_exchange_rate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "hlp_exchange_rate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_exchange_rate_status')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "hlp_exchange_rate_status"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_paris_fap_rsa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "CBSTABLE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_scr_oltp05')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OLTP05",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Oltp05"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "AZURE_READ",
					"table": "sta_claim_process"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scr_oracle_agresso')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracelStageITF",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Copy job/dwh-stage/Agresso"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "STAGE_ITF",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scr_oracle_paris')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "All the views in paris",
				"linkedServiceName": {
					"referenceName": "OracleCStage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Copy job/dwh-stage/Paris"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "CSTAGE_PARIS",
					"table": "ACOTABLE"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_crossreference')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dwh_stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "OmMapCodeValues"
						},
						{
							"dataset": {
								"referenceName": "Oltp05",
								"type": "DatasetReference"
							},
							"name": "OmMapCodeType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "t_crossreference",
								"type": "DatasetReference"
							},
							"name": "tCrossReference"
						}
					],
					"transformations": [
						{
							"name": "CodeValues",
							"description": "Removing columns not used in mapping"
						},
						{
							"name": "CodeTypes",
							"description": "Remove columns not used in mapping"
						},
						{
							"name": "JoinCodeTypeAndValues",
							"description": "Inner join on 'map_code_type_id'"
						},
						{
							"name": "DerivedSourceCodeKey"
						},
						{
							"name": "FilterCodeTypeID"
						},
						{
							"name": "SelectTcrossReference",
							"description": "Remove unused columns"
						},
						{
							"name": "Deduplicate",
							"description": "Getting only distinct rows"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "FilteredCodeValues"
						}
					],
					"script": "source(output(\n\t\tactive_flag as string,\n\t\tcode2 as string,\n\t\tcode2_description as string,\n\t\tcreated_by as string,\n\t\tcreated_date as timestamp,\n\t\tgard_comments as string,\n\t\tintech_comments as string,\n\t\tmap_code_status as string,\n\t\tmap_code_type_id as double,\n\t\tmap_code_val_id as double,\n\t\tmap_rule as string,\n\t\tmodified_by as string,\n\t\tmodified_date as timestamp,\n\t\tom_x_ref as string,\n\t\tpredefined_om_code as string,\n\t\tsource_code_action as string,\n\t\tsource_code_descr as string,\n\t\tsource_code_field1 as string,\n\t\tsource_code_field1_value as string,\n\t\tsource_code_field2 as string,\n\t\tsource_code_field2_value as string,\n\t\tsource_code_field3 as string,\n\t\tsource_code_field3_value as string,\n\t\tsource_code_field4 as string,\n\t\tsource_code_field4_value as string,\n\t\tsource_code_key as string,\n\t\tsource_code_table as string,\n\t\tsource_system as string,\n\t\tsource_table2_id as double,\n\t\tsource_table_id as double,\n\t\tsource_tab_col_id as double,\n\t\ttarget_code as string,\n\t\ttarget_long_descr as string,\n\t\ttarget_short_descr as string,\n\t\ttarget_table_id as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> OmMapCodeValues\nsource(output(\n\t\tcodeset_category as string,\n\t\tcodeset_type as string,\n\t\tcomments as string,\n\t\tcreated_by as string,\n\t\tcreated_date as timestamp,\n\t\tdummy_modified_by as string,\n\t\tdwh_notify as string,\n\t\teditable as string,\n\t\tfairplay_table as string,\n\t\tfunctional as string,\n\t\tgard_resp as string,\n\t\tidx_max_length as double,\n\t\tidx_min_length as double,\n\t\tintech_notify as string,\n\t\tmap_code_status as string,\n\t\tmap_code_type as string,\n\t\tmap_code_type_descr as string,\n\t\tmap_code_type_id as double,\n\t\tmap_code_type_parent as double,\n\t\tmodified_by as string,\n\t\tmodified_date as timestamp,\n\t\tmodule as string,\n\t\tom_index_code as string,\n\t\tparent_required as string,\n\t\ttarget_column_name as string,\n\t\ttarget_table_id as double,\n\t\ttarget_table_name as string,\n\t\ttarget_tab_col_id as double,\n\t\tto_load as string,\n\t\ttrial_version as double,\n\t\tused_in_dwh as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> OmMapCodeType\nFilteredCodeValues select(mapColumn(\n\t\tcode2,\n\t\tmap_code_type_id,\n\t\tsource_code_key,\n\t\tsource_system,\n\t\tom_x_ref,\n\t\ttarget_long_descr,\n\t\ttarget_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeValues\nFilterCodeTypeID select(mapColumn(\n\t\tmap_code_type_id,\n\t\tmap_code_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeTypes\nCodeValues, CodeTypes join(CodeValues@map_code_type_id == CodeTypes@map_code_type_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinCodeTypeAndValues\nJoinCodeTypeAndValues derive(source_code_key = case(source_system =='PARIS' && contains([122,173], #item == CodeValues@map_code_type_id),source_code_key,source_code_key)) ~> DerivedSourceCodeKey\nOmMapCodeType filter(contains([329, 106,122,113,50,45,124,367,219,374,151,167, 101, 100, 180, 108, 107,    \r\n370,117,112,466, 136,179,404, 157, 148, 391,127,116, 464,384,161, 198 ,109,771,770,\r\n774,775,773,772,776,777,127,169,170,460,785,787,788,791,786,792,794,123,793,795,797,\r\n798,796,800,801,368,802,803,804,806,807,407,809,811,812,813,816,827,828], #item == map_code_type_id)) ~> FilterCodeTypeID\nDerivedSourceCodeKey select(mapColumn(\n\t\tsource_code_key,\n\t\tsource_system,\n\t\ttarget_code,\n\t\ttarget_description = target_long_descr,\n\t\tcode_type = map_code_type,\n\t\tcode_type_id = CodeValues@map_code_type_id,\n\t\tcode2,\n\t\tom_x_ref\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTcrossReference\nSelectTcrossReference aggregate(groupBy(source_code_key,\n\t\tsource_system,\n\t\ttarget_code,\n\t\ttarget_description,\n\t\tcode_type_id,\n\t\tcode2,\n\t\tom_x_ref),\n\tcode_type = first(code_type)) ~> Deduplicate\nDeduplicate alterRow(upsertIf(!isNull(target_code))) ~> AlterRow\nOmMapCodeValues filter(!contains([source_code_field1,source_code_field2,source_code_field3,source_code_field4],#item=='created_by')) ~> FilteredCodeValues\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['tcrossreference.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tCrossReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_agreement_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "marts/dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_agreement_type",
								"type": "DatasetReference"
							},
							"name": "preDimAgreementType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_agreement_type",
								"type": "DatasetReference"
							},
							"name": "dimAgreementTypeInsert"
						}
					],
					"transformations": [
						{
							"name": "derivedTopLevel"
						},
						{
							"name": "alterRow"
						}
					],
					"script": "source(output(\n\t\tagt_description as string,\n\t\tagt_key as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_agreement_type.parquet']) ~> preDimAgreementType\npreDimAgreementType derive(top_key = 'ALL',\n\t\ttop_description = 'All Agreement Types') ~> derivedTopLevel\nderivedTopLevel alterRow(upsertIf(!isNull(agt_key))) ~> alterRow\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_agreement_type.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimAgreementTypeInsert"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_business_area')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "marts/dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_business_area",
								"type": "DatasetReference"
							},
							"name": "preDimBusinessArea"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_business_area",
								"type": "DatasetReference"
							},
							"name": "dimBusinessArea"
						}
					],
					"transformations": [
						{
							"name": "derivedtoplevel"
						},
						{
							"name": "alterrow"
						}
					],
					"script": "source(output(\n\t\tbus_description as string,\n\t\tbus_key as string,\n\t\tgrp_key as string,\n\t\tgrp_description as string,\n\t\tbua_key as string,\n\t\tbua_description as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_business_area.parquet']) ~> preDimBusinessArea\npreDimBusinessArea derive(top_key = 'ALL',\n\t\ttop_description = 'All Business Areas') ~> derivedtoplevel\nderivedtoplevel alterRow(upsertIf(!isNull(bus_key))) ~> alterrow\nalterrow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_business_area.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimBusinessArea"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_claim_detail')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "marts/dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_claim_detail_pa",
								"type": "DatasetReference"
							},
							"name": "preDimClaimDetailPA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_claim_detail",
								"type": "DatasetReference"
							},
							"name": "dimClaimDetail"
						}
					],
					"transformations": [
						{
							"name": "deviredTopLevel"
						},
						{
							"name": "alterRow"
						}
					],
					"script": "source(output(\n\t\tcld_description as string,\n\t\tcld_key as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_claim_detail_pa.parquet']) ~> preDimClaimDetailPA\npreDimClaimDetailPA derive(top_key = 'ALL',\n\t\ttop_desc = 'All Claim Details') ~> deviredTopLevel\ndeviredTopLevel alterRow(upsertIf(!isNull(top_key))) ~> alterRow\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_claim_detail.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimClaimDetail"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_country')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "marts/dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_country",
								"type": "DatasetReference"
							},
							"name": "preDimCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_country",
								"type": "DatasetReference"
							},
							"name": "DimCountry"
						}
					],
					"transformations": [
						{
							"name": "DerivedTopLevel",
							"description": "Derive top_key and top_description"
						},
						{
							"name": "AlterRow",
							"description": "Upsert if pk key not null"
						}
					],
					"script": "source(output(\n\t\tpk_key as string,\n\t\treg_code as string,\n\t\treg_description as string,\n\t\tar1_code as string,\n\t\tar1_description as string,\n\t\tar2_code as string,\n\t\tar2_description as string,\n\t\tlast_updated_by as string,\n\t\tcon_2ltr_code as string,\n\t\tcon_country_name as string,\n\t\tcon_oecd as string,\n\t\tcon_currency_code as string,\n\t\tcon_eu as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_country.parquet']) ~> preDimCountry\npreDimCountry derive(top_code = 'ALL',\n\t\ttop_description = 'All Countries',\n\t\tcon_iso_code = '') ~> DerivedTopLevel\nDerivedTopLevel alterRow(upsertIf(!isNull(pk_key))) ~> AlterRow\nAlterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_country.parquet'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimCountry"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_coverage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "marts/dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_coverage",
								"type": "DatasetReference"
							},
							"name": "preDimCoverage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_coverage",
								"type": "DatasetReference"
							},
							"name": "dimCoverage"
						}
					],
					"transformations": [
						{
							"name": "derivedTopColumns"
						},
						{
							"name": "alterRow"
						}
					],
					"script": "source(output(\n\t\tpk_key as string,\n\t\tcov_description as string,\n\t\tcov_exposure_group_code as string,\n\t\tcov_exposure_group_desc as string,\n\t\tgrp_key as string,\n\t\tgrp_description as string,\n\t\tcov_energy_exp_group_code as string,\n\t\tcov_energy_exp_group_desc as string,\n\t\tcov_layer_group_code as string,\n\t\tcov_layer_group_descr as string,\n\t\tcov_gic_group_code as string,\n\t\tcov_gic_group_desc as string,\n\t\tcov_3ltr_code as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_coverage.parquet']) ~> preDimCoverage\npreDimCoverage derive(tot_key = 'ALL',\n\t\ttot_description = 'All Coverages') ~> derivedTopColumns\nderivedTopColumns alterRow(upsertIf(!isNull(pk_key))) ~> alterRow\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_coverage.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimCoverage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/m_dim_currency')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "marts/dim"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pre_dim_currency",
								"type": "DatasetReference"
							},
							"name": "preDimCurrency"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dim_currency",
								"type": "DatasetReference"
							},
							"name": "dimCurrency"
						}
					],
					"transformations": [
						{
							"name": "DeriveTopLevel"
						},
						{
							"name": "AlterRow",
							"description": "Upsert if pk key is not null"
						}
					],
					"script": "source(output(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Pre_Dim/pre_dim_currency.parquet']) ~> preDimCurrency\npreDimCurrency derive(top_key = 'ALL',\n\t\ttop_description = 'All Currencies') ~> DeriveTopLevel\nDeriveTopLevel alterRow(upsertIf(!isNull(PK_KEY))) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['dim_currency.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimCurrency"
				}
			},
			"dependsOn": []
		}
	]
}