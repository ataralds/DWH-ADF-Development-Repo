{
	"name": "M_PRE_DIM_RISK_OBJECT_ded",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tcrossreference"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ifatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "HlpExchrateUSD"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ica"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ipatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "iuv"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "iuwtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "peatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "isatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "isztable"
				},
				{
					"dataset": {
						"referenceName": "AgressoSql",
						"type": "DatasetReference"
					},
					"name": "agatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "inatable"
				},
				{
					"name": "obb"
				},
				{
					"name": "oba"
				},
				{
					"name": "StaVesselTypeGroup"
				},
				{
					"name": "staLohScale"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "deductibleRule"
				},
				{
					"name": "xrefDeductibleRule"
				},
				{
					"name": "icatableDedRule"
				},
				{
					"name": "DeriveIcastdateExchange"
				},
				{
					"name": "JoinIcaExcharate"
				},
				{
					"name": "JoinIcaIfa"
				},
				{
					"name": "JoinIfaxCrossDeductible"
				},
				{
					"name": "DerivedColumns"
				},
				{
					"name": "Aggregate"
				},
				{
					"name": "coverage"
				},
				{
					"name": "xrefCoverage"
				},
				{
					"name": "DeriveRobDedAmountColumns"
				},
				{
					"name": "icatableLineInfo"
				},
				{
					"name": "iuvica"
				},
				{
					"name": "iuviuw"
				},
				{
					"name": "iuwpea"
				},
				{
					"name": "DeriveShareColumns"
				},
				{
					"name": "AggregateLineInfo"
				},
				{
					"name": "DeriveRobLineColumns"
				},
				{
					"name": "agreementType"
				},
				{
					"name": "xrefAgreementType"
				},
				{
					"name": "businessArea"
				},
				{
					"name": "xrefBusinessArea"
				},
				{
					"name": "currency"
				},
				{
					"name": "xrefCurrency"
				},
				{
					"name": "vesselSubType"
				},
				{
					"name": "xrefVesselSubType"
				},
				{
					"name": "obbtable"
				},
				{
					"name": "obatable"
				},
				{
					"name": "DerivedIcaStdateExchange"
				},
				{
					"name": "vesselTypeGroup"
				},
				{
					"name": "LineInfo"
				},
				{
					"name": "DedRule"
				},
				{
					"name": "JoinIcaDedRule"
				},
				{
					"name": "JoinIcaOba"
				},
				{
					"name": "JoinObaObb"
				},
				{
					"name": "JoinObbXrefVesselSubType"
				},
				{
					"name": "JoinxRefVesselSubTypeVesselType"
				},
				{
					"name": "JoinIcaIna"
				},
				{
					"name": "JoinIcaAga"
				},
				{
					"name": "JoinInaXrefCurr"
				},
				{
					"name": "JoinxrefCurrExchrateUSD"
				},
				{
					"name": "JoinIcaLineInfo"
				},
				{
					"name": "JoinAgaxRefBusinessArea"
				},
				{
					"name": "JoinAgaXrefAgreementType"
				},
				{
					"name": "JoinInaXrefCoverage"
				},
				{
					"name": "JoinAgaIsa"
				},
				{
					"name": "JoinIsaIsz"
				},
				{
					"name": "JoinInaIpa"
				},
				{
					"name": "FilterDates"
				},
				{
					"name": "LookupStaLohScale"
				},
				{
					"name": "DeriveLastUpdated"
				},
				{
					"name": "exchrateusdDedRule"
				}
			],
			"script": "source(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.t_crossreference',\n\tformat: 'query') ~> tcrossreference\nsource(output(\n\t\tifaifaid as string,\n\t\tifatxtkey as string,\n\t\tifadedbrkperc as decimal(28,10),\n\t\tifalimdays as decimal(28,10),\n\t\tifadediem as string,\n\t\tifadedbrktype as string,\n\t\tifasw5 as string,\n\t\tifaludate as date,\n\t\tifadedsetting as string,\n\t\tifaicaid as string,\n\t\tifaln2 as short,\n\t\tifadedmax as long,\n\t\tifalusign as string,\n\t\tifatext35 as string,\n\t\tifadedbrk as string,\n\t\tifanote as string,\n\t\tifaamtcod as string,\n\t\tifadedamt as long,\n\t\tifaconndedcd3 as string,\n\t\tifadedarea as short,\n\t\tifalimcurr as string,\n\t\tifalimamt as long,\n\t\tifacostynsw as string,\n\t\tifadays as decimal(28,10),\n\t\tifadedcurr as string,\n\t\tifatext70 as string,\n\t\tifadedmin as long,\n\t\tifahstid as string,\n\t\tifainddays as decimal(28,10),\n\t\tifadedcd3 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.p_ifatable',\n\tformat: 'query') ~> ifatable\nsource(output(\n\t\tfrom_currency_id as long,\n\t\texchange_from_date as date,\n\t\texchange_rate as decimal(28,10),\n\t\texchange_to_date as date,\n\t\tfrom_currency_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select from_currency_id, exchange_from_date, exchange_rate, exchange_to_date, from_currency_code\\nfrom dwh_stage.hlp_exchange_rate_to_usd',\n\tformat: 'query') ~> HlpExchrateUSD\nsource(output(\n\t\ticaicaid as string,\n\t\ticainaid as string,\n\t\ticastat3 as string,\n\t\ticastdate as date,\n\t\ticaendate as date,\n\t\ticachdate as date,\n\t\ticatotamt as long,\n\t\ticaourshare as decimal(28,10),\n\t\ticapmlamt as long,\n\t\ticaeoamt as long,\n\t\ticaprovst as integer,\n\t\ticacadate as date,\n\t\ticaagaid as string,\n\t\ticaobno as integer,\n\t\ticapmlcurr as string,\n\t\ticaintrate as decimal(28,10),\n\t\ticaintosprem as decimal(28,10),\n\t\ticaintcurr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaicaid, icainaid, icastat3, icastdate, icaendate, icachdate, icatotamt, icaourshare, icapmlamt, icaeoamt, icaprovst, icacadate, icaagaid, icaobno, icapmlcurr, icaintrate, icaintosprem, icaintcurr\\nfrom dwh_stage.p_icatable',\n\tformat: 'query') ~> ica\nsource(output(\n\t\tipaicaid as string,\n\t\tiparate as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select ipaicaid, iparate\\nfrom dwh_stage.p_ipatable\\nwhere ipapcode in (\\'O\\',\\'P\\') and ipapremn3 = 3',\n\tformat: 'query') ~> ipatable\nsource(output(\n\t\tiuvicaid as string,\n\t\tiuviuvid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select iuvicaid, iuviuvid\\nfrom dwh_stage.p_iuvtable\\nwhere iuvverstat = \\'A\\'',\n\tformat: 'query') ~> iuv\nsource(output(\n\t\tiuwiuvid as string,\n\t\tiuwpartisip as long,\n\t\tiuwoutbusntyp as integer,\n\t\tiuwshare as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select iuwiuvid, iuwpartisip, iuwoutbusntyp, iuwshare\\nfrom dwh_stage.p_iuwtable',\n\tformat: 'query') ~> iuwtable\nsource(output(\n\t\tpeapeaid as long,\n\t\tpeaccode as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select peapeaid, peaccode\\nfrom dwh_stage.p_peatable',\n\tformat: 'query') ~> peatable\nsource(output(\n\t\tisaisaid as string,\n\t\tisaagaid as string,\n\t\tisasecnam as string,\n\t\tisalayertype as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select isaisaid, isaagaid, isasecnam, isalayertype\\nfrom dwh_stage.p_isatable',\n\tformat: 'query') ~> isatable\nsource(output(\n\t\tisziszid as string,\n\t\tisztotind as decimal(28,10),\n\t\tiszcshind as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select isziszid, isztotind, iszcshind\\nfrom dwh_stage.p_isztable',\n\tformat: 'query') ~> isztable\nsource(output(\n\t\tagaagaid as string,\n\t\tagabusndiv as integer,\n\t\tagabusnsec as integer,\n\t\tagabusncla as integer,\n\t\tagabusnregion as integer,\n\t\tagastdate as date,\n\t\tagastat2 as string,\n\t\tagabusnbranch as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agaagaid, agabusndiv, agabusnsec, agabusncla, agabusnregion, agastdate, agastat2, agabusnbranch\\nfrom dwh_stage.p_agatable',\n\tformat: 'query') ~> agatable\nsource(output(\n\t\tinainaid as string,\n\t\tinaclmlead as long,\n\t\tinabusntyp as integer,\n\t\tinabusnsubcla as integer,\n\t\tinaintrst as string,\n\t\tinacurr as string,\n\t\tinacondco as short,\n\t\tinawarrenty as short,\n\t\tinareinynsw as string,\n\t\tinaisaid as string,\n\t\tinapiffotype as integer,\n\t\tinapirdctype as integer,\n\t\tinareinnoof as integer,\n\t\tinaretyp as integer,\n\t\tinareinshare as decimal(28,10),\n\t\tinamutual as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select inainaid, inaclmlead, inabusntyp, inabusnsubcla, inaintrst, inacurr, inacondco, inawarrenty, inareinynsw, inaisaid, inapiffotype, inapirdctype, inareinnoof, inaretyp, inareinshare, inamutual\\nfrom dwh_stage.p_inatable',\n\tformat: 'query') ~> inatable\nsource(output(\n\t\tobbaccname as string,\n\t\tobbadr1 as string,\n\t\tobbadr2 as string,\n\t\tobbadr3 as string,\n\t\tobbadr4 as string,\n\t\tobbadr5 as string,\n\t\tobbareadescr as string,\n\t\tobbareafactorgroup as string,\n\t\tobbarmdgrdalways as string,\n\t\tobbaviatdescr as string,\n\t\tobbavproof as string,\n\t\tobbbnr as decimal(38,18),\n\t\tobbbonus as decimal(38,18),\n\t\tobbbreth as decimal(38,18),\n\t\tobbbuildfactor as decimal(38,18),\n\t\tobbbuiltmonth as decimal(38,18),\n\t\tobbbuiltyear as decimal(38,18),\n\t\tobbcagsubtyp as decimal(38,18),\n\t\tobbcapoty as decimal(38,18),\n\t\tobbcargodescr as string,\n\t\tobbcargotype as string,\n\t\tobbccbid as string,\n\t\tobbcefoen as string,\n\t\tobbcefofb as string,\n\t\tobbcefoty as string,\n\t\tobbcffid as string,\n\t\tobbclass as string,\n\t\tobbclass2 as string,\n\t\tobbcoordx as decimal(38,18),\n\t\tobbcoordy as decimal(38,18),\n\t\tobbcrdate as timestamp,\n\t\tobbcrsign as string,\n\t\tobbcrwisolan as string,\n\t\tobbcsvdate as timestamp,\n\t\tobbcsvtext as string,\n\t\tobbcumobno as decimal(38,18),\n\t\tobbcurr as string,\n\t\tobbdepth as decimal(38,18),\n\t\tobbdistrict as string,\n\t\tobbdwt as decimal(38,18),\n\t\tobbendate as timestamp,\n\t\tobbengfab as string,\n\t\tobbenginehp as string,\n\t\tobbengineyear as decimal(38,18),\n\t\tobbexname as string,\n\t\tobbfishlimit as string,\n\t\tobbfishsize as decimal(38,18),\n\t\tobbfishunit as string,\n\t\tobbfloor as decimal(38,18),\n\t\tobbfmark as string,\n\t\tobbformt as decimal(38,18),\n\t\tobbgeodescr as string,\n\t\tobbgeox as decimal(38,18),\n\t\tobbgeoy as decimal(38,18),\n\t\tobbgnr as decimal(38,18),\n\t\tobbgrpdescr as string,\n\t\tobbgrpfactorgroup as string,\n\t\tobbgrt as decimal(38,18),\n\t\tobbhinumber as string,\n\t\tobbhulltype as string,\n\t\tobbimpexp as decimal(38,18),\n\t\tobbinjurydescr as string,\n\t\tobbinstrument as decimal(38,18),\n\t\tobbinsynsw as string,\n\t\tobbismdate as timestamp,\n\t\tobbismsocity as string,\n\t\tobbkmavle as decimal(38,18),\n\t\tobbkmstan as decimal(38,18),\n\t\tobbkmyear as decimal(38,18),\n\t\tobbkmyrvalue as decimal(38,18),\n\t\tobbknowninjury as string,\n\t\tobbknvmark as string,\n\t\tobbkonst as string,\n\t\tobbkwh as decimal(38,18),\n\t\tobblandinggear as decimal(38,18),\n\t\tobblastvaldatebuildings as timestamp,\n\t\tobblastvaldateequipment as timestamp,\n\t\tobblbunit as string,\n\t\tobblength as decimal(38,18),\n\t\tobblicences as decimal(38,18),\n\t\tobbloc as string,\n\t\tobbludate as timestamp,\n\t\tobblusign as string,\n\t\tobbm3 as decimal(38,18),\n\t\tobbmainoshid as decimal(38,18),\n\t\tobbmaintlevel as decimal(38,18),\n\t\tobbmanager as decimal(38,18),\n\t\tobbmanerknum as string,\n\t\tobbmanisolan as string,\n\t\tobbmaterial as string,\n\t\tobbmcpid as string,\n\t\tobbmvaynsw as string,\n\t\tobbname as string,\n\t\tobbncaid as string,\n\t\tobbnoofcrew as decimal(38,18),\n\t\tobbnoofflat as decimal(38,18),\n\t\tobbnoofofficers as decimal(38,18),\n\t\tobbnoofother as decimal(38,18),\n\t\tobbnoofpax as decimal(38,18),\n\t\tobbobbid as string,\n\t\tobbobjdescr as string,\n\t\tobbobjema as decimal(38,18),\n\t\tobbobjemi as decimal(38,18),\n\t\tobbobno as decimal(38,18),\n\t\tobbobnorf as decimal(38,18),\n\t\tobbobver as decimal(38,18),\n\t\tobboffisolan as string,\n\t\tobboflid as decimal(38,18),\n\t\tobboshid as decimal(38,18),\n\t\tobbowndate as timestamp,\n\t\tobbowner as decimal(38,18),\n\t\tobbownynsw as string,\n\t\tobbpilotcert as string,\n\t\tobbpilothour as decimal(38,18),\n\t\tobbportcccid as string,\n\t\tobbportdescr as string,\n\t\tobbportunlid as string,\n\t\tobbraptorid as string,\n\t\tobbrecontrfactor as decimal(38,18),\n\t\tobbregdate as timestamp,\n\t\tobbrentstat as decimal(38,18),\n\t\tobbrespdate as timestamp,\n\t\tobbresptext as string,\n\t\tobbrotation as decimal(38,18),\n\t\tobbshbisolan as string,\n\t\tobbshpbld as decimal(38,18),\n\t\tobbsnr as decimal(38,18),\n\t\tobbsocity as string,\n\t\tobbsocity2 as string,\n\t\tobbspeedlimit as decimal(38,18),\n\t\tobbsrcob as string,\n\t\tobbstandard as decimal(38,18),\n\t\tobbstdate as timestamp,\n\t\tobbtaxno as string,\n\t\tobbtotamt as decimal(38,18),\n\t\tobbtradisolan as string,\n\t\tobbtradtextkey as string,\n\t\tobbtradunlid as string,\n\t\tobbtranme as string,\n\t\tobbtranty as decimal(38,18),\n\t\tobbtypedescr as string,\n\t\tobbuhcid as decimal(38,18),\n\t\tobbusecod as string,\n\t\tobbverstat as string,\n\t\tobbvescod as string,\n\t\tobbvesisolan as string,\n\t\tobbwater as string,\n\t\tobbweigthgroup as string,\n\t\tobbx1factorgroup as string,\n\t\tobbx2factorgroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> obb\nsource(output(\n\t\tobaassetno as decimal(38,18),\n\t\tobaassetsubno as decimal(38,18),\n\t\tobacallno as string,\n\t\tobachassis as string,\n\t\tobacomp2 as decimal(38,18),\n\t\tobacrdate as timestamp,\n\t\tobacrsign as string,\n\t\tobaextnote as string,\n\t\tobaimono as decimal(38,18),\n\t\tobaimoynsw as string,\n\t\tobaintnote as string,\n\t\tobaknvmark as string,\n\t\tobalongtermrate as decimal(38,18),\n\t\tobaludate as timestamp,\n\t\tobalusign as string,\n\t\tobammsino as decimal(38,18),\n\t\tobancmid as string,\n\t\tobancnid as string,\n\t\tobancsid as string,\n\t\tobanjcid as string,\n\t\tobanpcid as decimal(38,18),\n\t\tobaobno as decimal(38,18),\n\t\tobaobrt as decimal(38,18),\n\t\tobaorgbui as decimal(38,18),\n\t\tobaorgbuiltmonth as decimal(38,18),\n\t\tobaoxno as decimal(38,18),\n\t\tobapeaid as decimal(38,18),\n\t\tobatrackit as string,\n\t\tobatrackit1 as string,\n\t\tobatrackit2 as string,\n\t\tobatrackit3 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> oba\nsource(output(\n\t\tfk_gard_group as double,\n\t\tfk_rsk_driver_grp_1 as double,\n\t\tfk_rsk_driver_grp_2 as double,\n\t\tfk_rsk_driver_grp_3 as double,\n\t\tfk_rsk_driver_grp_4 as double,\n\t\tfk_rsk_driver_grp_5 as double,\n\t\tfk_rsk_driver_grp_6 as double,\n\t\tfk_rsk_driver_iv as double,\n\t\tfk_rsk_driver_loh as double,\n\t\tfk_rsk_driver_lvl3 as double,\n\t\tfk_rsk_driver_lvl4 as double,\n\t\tfk_rsk_driver_size as double,\n\t\tfk_rsk_grp_cargo as double,\n\t\tfk_rsk_grp_crew as double,\n\t\tfk_rsk_grp_hull as double,\n\t\tfk_rsk_grp_machinery as double,\n\t\tfk_rsk_grp_main as double,\n\t\tfk_rsk_grp_passenger as double,\n\t\tfk_rsk_grp_pollution as double,\n\t\tfk_rsk_grp_ri as double,\n\t\tfk_rsk_grp_size as double,\n\t\tfp_3_ltr_code as string,\n\t\tfp_level_5_code as string,\n\t\tfp_level_5_decode as string,\n\t\tfp_level_5_desc as string,\n\t\tfp_level_5_hull as double,\n\t\tfp_level_5_sub as string,\n\t\tinsert_date as timestamp,\n\t\tpk_vessel_type_group as double,\n\t\tupdate_date as timestamp,\n\t\tvsl_cefor_group as string,\n\t\tvsl_desc as string,\n\t\tvsl_gard_group as string,\n\t\tvsl_marine_group as string,\n\t\tvsl_risk_group as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> StaVesselTypeGroup\nsource(output(\n\t\tdeductible_days as double,\n\t\tindemnity_days as double,\n\t\tindemnity_days_in_all as double,\n\t\tinserted_by as string,\n\t\tinserted_date as timestamp,\n\t\tpk_loh_scale as double,\n\t\tscale as double,\n\t\tupdated_by as string,\n\t\tupdated_date as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> staLohScale\ntcrossreference filter(source_system == 'PARIS' && code_type_id == 136) ~> deductibleRule\ndeductibleRule select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_deductibleRule' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefDeductibleRule\nica select(mapColumn(\n\t\teach(match(in(['icaicaid','icastdate','icaourshare','icaeoamt'],name)),\n\t\t\t$$+'_dedRule' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> icatableDedRule\nicatableDedRule derive(icastdate_exchange = case(icastdate_dedRule > currentTimestamp(), currentTimestamp(), icastdate_dedRule)) ~> DeriveIcastdateExchange\nJoinIfaxCrossDeductible, HlpExchrateUSD join(icastdate_exchange == EXCHANGE_FROM_DATE_dedRule\n\t&& coalesce(ifadedcurr,'USD') == FROM_CURRENCY_CODE_dedRule,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIcaExcharate\nDeriveIcastdateExchange, ifatable join(icaicaid_dedRule == ifaicaid,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> JoinIcaIfa\nJoinIcaIfa, xrefDeductibleRule join(ifadedcd3 == source_code_key_deductibleRule,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIfaxCrossDeductible\nJoinIcaExcharate derive(rob_ded_amount_pa_org = case((in(['A','E','F','SRI'], target_code_deductibleRule)),ifadedamt,toDecimal(0)),\n\t\trob_ded_amount_pa_curr = case((in(['A','E','F','SRI'], target_code_deductibleRule)),ifadedcurr,null()+''),\n\t\trob_ded_amount_pa_usd = case((in(['A','E','F','SRI'], target_code_deductibleRule)),coalesce(ifadedamt/EXCHANGE_RATE_dedRule, 0),toDecimal(0)),\n\t\trob_ded_amount_amd_org = case((in(['B','T'], target_code_deductibleRule)),ifadedamt,toDecimal(0)),\n\t\trob_ded_amount_amd_curr = case((in(['B','T'], target_code_deductibleRule)),ifadedcurr,null()+''),\n\t\trob_ded_amount_amd_usd = case((in(['B','T'], target_code_deductibleRule)),coalesce(ifadedamt/EXCHANGE_RATE_dedRule,0), toDecimal(0)),\n\t\trob_ded_amount_rdc_org = case((in(['C'], target_code_deductibleRule)),ifadedamt, toDecimal(0)),\n\t\trob_ded_amount_rdc_curr = case((in(['C'], target_code_deductibleRule)),trim(ifadedcurr),null()+''),\n\t\trob_ded_amount_rdc_usd = case((in(['C'], target_code_deductibleRule)),coalesce(ifadedamt/EXCHANGE_RATE_dedRule, 0),toDecimal(0)),\n\t\trob_ded_amount_ice_org = case((in(['D'], target_code_deductibleRule)),ifadedamt,toDecimal(0)),\n\t\trob_ded_amount_ice_curr = case((in(['D'], target_code_deductibleRule)),trim(ifadedcurr),null()+''),\n\t\trob_ded_amount_ice_usd = case((in(['D'], target_code_deductibleRule)),coalesce(ifadedamt/EXCHANGE_RATE_dedRule, 0),toDecimal(0)),\n\t\trob_ded_days_indemnity = case((in(['503','203'], ifadedcd3)),ifadays,toDecimal(0)),\n\t\trob_ded_days_in_all = case((in(['204'], ifadedcd3)),ifadays,toDecimal(0)),\n\t\trob_ded_days = case((in(['202','401','208'], ifadedcd3)),ifadays,toDecimal(0)),\n\t\trob_ded_days_machinery = case((in(['205'], ifadedcd3)),ifadays,toDecimal(0)),\n\t\trob_ded_layer = case(ifadedcd3 =='202','MAIN',\n    case(ifadedcd3 =='208', 'XS', \n        case(ifadedcd3 =='207', 'VARY', 'N/A'))),\n\t\trob_ded_daily_indemnity = case((in(['201','206','909','207','209'], ifadedcd3)),ifadedamt,toDecimal(0)),\n\t\trob_ded_daily_indemnity_curr = case((in(['201','206','909','207','209'], ifadedcd3)),ifadedcurr,null()+''),\n\t\trob_ded_daily_indemnity_usd = case((in(['201','206','909','207','209'], ifadedcd3)),coalesce(ifadedamt/EXCHANGE_RATE_dedRule,0),toDecimal(0)),\n\t\texcess_of_amt_org = case(coalesce(icaeoamt_dedRule,0)>0, icaeoamt_dedRule*icaourshare_dedRule/100, toDecimal(0)),\n\t\texcess_of_amt_usd = case(coalesce(icaeoamt_dedRule,0)>0, (icaeoamt_dedRule*icaourshare_dedRule/100)/EXCHANGE_RATE_dedRule, toDecimal(0))) ~> DerivedColumns\nDerivedColumns aggregate(groupBy(icaicaid_dedRule),\n\teach(match(startsWith(name,'rob')&&endsWith(name,'usd')), $$ = sum($$)),\n\t\teach(match(startsWith(name,'rob')&&endsWith(name,'curr')), $$ = max($$)),\n\t\teach(match(startsWith(name,'rob')&&endsWith(name,'org')), $$ = sum($$)),\n\t\trob_ded_days_indemnity = sum(rob_ded_days_indemnity),\n\t\trob_ded_days = sum(rob_ded_days),\n\t\trob_ded_days_in_all = sum(rob_ded_days_in_all),\n\t\trob_ded_days_machinery = sum(rob_ded_days_machinery),\n\t\trob_ded_daily_indemnity = sum(rob_ded_daily_indemnity),\n\t\trob_ded_layer = max(rob_ded_layer),\n\t\texcess_of_amt_org = max(excess_of_amt_org),\n\t\texcess_of_amt_usd = max(excess_of_amt_usd)) ~> Aggregate\ntcrossreference filter(source_system == 'PARIS' && code_type_id == 122) ~> coverage\ncoverage select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_coverage' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCoverage\nAggregate derive(rob_ded_amount_pa_usd = excess_of_amt_usd + rob_ded_amount_pa_usd,\n\t\trob_ded_amount_pa_org = excess_of_amt_org + rob_ded_amount_pa_org,\n\t\trob_ded_amount_amd_org = case(coalesce(rob_ded_amount_amd_org,0)==0, 0, toInteger(rob_ded_amount_amd_org)),\n\t\trob_ded_amount_amd_usd = case(coalesce(rob_ded_amount_amd_usd,0)==0, 0, toInteger(rob_ded_amount_amd_usd)),\n\t\trob_ded_amount_amd_curr = case(isNull(trim(rob_ded_amount_amd_curr)), null()+0, toInteger(rob_ded_amount_amd_curr)),\n\t\trob_ded_days_machinery = case(coalesce(rob_ded_days_machinery, 0)==0, rob_ded_days, rob_ded_days_machinery)) ~> DeriveRobDedAmountColumns\nica select(mapColumn(\n\t\teach(match(in(['icaicaid','icaourshare'],name)),\n\t\t\t$$+'_lineInfo' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> icatableLineInfo\niuv, icatableLineInfo join(iuvicaid == icaicaid_lineInfo,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> iuvica\niuvica, iuwtable join(iuviuvid == iuwiuvid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> iuviuw\niuviuw, peatable join(iuwpartisip == peapeaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> iuwpea\niuwpea derive(own_share = case(peaccode == 91, coalesce(iuwshare, 0), toDecimal(0)),\n\t\tcut_share = case(peaccode == 92, coalesce(iuwshare, 0), toDecimal(0)),\n\t\tco_share = case(!in([91,92], peaccode),\n    case(iuwoutbusntyp ==2, coalesce(iuwshare,0), toDecimal(0)),toDecimal(0)),\n\t\tre_share = case(!in([91,92], peaccode),\n    case(iuwoutbusntyp == 3, coalesce(iuwshare, 0), toDecimal(0)),toDecimal(0))) ~> DeriveShareColumns\nDeriveShareColumns aggregate(groupBy(icaicaid_lineInfo),\n\ticaourshare_lineInfo = max(icaourshare_lineInfo),\n\t\tret_share = sum(own_share),\n\t\tcut_share = sum(cut_share),\n\t\tco_share = sum(co_share),\n\t\tre_share = sum(re_share)) ~> AggregateLineInfo\nAggregateLineInfo derive(rob_re_line = coalesce(re_share*icaourshare_lineInfo/100, 0),\n\t\trob_ret_line = coalesce(ret_share*icaourshare_lineInfo/100, 0),\n\t\trob_co_line = coalesce(co_share*icaourshare_lineInfo/100, 0),\n\t\trob_cut_line = coalesce(cut_share*icaourshare_lineInfo/100, 0)) ~> DeriveRobLineColumns\ntcrossreference filter(source_system == 'PARIS' && code_type_id == 113) ~> agreementType\nagreementType select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_agreementType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefAgreementType\ntcrossreference filter(source_system == 'PARIS' && code_type_id == 106) ~> businessArea\nbusinessArea select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_businessArea' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefBusinessArea\ntcrossreference filter(source_system == 'PARIS' && code_type_id == 124) ~> currency\ncurrency select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_currency' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCurrency\ntcrossreference filter(source_system == 'PARIS' && code_type_id == 45) ~> vesselSubType\nvesselSubType select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_vesselSubType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefVesselSubType\nobb select(mapColumn(\n\t\teach(match(in(['obbobno','obbstdate','obbendate','obbname','obbbuiltyear','obbvescod','obbcefoty','obbgrt','obbdwt','obbformt','obbclass','obbsocity','obbvesisolan','obbnoofpax','obbadr1'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbtable\noba select(mapColumn(\n\t\teach(match(in(['obaobno','obaimono','obacallno','obaorgbui'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obatable\nica derive(icastdate_exchange = case(icastdate > currentTimestamp(), currentTimestamp(), icastdate)) ~> DerivedIcaStdateExchange\nStaVesselTypeGroup select(mapColumn(\n\t\teach(match(in(['fp_level_5_code','vsl_gard_group','fp_level_5_decode','fp_3_ltr_code','group_code'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> vesselTypeGroup\nDeriveRobLineColumns select(mapColumn(\n\t\ticaicaid_lineInfo,\n\t\trob_re_line,\n\t\trob_ret_line,\n\t\trob_co_line,\n\t\trob_cut_line\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LineInfo\nDeriveRobDedAmountColumns select(mapColumn(\n\t\ticaicaid_dedRule,\n\t\trob_ded_amount_pa_usd,\n\t\trob_ded_amount_amd_usd,\n\t\trob_ded_amount_rdc_usd,\n\t\trob_ded_amount_ice_usd,\n\t\trob_ded_daily_indemnity_usd,\n\t\trob_ded_amount_pa_curr,\n\t\trob_ded_amount_amd_curr,\n\t\trob_ded_amount_rdc_curr,\n\t\trob_ded_amount_ice_curr,\n\t\trob_ded_daily_indemnity_curr,\n\t\trob_ded_amount_pa_org,\n\t\trob_ded_amount_amd_org,\n\t\trob_ded_amount_rdc_org,\n\t\trob_ded_amount_ice_org,\n\t\trob_ded_days_indemnity,\n\t\trob_ded_days,\n\t\trob_ded_days_in_all,\n\t\trob_ded_days_machinery,\n\t\trob_ded_daily_indemnity,\n\t\trob_ded_layer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DedRule\nDerivedIcaStdateExchange, DedRule join(icaicaid == icaicaid_dedRule,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIcaDedRule\nJoinIcaDedRule, obatable join(icaobno == obaobno,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIcaOba\nJoinIcaOba, obbtable join(obaobno == obbobno,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinObaObb\nJoinObaObb, xrefVesselSubType join(trim(upper(obbcefoty)) == trim(upper(source_code_key_vesselSubType)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinObbXrefVesselSubType\nJoinObbXrefVesselSubType, vesselTypeGroup join(target_code_vesselSubType == fp_3_ltr_code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinxRefVesselSubTypeVesselType\nJoinxRefVesselSubTypeVesselType, inatable join(icainaid == inainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcaIna\nJoinIcaIna, agatable join(icaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIcaAga\nJoinIcaAga, xrefCurrency join(case(inaintrst == '80', coalesce(icapmlcurr, 'USD'), inacurr) == source_code_key_currency,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinInaXrefCurr\nJoinInaXrefCurr, HlpExchrateUSD join(target_code_currency == FROM_CURRENCY_CODE,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinxrefCurrExchrateUSD\nJoinxrefCurrExchrateUSD, LineInfo join(icaicaid == icaicaid_lineInfo,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIcaLineInfo\nJoinIcaLineInfo, xrefBusinessArea join(case(substring(toString(agabusndiv), 1, 1) =='4', toString(agabusndiv)+' - '+inamutual, toString(agabusndiv)) == source_code_key_businessArea,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAgaxRefBusinessArea\nJoinAgaxRefBusinessArea, xrefAgreementType join(toString(agabusncla) == source_code_key_agreementType,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAgaXrefAgreementType\nJoinAgaXrefAgreementType, xrefCoverage join(inaintrst == source_code_key_coverage,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinInaXrefCoverage\nJoinInaXrefCoverage, isatable join(agaagaid == isaagaid\n\t&& inaisaid == isaisaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinAgaIsa\nJoinAgaIsa, isztable join(isaisaid == isziszid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinIsaIsz\nJoinIsaIsz, ipatable join(icaicaid == ipaicaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinInaIpa\nJoinInaIpa filter(((icaendate >= coalesce(obbstdate, addDays(currentTimestamp(),-365000))) && (icaendate <= coalesce(obbstdate, addDays(currentTimestamp(),365000)))) &&\nicastdate_exchange == EXCHANGE_FROM_DATE) ~> FilterDates\nFilterDates, staLohScale lookup(lpad(toString(rob_ded_days_indemnity), 10, '0') + lpad(toString(rob_ded_days_in_all), 10, '0') + lpad(toString(rob_ded_days), 10, '0') == lpad(toString(indemnity_days), 10, '0') + lpad(toString(indemnity_days_in_all), 10, '0') + lpad(toString(deductible_days), 10, '0'),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupStaLohScale\nLookupStaLohScale derive(last_updated_by = 'M_PRE_DIM_RISK_OBJECT_ME') ~> DeriveLastUpdated\nHlpExchrateUSD select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_dedRule' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateusdDedRule"
		}
	}
}