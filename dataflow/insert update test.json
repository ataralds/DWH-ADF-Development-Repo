{
	"name": "insert update test",
	"properties": {
		"folder": {
			"name": "perben"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "test1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "test2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "test2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\tdate_inserted as timestamp,\n\t\tdate_last_updated as timestamp,\n\t\tintint as integer,\n\t\tcharchar as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource1 split(isNull(date_inserted)==true(),\n\tdisjoint: false) ~> ConditionalSplit1@(en, to)\nConditionalSplit1@en derive(date_inserted = currentTimestamp(),\n\t\tdate_last_updated = currentTimestamp()) ~> DerivedColumn1\nConditionalSplit1@to derive(date_last_updated = currentTimestamp()) ~> DerivedColumn2\nDerivedColumn2 alterRow(updateIf(isNull(date_inserted)==false())) ~> AlterRow1\nSelect1 alterRow(insertIf(isNull(date_inserted)==true())) ~> AlterRow2\nDerivedColumn1 keyGenerate(output(intint as long),\n\tstartAt: 100L) ~> SurrogateKey1\nSurrogateKey1 select(mapColumn(\n\t\tdate_inserted,\n\t\tdate_last_updated,\n\t\tcharchar,\n\t\tintint = SurrogateKey1@intint\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAlterRow2 sink(input(\n\t\tdate_inserted as timestamp,\n\t\tdate_last_updated as timestamp,\n\t\tintint as integer,\n\t\tcharchar as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nAlterRow1 sink(input(\n\t\tdate_inserted as timestamp,\n\t\tdate_last_updated as timestamp,\n\t\tintint as integer,\n\t\tcharchar as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['intint'],\n\tformat: 'table',\n\tmapColumn(\n\t\tdate_inserted,\n\t\tdate_last_updated,\n\t\tintint,\n\t\tcharchar\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
		}
	}
}