{
	"name": "m_dim_vessel_type_group",
	"properties": {
		"folder": {
			"name": "marts/dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "VesselTypeGroup"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "LlyodsVessel"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tcross"
				}
			],
			"sinks": [
				{
					"name": "DimVesselTyprGroup"
				}
			],
			"transformations": [
				{
					"name": "Deduplicator"
				},
				{
					"name": "VesselType"
				},
				{
					"name": "VesselTypeCode"
				},
				{
					"name": "xrefvesseltype"
				},
				{
					"name": "VesselTypeCrossRef"
				},
				{
					"name": "CodeType"
				},
				{
					"name": "onlycrossref"
				},
				{
					"name": "notInVslTypeGrp"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "notin"
				},
				{
					"name": "finalunion"
				},
				{
					"name": "vesseltypegroupselected"
				},
				{
					"name": "DefaultNull"
				},
				{
					"name": "renamingcolumns"
				},
				{
					"name": "DeriveTopLevels"
				},
				{
					"name": "AlterRow"
				}
			],
			"script": "source(output(\n\t\tvtg_key as string,\n\t\tvtg_main_group_level_1_sort as string,\n\t\tvtg_main_group_level_2_code as short,\n\t\tvtg_description as string,\n\t\tvtg_main_group_level_2_desc as string,\n\t\tvtg_main_group_level_1_desc as string,\n\t\tvtg_main_group_level_1_code as short,\n\t\tvtg_main_group_level_2_sort as string,\n\t\tdate_last_updated as timestamp,\n\t\tdate_inserted as timestamp,\n\t\tlast_updated_by as string,\n\t\tinserted_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_prepare.pre_dim_vessel_type_group',\n\tformat: 'query') ~> VesselTypeGroup\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LlyodsVessel\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tcross\nLlyodsVessel aggregate(groupBy(vessel_type,\n\t\tvessel_type_code),\n\tvessel_types = first(vessel_type)) ~> Deduplicator\ntcross filter(CODE_TYPE_ID == 45) ~> VesselType\nDeduplicator select(mapColumn(\n\t\tvessel_type_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> VesselTypeCode\nVesselType select(mapColumn(\n\t\tTarget_Code_vessel_type = TARGET_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefvesseltype\nVesselTypeCode, xrefvesseltype union(byName: false)~> VesselTypeCrossRef\nVesselTypeGroup select(mapColumn(\n\t\tfp_3_ltr_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CodeType\nVesselTypeCrossRef, CodeType join(vessel_type_code == fp_3_ltr_code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> onlycrossref\nonlycrossref filter(iif(isNull(fp_3_ltr_code),1,0) == 1) ~> notInVslTypeGrp\nnotInVslTypeGrp derive(NA = 'N/A',\n\t\tnot_applicable = 'Not Applicable',\n\t\tconst_number = toInteger(null())) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tvessel_type_code,\n\t\tfp_level_5_code = NA,\n\t\tfp_level_5_decode = not_applicable,\n\t\tfp_level_5_desc = not_applicable,\n\t\tfp_level_5_hull = const_number,\n\t\tfp_level_5_sub = NA,\n\t\tvsl_cefor_group = not_applicable,\n\t\tvsl_desc = not_applicable,\n\t\tvsl_gard_group = NA,\n\t\tvsl_marine_group = not_applicable,\n\t\tvsl_risk_group = NA,\n\t\tvsl_group1 = const_number,\n\t\tvsl_group1_desc = not_applicable,\n\t\tvsl_group1_sort = not_applicable,\n\t\tvsl_group2 = const_number,\n\t\tvsl_group2_desc = not_applicable,\n\t\tvsl_group2_sort = not_applicable,\n\t\tvsl_group3 = const_number,\n\t\tvsl_group3_desc = not_applicable,\n\t\tvsl_group3_sort = not_applicable,\n\t\tvsl_group4 = const_number,\n\t\tvsl_group4_desc = not_applicable,\n\t\tvsl_group4_sort = not_applicable,\n\t\tvsl_group5 = const_number,\n\t\tvsl_group5_desc = not_applicable,\n\t\tvsl_group5_sort = not_applicable,\n\t\tvsl_groupIV = const_number,\n\t\tvsl_groupIV_desc = not_applicable,\n\t\tvsl_groupIV_sort = not_applicable,\n\t\tvsl_groupLOH = const_number,\n\t\tvsl_groupLOH_desc = not_applicable,\n\t\tvsl_groupLOH_sort = not_applicable,\n\t\tvsl_size_group_code = not_applicable,\n\t\tfp_Lvl4_code = NA,\n\t\tfp_Lvl4_Group = const_number,\n\t\tfp_group_Lvl4_decode = not_applicable,\n\t\tfp_Lvl3_code = NA,\n\t\tfp_Lvl3_Group = const_number,\n\t\tfp_Lvl3_decode = not_applicable,\n\t\tvessel_gard_group = NA\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> notin\nvesseltypegroupselected, notin union(byName: false)~> finalunion\nVesselTypeGroup select(mapColumn(\n\t\tfp_3_ltr_code,\n\t\tfp_level_5_code,\n\t\tfp_level_5_decode,\n\t\tfp_level_5_desc,\n\t\tfp_level_5_hull,\n\t\tfp_level_5_sub,\n\t\tvsl_cefor_group,\n\t\tvsl_desc,\n\t\tvsl_gard_group,\n\t\tvsl_marine_group,\n\t\tvsl_risk_group,\n\t\tvsl_group1,\n\t\tvsl_group1_desc,\n\t\tvsl_group1_sort,\n\t\tvsl_group2,\n\t\tvsl_group2_desc,\n\t\tvsl_group2_sort,\n\t\tvsl_group3,\n\t\tvsl_group3_desc,\n\t\tvsl_group3_sort,\n\t\tvsl_group4,\n\t\tvsl_group4_desc,\n\t\tvsl_group4_sort,\n\t\tvsl_group5,\n\t\tvsl_group5_desc,\n\t\tvsl_group5_sort,\n\t\tvsl_groupIV,\n\t\tvsl_groupIV_desc,\n\t\tvsl_groupIV_sort,\n\t\tvsl_groupLOH,\n\t\tvsl_groupLOH_desc,\n\t\tvsl_groupLOH_sort,\n\t\tvsl_size_group_code = group_code_Size,\n\t\tfp_Lvl4_code,\n\t\tfp_Lvl4_Group,\n\t\tfp_group_Lvl4_decode = group_Lvl4_decode,\n\t\tfp_Lvl3_code = group_Lvl3_decode,\n\t\tfp_Lvl3_Group = Fp_Lvl3_Group,\n\t\tfp_Lvl3_decode = group_desc_Lvl3,\n\t\tVessel_Gard_Group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> vesseltypegroupselected\nfinalunion derive(fp_3_ltr_code = iifNull(trim(fp_3_ltr_code),'N/A'),\n\t\tfp_level_5_code = iifNull(trim(fp_level_5_code),'N/A'),\n\t\tfp_level_5_decode = iifNull(trim(fp_level_5_decode),'N/A'),\n\t\tfp_level_5_desc = iifNull(trim(fp_level_5_desc),'N/A'),\n\t\tfp_level_5_hull = iifNull(fp_level_5_hull,0),\n\t\tfp_level_5_sub = iifNull(trim(fp_level_5_sub),'N/A'),\n\t\tvsl_cefor_group = iifNull(trim(vsl_cefor_group),'N/A'),\n\t\tvsl_desc = iifNull(trim(vsl_desc),'N/A'),\n\t\tvsl_gard_group = iifNull(trim(vsl_gard_group),'N/A'),\n\t\tvsl_marine_group = iifNull(trim(vsl_marine_group),'N/A'),\n\t\tvsl_risk_group = iifNull(trim(vsl_risk_group),'N/A'),\n\t\tvsl_group1 = iifNull((vsl_group1),0),\n\t\tvsl_group1_desc = iifNull(trim(vsl_group1_desc),'N/A'),\n\t\tvsl_group1_sort = iifNull(trim(vsl_group1_sort),'N/A'),\n\t\tvsl_group2 = iifNull((vsl_group2),0),\n\t\tvsl_group2_desc = iifNull(trim(vsl_group2_desc),'N/A'),\n\t\tvsl_group2_sort = iifNull(trim(vsl_group2_sort),'N/A'),\n\t\tvsl_group3 = iifNull((vsl_group3),0),\n\t\tvsl_group3_desc = iifNull(trim(vsl_group3_desc),'N/A'),\n\t\tvsl_group3_sort = iifNull(trim(vsl_group3_sort),'N/A'),\n\t\tvsl_group4 = iifNull((vsl_group4),0),\n\t\tvsl_group4_desc = iifNull(trim(vsl_group4_desc),'N/A'),\n\t\tvsl_group4_sort = iifNull(trim(vsl_group4_sort),'N/A'),\n\t\tvsl_group5 = iifNull((vsl_group5),0),\n\t\tvsl_group5_desc = iifNull(trim(vsl_group5_desc),'N/A'),\n\t\tvsl_group5_sort = iifNull(trim(vsl_group5_sort),'N/A'),\n\t\tvsl_groupIV = iifNull(vsl_groupIV,0),\n\t\tvsl_groupIV_desc = iifNull(trim(vsl_groupIV_desc),'N/A'),\n\t\tvsl_groupIV_sort = iifNull(trim(vsl_groupIV_sort),'N/A'),\n\t\tvsl_groupLOH = iifNull(vsl_groupLOH,0),\n\t\tvsl_groupLOH_desc = iifNull(trim(vsl_groupLOH_desc),'N/A'),\n\t\tvsl_groupLOH_sort = iifNull(trim(vsl_groupLOH_sort),'N/A'),\n\t\tvsl_size_group_code = iifNull(trim(vsl_size_group_code),'N/A'),\n\t\tfp_Lvl4_code = iifNull(trim(fp_Lvl4_code),'N/A'),\n\t\tfp_Lvl4_Group = iifNull(fp_Lvl4_Group,0),\n\t\tfp_group_Lvl4_decode = iifNull(trim(fp_group_Lvl4_decode),'N/A'),\n\t\tfp_Lvl3_code = iifNull(trim(fp_Lvl3_code),'N/A'),\n\t\tfp_Lvl3_Group = iifNull((fp_Lvl3_Group),0),\n\t\tfp_Lvl3_decode = iifNull(trim(fp_Lvl3_decode),'N/A'),\n\t\tVessel_Gard_Group = iifNull(trim(vsl_gard_group),'N/A')) ~> DefaultNull\nDefaultNull select(mapColumn(\n\t\tgrp_vessel_type_code_3ltr = fp_3_ltr_code,\n\t\tgrp_fp_level_5_code = fp_level_5_code,\n\t\tgrp_fp_level_5_decode = fp_level_5_decode,\n\t\tgrp_fp_level_5_desc = fp_level_5_desc,\n\t\tgrp_fp_level_5_hull = fp_level_5_hull,\n\t\tgrp_fp_level_5_sub = fp_level_5_sub,\n\t\tgrp_vsl_cefor_group = vsl_cefor_group,\n\t\tgrp_vsl_desc = vsl_desc,\n\t\tgrp_vsl_gard_group = vsl_gard_group,\n\t\tgrp_vsl_marine_group = vsl_marine_group,\n\t\tgrp_vsl_risk_group = vsl_risk_group,\n\t\tgrp_vsl_group1 = vsl_group1,\n\t\tgrp_vsl_group1_desc = vsl_group1_desc,\n\t\tgrp_vsl_group1_sort = vsl_group1_sort,\n\t\tgrp_vsl_group2 = vsl_group2,\n\t\tgrp_vsl_group2_desc = vsl_group2_desc,\n\t\tgrp_vsl_group2_sort = vsl_group2_sort,\n\t\tgrp_vsl_group3 = vsl_group3,\n\t\tgrp_vsl_group3_desc = vsl_group3_desc,\n\t\tgrp_vsl_group3_sort = vsl_group3_sort,\n\t\tgrp_vsl_group4 = vsl_group4,\n\t\tgrp_vsl_group4_desc = vsl_group4_desc,\n\t\tgrp_vsl_group4_sort = vsl_group4_sort,\n\t\tgrp_vsl_group5 = vsl_group5,\n\t\tgrp_vsl_group5_desc = vsl_group5_desc,\n\t\tgrp_vsl_group5_sort = vsl_group5_sort,\n\t\tgrp_vsl_groupIV = vsl_groupIV,\n\t\tgrp_vsl_groupIV_desc = vsl_groupIV_desc,\n\t\tgrp_vsl_groupIV_sort = vsl_groupIV_sort,\n\t\tgrp_vsl_groupLOH = vsl_groupLOH,\n\t\tgrp_vsl_groupLOH_desc = vsl_groupLOH_desc,\n\t\tgrp_vsl_groupLOH_sort = vsl_groupLOH_sort,\n\t\tgrp_vsl_size_group_code = vsl_size_group_code,\n\t\tgrp_fp_Lvl4_code = fp_Lvl4_code,\n\t\tgrp_fp_Lvl4_Group = fp_Lvl4_Group,\n\t\tgrp_fp_group_Lvl4_decode = fp_group_Lvl4_decode,\n\t\tgrp_fp_Lvl3_code = fp_Lvl3_code,\n\t\tgrp_fp_Lvl3_Group = fp_Lvl3_Group,\n\t\tgrp_fp_Lvl3_decode = fp_Lvl3_decode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renamingcolumns\nrenamingcolumns derive(top_key = 'ALL',\n\t\ttop_description = 'All Source Systems') ~> DeriveTopLevels\nDeriveTopLevels alterRow(upsertIf(iifNull(grp_vessel_type_code_3ltr,'A')!='A')) ~> AlterRow\nAlterRow sink(skipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimVesselTyprGroup"
		}
	}
}