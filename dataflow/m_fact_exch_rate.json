{
	"name": "m_fact_exch_rate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stage_hlp_exchange_rate",
						"type": "DatasetReference"
					},
					"name": "hlpExchRate"
				},
				{
					"dataset": {
						"referenceName": "dim_currency",
						"type": "DatasetReference"
					},
					"name": "dimCurrency"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "dimTime"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fact_exchange_rate",
						"type": "DatasetReference"
					},
					"name": "fact_exchange_rate"
				}
			],
			"transformations": [
				{
					"name": "LkpCurFrom"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "LkpCurTo"
				},
				{
					"name": "SelectRelevantColumns"
				},
				{
					"name": "LkpExchDate"
				},
				{
					"name": "SelectToReduceCol"
				},
				{
					"name": "Deduplicator"
				},
				{
					"name": "AlterRowUpsert"
				}
			],
			"script": "source(output(\n\t\tcurrency_code_from as string,\n\t\tcurrency_code_to as string,\n\t\tcurrency_id_from as decimal(38,18),\n\t\tcurrency_id_to as decimal(38,18),\n\t\tday as timestamp,\n\t\trate as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> hlpExchRate\nsource(output(\n\t\tdim_key as long,\n\t\ttop_code as string,\n\t\ttop_description as string,\n\t\tcur_code as string,\n\t\tcur_description as string,\n\t\tcurr_last_exchange_rate_to_usd as decimal(12,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> dimCurrency\nsource(output(\n\t\taccounting_month_end_date as timestamp,\n\t\taccounting_month_id as double,\n\t\taccounting_month_key as decimal(38,18),\n\t\taccounting_month_of_quarter as double,\n\t\taccounting_month_of_year as double,\n\t\taccounting_month_start_date as timestamp,\n\t\taccounting_month_time_span as double,\n\t\taccounting_qtr_end_date as timestamp,\n\t\taccounting_qtr_of_year as double,\n\t\taccounting_qtr_start_date as timestamp,\n\t\taccounting_qtr_time_span as double,\n\t\taccounting_quarter_id as double,\n\t\taccounting_quarter_key as decimal(38,18),\n\t\taccounting_year_end_date as timestamp,\n\t\taccounting_year_id as double,\n\t\taccounting_year_key as decimal(38,18),\n\t\taccounting_year_number as double,\n\t\taccounting_year_start_date as timestamp,\n\t\taccounting_year_time_span as double,\n\t\tall_years as string,\n\t\tcalendar_date_id as double,\n\t\tcalendar_date_key as timestamp,\n\t\tday as timestamp,\n\t\tday_name as string,\n\t\tday_of_accounting_month as double,\n\t\tday_of_accounting_quarter as double,\n\t\tday_of_accounting_year as double,\n\t\tday_of_policy_month as double,\n\t\tday_of_policy_quarter as double,\n\t\tday_of_policy_year as double,\n\t\tday_of_underwriting_month as double,\n\t\tday_of_underwriting_quarter as double,\n\t\tday_of_underwriting_year as double,\n\t\tdimension_key as double,\n\t\tpolicy_month_end_date as timestamp,\n\t\tpolicy_month_id as double,\n\t\tpolicy_month_key as decimal(38,18),\n\t\tpolicy_month_name as string,\n\t\tpolicy_month_of_quarter as double,\n\t\tpolicy_month_of_year as double,\n\t\tpolicy_month_start_date as timestamp,\n\t\tpolicy_month_time_span as double,\n\t\tpolicy_qtr_end_date as timestamp,\n\t\tpolicy_qtr_of_year as double,\n\t\tpolicy_qtr_start_date as timestamp,\n\t\tpolicy_qtr_time_span as double,\n\t\tpolicy_quarter_id as double,\n\t\tpolicy_quarter_key as decimal(38,18),\n\t\tpolicy_year_end_date as timestamp,\n\t\tpolicy_year_id as double,\n\t\tpolicy_year_key as decimal(38,18),\n\t\tpolicy_year_number as double,\n\t\tpolicy_year_start_date as timestamp,\n\t\tpolicy_year_time_span as double,\n\t\ttop_id as double,\n\t\ttop_key as decimal(38,18),\n\t\tunderwriting_month_end_date as timestamp,\n\t\tunderwriting_month_id as double,\n\t\tunderwriting_month_key as decimal(38,18),\n\t\tunderwriting_month_of_quarter as double,\n\t\tunderwriting_month_of_year as double,\n\t\tunderwriting_month_start_date as timestamp,\n\t\tunderwriting_month_time_span as double,\n\t\tunderwriting_qtr_end_date as timestamp,\n\t\tunderwriting_qtr_of_year as double,\n\t\tunderwriting_qtr_start_date as timestamp,\n\t\tunderwriting_qtr_time_span as double,\n\t\tunderwriting_quarter_id as double,\n\t\tunderwriting_quarter_key as decimal(38,18),\n\t\tunderwriting_year_end_date as timestamp,\n\t\tunderwriting_year_id as double,\n\t\tunderwriting_year_key as decimal(38,18),\n\t\tunderwriting_year_number as double,\n\t\tunderwriting_year_start_date as timestamp,\n\t\tunderwriting_year_time_span as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> dimTime\nhlpExchRate, dimCurrency lookup(currency_code_from == cur_code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpCurFrom\nLkpCurFrom select(mapColumn(\n\t\tday,\n\t\trate,\n\t\tcur_dim_key_from = dim_key,\n\t\teach(match(startsWith(name,'currency_')),\n\t\t\t'source_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nSelectColumns, dimCurrency lookup(source_currency_code_to == cur_code,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpCurTo\nLkpCurTo select(mapColumn(\n\t\tsource_day = day,\n\t\tsource_rate = rate,\n\t\tcur_dim_key_from,\n\t\tsource_currency_code_from,\n\t\tsource_currency_code_to,\n\t\tsource_currency_id_from,\n\t\tsource_currency_id_to,\n\t\tcur_dim_key_to = dim_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelevantColumns\nSelectRelevantColumns, dimTime lookup(source_day == day,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpExchDate\nLkpExchDate select(mapColumn(\n\t\tdim_time = dimension_key,\n\t\texchange_rate = source_rate,\n\t\tdim_currency_from = cur_dim_key_from,\n\t\tdim_currency_to = cur_dim_key_to,\n\t\tfrom_currency_code = source_currency_code_from,\n\t\tto_currency_code = source_currency_code_to,\n\t\texchange_date = day\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectToReduceCol\nSelectToReduceCol aggregate(groupBy(dim_time,\n\t\texchange_rate,\n\t\tdim_currency_from,\n\t\tdim_currency_to,\n\t\tfrom_currency_code,\n\t\tto_currency_code),\n\texchange_date = first(exchange_date)) ~> Deduplicator\nDeduplicator alterRow(upsertIf((!isNull(dim_time))||(!isNull(from_currency_code))||(isNull(to_currency_code)))) ~> AlterRowUpsert\nAlterRowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['fact_exchange_rate.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fact_exchange_rate"
		}
	}
}