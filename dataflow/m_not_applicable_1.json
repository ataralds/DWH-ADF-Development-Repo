{
	"name": "m_not_applicable_1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dwh_stage_t_not_applicable",
						"type": "DatasetReference"
					},
					"name": "tNotApplicable"
				},
				{
					"dataset": {
						"referenceName": "dwh_stage_t_top_group",
						"type": "DatasetReference"
					},
					"name": "tTopGroup"
				},
				{
					"dataset": {
						"referenceName": "marts_dim_capital",
						"type": "DatasetReference"
					},
					"name": "LKPDimCapital"
				},
				{
					"dataset": {
						"referenceName": "marts_dim_capital",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "marts_dim_capital",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "marts_dim_capital",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "marts_dim_capital",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "Filter1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Union1"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "ConditionalSplit2"
				},
				{
					"name": "Lookup2"
				},
				{
					"name": "ConditionalSplit3"
				},
				{
					"name": "SurrogateKey2"
				},
				{
					"name": "Join1"
				},
				{
					"name": "DerivedColumn3"
				}
			],
			"script": "source(output(\n\t\tna_code as string,\n\t\tna_desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tNotApplicable\nsource(output(\n\t\tdimension_name as string,\n\t\ttop_key as string,\n\t\ttop_desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> tTopGroup\nsource(output(\n\t\tdimension_key as long,\n\t\ttop_id as decimal(28,10),\n\t\tcpt_number as decimal(28,10),\n\t\tcpt_key as string,\n\t\ttop_description as string,\n\t\tcpt_id as decimal(28,10),\n\t\tcpt_description as string,\n\t\ttop_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LKPDimCapital\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select max(dimension_key) as maxval from marts.dim_capital',\n\tformat: 'query') ~> source1\ntTopGroup filter(dimension_name=='dim_capital') ~> Filter1\nJoin1 derive(top_key = 'ALL',\n\t\ttop_desc = 'All Capital') ~> DerivedColumn1\nDerivedColumn1, Filter1 union(byName: true)~> Union1\nConditionalSplit2@topnotexist keyGenerate(output(dimension_key_start as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(dimension_key = ERROR_FUNCTION('dimension_key_start + ')) ~> DerivedColumn2\nUnion1 split(isNull(na_code),\n\tERROR_FUNCTION(''),\n\tdisjoint: true) ~> ConditionalSplit1@(OnlyTop, NaExist)\nConditionalSplit1@OnlyTop, LKPDimCapital lookup(ConditionalSplit1@OnlyTop@top_key == LKPDimCapital@top_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> Lookup1\nLookup1 split(isNull(LKPDimCapital@top_key),\n\tdisjoint: true) ~> ConditionalSplit2@(topnotexist, topexist)\nConditionalSplit1@NaExist, LKPDimCapital lookup(na_code == cpt_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> Lookup2\nLookup2 split(isNull(na_code),\n\tdisjoint: true) ~> ConditionalSplit3@(NaNotExist, NaExist)\nConditionalSplit3@NaNotExist keyGenerate(output(dimension_key_start as long),\n\tstartAt: 1L) ~> SurrogateKey2\ntNotApplicable, source1 join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> Join1\nSurrogateKey2 derive() ~> DerivedColumn3\nDerivedColumn2 sink(input(\n\t\tdimension_key as long,\n\t\ttop_id as decimal(28,10),\n\t\tcpt_number as decimal(28,10),\n\t\tcpt_key as string,\n\t\ttop_description as string,\n\t\tcpt_id as decimal(28,10),\n\t\tcpt_description as string,\n\t\ttop_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\ttop_description = top_desc,\n\t\ttop_key = ConditionalSplit1@OnlyTop@top_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nConditionalSplit2@topexist sink(input(\n\t\tdimension_key as long,\n\t\ttop_id as decimal(28,10),\n\t\tcpt_number as decimal(28,10),\n\t\tcpt_key as string,\n\t\ttop_description as string,\n\t\tcpt_id as decimal(28,10),\n\t\tcpt_description as string,\n\t\ttop_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2\nConditionalSplit3@NaExist sink(input(\n\t\tdimension_key as long,\n\t\ttop_id as decimal(28,10),\n\t\tcpt_number as decimal(28,10),\n\t\tcpt_key as string,\n\t\ttop_description as string,\n\t\tcpt_id as decimal(28,10),\n\t\tcpt_description as string,\n\t\ttop_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink3"
		}
	}
}