{
	"name": "m_pre_dim_claim_team",
	"properties": {
		"description": "Created by olseir, 22.06.2020. ",
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcc"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lca"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tcross"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "sUdvAgsEmployee"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "sUdvOrgunit"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_claim_team_pa",
						"type": "DatasetReference"
					},
					"name": "PreDimClaimTeam"
				}
			],
			"transformations": [
				{
					"name": "lcclca",
					"description": "Combining signature  rows from lcc and lcs"
				},
				{
					"name": "employee",
					"description": "Code_type_id = 329 (employee)  and source_system = 'PARIS' "
				},
				{
					"name": "AddKeyAndUpdatedBy"
				},
				{
					"name": "deduplicates"
				},
				{
					"name": "EmployeeViewUDV"
				},
				{
					"name": "SelectOutputColumns"
				},
				{
					"name": "AlterRow"
				},
				{
					"name": "LookupCostCenter"
				},
				{
					"name": "xrefEmployee"
				}
			],
			"script": "source(output(\n\t\tlccuwsign as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select distinct lccuwsign from dwh_stage.p_lcctable',\n\tformat: 'query') ~> lcc\nsource(output(\n\t\tlcauwsign as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select distinct lcauwsign from dwh_stage.p_lcatable',\n\tformat: 'query') ~> lca\nsource(output(\n\t\tcode_type_id as long,\n\t\tsource_system as string,\n\t\ttarget_code as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select code_type_id, source_system,  target_code, source_code_key from dwh_stage.t_crossreference',\n\tformat: 'query') ~> tcross\nsource(output(\n\t\tad_name as string,\n\t\tcostcenter as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select  ad_name, costcenter from dwh_stage.s_udv_ags_employee ',\n\tformat: 'query') ~> sUdvAgsEmployee\nsource(output(\n\t\tdescription as string,\n\t\tcc_value as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select description , cc_value from dwh_stage.s_udv_orgunit',\n\tformat: 'query') ~> sUdvOrgunit\nlcc, lca union(byName: false)~> lcclca\ntcross filter(code_type_id==329 && source_system == 'PARIS') ~> employee\nLookupCostCenter derive(PK_pre_dim_claim_team = concat('P',lccuwsign_aggr),\n\t\tlast_updated_by = 'M_PRE_DIM_CLAIM_TEAM') ~> AddKeyAndUpdatedBy\nlcclca aggregate(groupBy(lccuwsign),\n\tlccuwsign_aggr = first(lccuwsign)) ~> deduplicates\nsUdvAgsEmployee, sUdvOrgunit join(costcenter == cc_value,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> EmployeeViewUDV\nAddKeyAndUpdatedBy select(mapColumn(\n\t\tsign_lcarcsign = lccuwsign_aggr,\n\t\tsource_code_key,\n\t\ttem_key = costcenter,\n\t\ttem_description = description,\n\t\tPK_pre_dim_claim_team,\n\t\tlast_updated_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOutputColumns\nSelectOutputColumns alterRow(upsertIf(!isNull(PK_pre_dim_claim_team))) ~> AlterRow\ndeduplicates, xrefEmployee lookup(toString(lccuwsign_aggr) == source_code_key,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCostCenter\nemployee, EmployeeViewUDV join(target_code == ad_name,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> xrefEmployee\nAlterRow sink(input(\n\t\tpk_pre_dim_claim_team as string,\n\t\tdate_inserted as timestamp,\n\t\tlast_updated_by as string,\n\t\tinserted_by as string,\n\t\temp_id_main_adjuster as decimal(28,10),\n\t\ttem_description as string,\n\t\tsign_lcacrsign as string,\n\t\tdate_last_updated as timestamp,\n\t\ttem_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['pk_pre_dim_claim_team'],\n\tformat: 'table',\n\tmapColumn(\n\t\tpk_pre_dim_claim_team = PK_pre_dim_claim_team,\n\t\ttem_description,\n\t\tsign_lcacrsign = sign_lcarcsign,\n\t\ttem_key,\n\t\tlast_updated_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimClaimTeam"
		}
	}
}