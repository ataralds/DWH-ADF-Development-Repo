{
	"name": "m_pre_dim_country",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "vcrossreference"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_country",
						"type": "DatasetReference"
					},
					"name": "preDimCountry"
				}
			],
			"transformations": [
				{
					"name": "country50"
				},
				{
					"name": "area219"
				},
				{
					"name": "regionA374"
				},
				{
					"name": "region367"
				},
				{
					"name": "region219"
				},
				{
					"name": "join1xRefCountryRegion"
				},
				{
					"name": "xRefCountry50"
				},
				{
					"name": "xRefRegion219"
				},
				{
					"name": "xRefArea219"
				},
				{
					"name": "Join1"
				},
				{
					"name": "area3"
				},
				{
					"name": "Join0xRefCountryRegionA"
				},
				{
					"name": "xRefregionA374"
				},
				{
					"name": "Join0xRefCountryRegionARegion"
				},
				{
					"name": "xRefRegion367"
				},
				{
					"name": "Join0"
				},
				{
					"name": "area2"
				},
				{
					"name": "JoinCountryRegion"
				},
				{
					"name": "Join"
				},
				{
					"name": "area1"
				},
				{
					"name": "setOperation"
				},
				{
					"name": "deduplicator"
				},
				{
					"name": "expression"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tPARENT_CODE_TYPE_ID as double,\n\t\tPARENT_TARGET_CODE as string,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> vcrossreference\nvcrossreference filter(CODE_TYPE_ID==50) ~> country50\nvcrossreference filter(CODE_TYPE_ID==219) ~> area219\nvcrossreference filter(CODE_TYPE_ID==374) ~> regionA374\nvcrossreference filter(CODE_TYPE_ID==367) ~> region367\nvcrossreference filter(CODE_TYPE_ID==219) ~> region219\nxRefCountry50, xRefRegion219 join(country_parent_target_code == region_target_code\n\t&& country_parent_code_type_id == region_code_type_id,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> join1xRefCountryRegion\ncountry50 select(mapColumn(\n\t\tcountry_source_code_key = SOURCE_CODE_KEY,\n\t\tcountry_source_system = SOURCE_SYSTEM,\n\t\tcountry_target_code = TARGET_CODE,\n\t\tcountry_target_description = TARGET_DESCRIPTION,\n\t\tcountry_code_type = CODE_TYPE,\n\t\tcountry_code_type_id = CODE_TYPE_ID,\n\t\tcountry_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tcountry_parent_target_code = PARENT_TARGET_CODE,\n\t\tcountry_code2 = CODE2,\n\t\tcountry_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCountry50\nregion219 select(mapColumn(\n\t\tregion_source_code_key = SOURCE_CODE_KEY,\n\t\tregion_source_system = SOURCE_SYSTEM,\n\t\tregion_target_code = TARGET_CODE,\n\t\tregion_target_description = TARGET_DESCRIPTION,\n\t\tregion_code_type = CODE_TYPE,\n\t\tregion_code_type_id = CODE_TYPE_ID,\n\t\tregion_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tregion_parent_target_code = PARENT_TARGET_CODE,\n\t\tregion_code2 = CODE2,\n\t\tregion_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegion219\narea219 select(mapColumn(\n\t\tarea_source_code_key = SOURCE_CODE_KEY,\n\t\tarea_source_system = SOURCE_SYSTEM,\n\t\tarea_target_code = TARGET_CODE,\n\t\tarea_target_description = TARGET_DESCRIPTION,\n\t\tarea_code_type = CODE_TYPE,\n\t\tarea_code_type_id = CODE_TYPE_ID,\n\t\tarea_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tarea_parent_target_code = PARENT_TARGET_CODE,\n\t\tarea_code2 = CODE2,\n\t\tarea_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefArea219\njoin1xRefCountryRegion, xRefArea219 join(country_parent_target_code == area_target_code\n\t&& country_parent_code_type_id == area_code_type_id,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1 select(mapColumn(\n\t\tcountry_target_code,\n\t\tcountry_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> area3\nxRefCountry50, xRefregionA374 join(country_parent_code_type_id == region_A_code_type_id\n\t&& country_parent_target_code == region_A_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join0xRefCountryRegionA\nregionA374 select(mapColumn(\n\t\tregion_A_source_code_key = SOURCE_CODE_KEY,\n\t\tregion_A_source_system = SOURCE_SYSTEM,\n\t\tregion_A_target_code = TARGET_CODE,\n\t\tregion_A_target_description = TARGET_DESCRIPTION,\n\t\tregion_A_code_type = CODE_TYPE,\n\t\tregion_A_code_type_id = CODE_TYPE_ID,\n\t\tregion_A_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tregion_A_parent_target_code = PARENT_TARGET_CODE,\n\t\tregion_A_code2 = CODE2,\n\t\tregion_A_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefregionA374\nJoin0xRefCountryRegionA, xRefRegion367 join(region_A_parent_code_type_id == region_code_type_id\n\t&& region_A_parent_target_code == region_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join0xRefCountryRegionARegion\nregion367 select(mapColumn(\n\t\tregion_source_code_key = SOURCE_CODE_KEY,\n\t\tregion_source_system = SOURCE_SYSTEM,\n\t\tregion_target_code = TARGET_CODE,\n\t\tregion_target_description = TARGET_DESCRIPTION,\n\t\tregion_code_type = CODE_TYPE,\n\t\tregion_code_type_id = CODE_TYPE_ID,\n\t\tregion_parent_code_type_id = PARENT_CODE_TYPE_ID,\n\t\tregion_parent_target_code = PARENT_TARGET_CODE,\n\t\tregion_code2 = CODE2,\n\t\tregion_om_x_ref = OM_X_REF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegion367\nJoin0xRefCountryRegionARegion, xRefArea219 join(region_parent_code_type_id == area_code_type_id\n\t&& region_parent_target_code == area_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join0\nJoin0 select(mapColumn(\n\t\tcountry_target_code,\n\t\tcountry_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> area2\nxRefCountry50, xRefRegion367 join(country_parent_code_type_id == region_code_type_id\n\t&& country_parent_target_code == region_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinCountryRegion\nJoinCountryRegion, xRefArea219 join(region_parent_code_type_id == area_code_type_id\n\t&& region_parent_target_code == area_target_code,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join\nJoin select(mapColumn(\n\t\tcountry_target_code,\n\t\tcountry_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> area1\narea1, area2, area3 union(byName: true)~> setOperation\nsetOperation aggregate(groupBy(country_target_description,\n\t\tcountry_code2,\n\t\tcountry_om_x_ref,\n\t\tregion_target_code,\n\t\tregion_target_description,\n\t\tarea_target_code,\n\t\tarea_target_description),\n\tcountry_target_code = first(country_target_code)) ~> deduplicator\ndeduplicator derive(ar2_target_code = case\n(\n    compare(area_target_code,'AME')==0, area_target_code, \n    (\n        case\n        (\n            compare(area_target_code,'ASI')==0, area_target_code, \n            (\n                case\n                    (\n                        compare(area_target_code,'EUR')==0, \n                        \n                            case\n                                (\n                                    compare(region_target_code,'SCA')==0, region_target_code, area_target_code \n                                ), \n                                case\n                                    (\n                                        compare(area_target_code,'RUS')==0, 'EUR', 'OTH'\n                                    ) \n                        \n                    )\n            )\n        )\n    )\n),\n\t\tar2_target_description = case\n(\n    compare(area_target_code,'AME')==0, area_target_description, \n    (\n        case\n        (\n            compare(area_target_code,'ASI')==0, area_target_description, \n            (\n                case\n                    (\n                        compare(area_target_code,'EUR')==0, \n                        \n                            case\n                                (\n                                    compare(region_target_code,'SCA')==0, region_target_description, area_target_description \n                                ), \n                                case\n                                    (\n                                        compare(area_target_code,'RUS')==0, 'Europe', 'Other'\n                                    ) \n                        \n                    )\n            )\n        )\n    )\n),\n\t\tlast_updated_by = 'pre_dim_country',\n\t\tcon_2ltr_code = ERROR_FUNCTION(''),\n\t\tcon_country_name = ERROR_FUNCTION(''),\n\t\tcon_oecd = ERROR_FUNCTION(''),\n\t\tcon_currency_code = ERROR_FUNCTION(''),\n\t\tcon_eu = ERROR_FUNCTION('')) ~> expression\nSelect1 alterRow(upsertIf(!isNull())) ~> alterRow\nexpression select(mapColumn(\n\t\treg_code = region_target_code,\n\t\treg_description = region_target_description,\n\t\tar1_code = area_target_code,\n\t\tar1_description = area_target_description,\n\t\tar2_target_code,\n\t\tar2_target_description,\n\t\tlast_updated_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_country.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimCountry"
		}
	}
}