{
	"name": "m_pre_dim_employee",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "tcrossreference"
				},
				{
					"dataset": {
						"referenceName": "Agresso",
						"type": "DatasetReference"
					},
					"name": "UdvEmployee"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_employee",
						"type": "DatasetReference"
					},
					"name": "preDimEmployee"
				}
			],
			"transformations": [
				{
					"name": "employee"
				},
				{
					"name": "deduplicator"
				},
				{
					"name": "xrefEmployee"
				},
				{
					"name": "Expression"
				},
				{
					"name": "LkpUdvAgsEmployee"
				},
				{
					"name": "deduplicator0"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "addLastupdatedby"
				},
				{
					"name": "predimemployeetable"
				}
			],
			"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tcrossreference\nsource(output(\n\t\tEMPLOYEE_ID as string,\n\t\tCOMPANY as string,\n\t\tCOMPANY_NAME as string,\n\t\tMAIN_EMPLOYER as decimal(38,18),\n\t\tCONTRACT_TYPE as string,\n\t\tCONTRACT_DESC as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tAD_NAME as string,\n\t\tJOBPHONE as string,\n\t\tSHORTPHONE as string,\n\t\tJOBMOBILE as string,\n\t\tEMAIL as string,\n\t\tCOSTC as string,\n\t\tLAST_UPDATE as timestamp,\n\t\tPOSITION as string,\n\t\tPOSITION_TITLE as string,\n\t\tSENIORITY as string,\n\t\tSEN_TITLE as string,\n\t\tDISPLAY_NAME as string,\n\t\tOFFICE as string,\n\t\tSTATUS as string,\n\t\tSTATUS_DESC as string,\n\t\tCONTR_DATE_FROM as timestamp,\n\t\tCONTR_DATE_TO as timestamp,\n\t\tGARD_NO as decimal(38,18),\n\t\tTHE_BRIDGE as decimal(38,18),\n\t\tP_GARD_NO as decimal(38,18),\n\t\tP_THE_BRIDGE as decimal(38,18),\n\t\tNICKNAME as string,\n\t\tCOSTC_STATUS as string,\n\t\tP_MYGARD_FX as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Agresso/udv_employee.parquet']) ~> UdvEmployee\ntcrossreference filter(CODE_TYPE_ID == 329) ~> employee\nxrefEmployee aggregate(groupBy(target_description),\n\ttarget_code = first(target_code)) ~> deduplicator\nemployee select(mapColumn(\n\t\ttarget_code = TARGET_CODE,\n\t\ttarget_description = TARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefEmployee\nLkpUdvAgsEmployee derive(emp_name = substring(target_description, 1, 40)) ~> Expression\ndeduplicator, UdvEmployee lookup(target_description == AD_NAME\n\t&& 1 == MAIN_EMPLOYER,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> LkpUdvAgsEmployee\nExpression aggregate(groupBy(CONTR_DATE_TO,\n\t\tCONTR_DATE_FROM,\n\t\tEMPLOYEE_ID,\n\t\tFIRST_NAME,\n\t\tLAST_NAME,\n\t\tJOBPHONE,\n\t\tEMAIL,\n\t\tOFFICE,\n\t\temp_name),\n\ttarget_code = first(target_code)) ~> deduplicator0\npredimemployeetable alterRow() ~> alterRow\ndeduplicator0 derive(last_updated_by = 'pre_dim_employee',\n\t\tincident_team_code = '',\n\t\tincident_team_desc = '') ~> addLastupdatedby\naddLastupdatedby select(mapColumn(\n\t\tpk_key = target_code,\n\t\tagresso_em_id = EMPLOYEE_ID,\n\t\temp_first_name = FIRST_NAME,\n\t\temp_last_name = LAST_NAME,\n\t\temp_job_phone = JOBPHONE,\n\t\temp_job_email = EMAIL,\n\t\tmain_gard_office_location = OFFICE,\n\t\templ_name = emp_name,\n\t\tlast_updated_by,\n\t\tincident_team_code,\n\t\tincident_team_desc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> predimemployeetable\nalterRow sink(input(\n\t\tPK_KEY as string,\n\t\tCPT_DESCRIPTION as string,\n\t\tCPT_NUMBER as integer,\n\t\tINSERTED_BY as string,\n\t\tDATE_INSERTED as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['pre_dim_employee.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimEmployee"
		}
	}
}