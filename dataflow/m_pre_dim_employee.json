{
	"name": "m_pre_dim_employee",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "TCrossReference"
				},
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "StaSeniorClaimHandler"
				},
				{
					"dataset": {
						"referenceName": "Agresso",
						"type": "DatasetReference"
					},
					"name": "UdvEmployee"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "FilterEmployee"
				},
				{
					"name": "Deduplicator"
				},
				{
					"name": "SelectOnlyTargets"
				},
				{
					"name": "ConvertToString"
				},
				{
					"name": "JoinerDeduplicatorANDJoinerStaSeniorClaim"
				},
				{
					"name": "Expression"
				},
				{
					"name": "PrepareBeforeDeduplicator"
				},
				{
					"name": "UnionWithLookUpUdvEmployee"
				},
				{
					"name": "LkpSUdvAgsEmployee"
				},
				{
					"name": "SelectSourceAndTargets"
				},
				{
					"name": "JoinerStaSeniorClaimANDCross"
				},
				{
					"name": "SelectFromJoinerCrossSta"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> TCrossReference\nsource(output(\n\t\tFROM_CURRENCY_ID as double,\n\t\tTO_CURRENCY_ID as double,\n\t\tEXCHANGE_FROM_DATE as timestamp,\n\t\tEXCHANGE_RATE as decimal(38,18),\n\t\tEXCHANGE_TO_DATE as timestamp,\n\t\tFROM_CURRENCY_CODE as string,\n\t\tTO_CURRENCY_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> StaSeniorClaimHandler\nsource(output(\n\t\tEMPLOYEE_ID as string,\n\t\tCOMPANY as string,\n\t\tCOMPANY_NAME as string,\n\t\tMAIN_EMPLOYER as decimal(38,18),\n\t\tCONTRACT_TYPE as string,\n\t\tCONTRACT_DESC as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tAD_NAME as string,\n\t\tJOBPHONE as string,\n\t\tSHORTPHONE as string,\n\t\tJOBMOBILE as string,\n\t\tEMAIL as string,\n\t\tCOSTC as string,\n\t\tLAST_UPDATE as timestamp,\n\t\tPOSITION as string,\n\t\tPOSITION_TITLE as string,\n\t\tSENIORITY as string,\n\t\tSEN_TITLE as string,\n\t\tDISPLAY_NAME as string,\n\t\tOFFICE as string,\n\t\tSTATUS as string,\n\t\tSTATUS_DESC as string,\n\t\tCONTR_DATE_FROM as timestamp,\n\t\tCONTR_DATE_TO as timestamp,\n\t\tGARD_NO as decimal(38,18),\n\t\tTHE_BRIDGE as decimal(38,18),\n\t\tP_GARD_NO as decimal(38,18),\n\t\tP_THE_BRIDGE as decimal(38,18),\n\t\tNICKNAME as string,\n\t\tCOSTC_STATUS as string,\n\t\tP_MYGARD_FX as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> UdvEmployee\nTCrossReference filter(CODE_TYPE_ID == 329) ~> FilterEmployee\nSelectOnlyTargets aggregate(groupBy(TARGET_CODE,\n\t\tTARGET_DESCRIPTION),\n\teach(match(!in(['TARGET_CODE','TARGET_DESCRIPTION'],name)), $$ = first($$))) ~> Deduplicator\nFilterEmployee select(mapColumn(\n\t\tTARGET_CODE,\n\t\tTARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOnlyTargets\nSelect1 derive(EMP_ID = 109,\n\t\tEFFECTIVE_FROM_DATE = fromUTC(currentTimestamp(), 'CET'),\n\t\tEXPIRATION_TO_DATE = fromUTC(currentTimestamp(), 'CET')) ~> ConvertToString\nDeduplicator, SelectFromJoinerCrossSta join(Deduplicator@TARGET_CODE == SelectFromJoinerCrossSta1@TARGET_CODE,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> JoinerDeduplicatorANDJoinerStaSeniorClaim\nLkpSUdvAgsEmployee derive(TARGET_DESCRIPTION = substring('Deduplicator@TARGET_DESCRIPTION', 1, 40)) ~> Expression\nExpression select(mapColumn(\n\t\tTARGET_CODE = Deduplicator@TARGET_CODE,\n\t\tTARGET_DESCRIPTION,\n\t\tEFFECTIVE_FROM_DATE,\n\t\tEXPIRATION_TO_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PrepareBeforeDeduplicator\nPrepareBeforeDeduplicator, UdvEmployee union(byName: true)~> UnionWithLookUpUdvEmployee\nJoinerDeduplicatorANDJoinerStaSeniorClaim, UdvEmployee lookup(Deduplicator@TARGET_CODE == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> LkpSUdvAgsEmployee\nFilterEmployee select(mapColumn(\n\t\tSOURCE_CODE_KEY,\n\t\tTARGET_CODE,\n\t\tTARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSourceAndTargets\nSelectSourceAndTargets, ConvertToString join(SOURCE_CODE_KEY == toString(EMP_ID),\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinerStaSeniorClaimANDCross\nJoinerStaSeniorClaimANDCross select(mapColumn(\n\t\tTARGET_CODE,\n\t\tTARGET_DESCRIPTION,\n\t\tEFFECTIVE_FROM_DATE,\n\t\tEXPIRATION_TO_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFromJoinerCrossSta\nStaSeniorClaimHandler select(skipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1"
		}
	}
}