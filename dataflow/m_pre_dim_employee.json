{
	"name": "m_pre_dim_employee",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "TCrossReference"
				},
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "TCrossReference1"
				},
				{
					"dataset": {
						"referenceName": "Static",
						"type": "DatasetReference"
					},
					"name": "StaSeniorClaimHandler"
				},
				{
					"name": "UdvEmployee"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "FilterEmployee"
				},
				{
					"name": "Filter0Employee"
				},
				{
					"name": "Deduplicator"
				},
				{
					"name": "SelectOnlyTargets"
				},
				{
					"name": "JoinerStaSeniorClaimANDCross"
				},
				{
					"name": "ConvertToString"
				},
				{
					"name": "SelectSourceAndTargets"
				},
				{
					"name": "SelectFromJoinerCrossSta"
				},
				{
					"name": "JoinerDeduplicatorANDJoinerStaSeniorClaim"
				},
				{
					"name": "LkpSUdvAgsEmployee"
				}
			],
			"script": "source(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> TCrossReference\nsource(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> TCrossReference1\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> StaSeniorClaimHandler\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> UdvEmployee\nTCrossReference filter(CODE_TYPE_ID == 329) ~> FilterEmployee\nTCrossReference1 filter(CODE_TYPE_ID == 329) ~> Filter0Employee\nSelectOnlyTargets aggregate(groupBy(TARGET_CODE,\n\t\tTARGET_DESCRIPTION),\n\teach(match(!in(['TARGET_CODE','TARGET_DESCRIPTION'],name)), $$ = first($$))) ~> Deduplicator\nFilterEmployee select(mapColumn(\n\t\tTARGET_CODE,\n\t\tTARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectOnlyTargets\nSelectSourceAndTargets, ConvertToString join(SOURCE_CODE_KEY == toString(EMP_ID),\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinerStaSeniorClaimANDCross\nStaSeniorClaimHandler derive(EMP_ID = 109,\n\t\tEFFECTIVE_FROM_DATE = fromUTC(currentTimestamp(), 'CET'),\n\t\tEXPIRATION_TO_DATE = fromUTC(currentTimestamp(), 'CET')) ~> ConvertToString\nFilter0Employee select(mapColumn(\n\t\tSOURCE_CODE_KEY,\n\t\tTARGET_CODE,\n\t\tTARGET_DESCRIPTION\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSourceAndTargets\nJoinerStaSeniorClaimANDCross select(mapColumn(\n\t\tTARGET_CODE,\n\t\tTARGET_DESCRIPTION,\n\t\tEFFECTIVE_FROM_DATE,\n\t\tEXPIRATION_TO_DATE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectFromJoinerCrossSta\nDeduplicator, SelectFromJoinerCrossSta join(Deduplicator@TARGET_CODE == SelectFromJoinerCrossSta@TARGET_CODE,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> JoinerDeduplicatorANDJoinerStaSeniorClaim\nJoinerDeduplicatorANDJoinerStaSeniorClaim lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> LkpSUdvAgsEmployee"
		}
	}
}