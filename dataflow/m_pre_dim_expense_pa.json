{
	"name": "m_pre_dim_expense_pa",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "TCrossReference"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_expense",
						"type": "DatasetReference"
					},
					"name": "PreDimExpense"
				}
			],
			"transformations": [
				{
					"name": "FinancialType198"
				},
				{
					"name": "FinancialType"
				},
				{
					"name": "ExpenseCostGroup828"
				},
				{
					"name": "ExpenseCostGroup"
				},
				{
					"name": "ExpenseGroup827"
				},
				{
					"name": "ExpenseGroup"
				},
				{
					"name": "FinTypeExpGrp"
				},
				{
					"name": "FinTypeCostGrp"
				},
				{
					"name": "OutputColumns"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "ConcatSrcSysKeyExgLvl"
				},
				{
					"name": "ConcatSrcSysKeyExtLvl"
				},
				{
					"name": "ConcatSrcSysKeyExpLvl"
				},
				{
					"name": "Constant"
				},
				{
					"name": "NoMatchCols"
				}
			],
			"script": "source(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.t_crossreference\\n',\n\tformat: 'query') ~> TCrossReference\nTCrossReference filter(source_system == 'PARIS' && code_type_id == 198) ~> FinancialType198\nFinancialType198 select(mapColumn(\n\t\texp_key = source_code_key,\n\t\texp_code = target_code,\n\t\texp_description = target_description,\n\t\texp_cost_compensation = code2,\n\t\tsource_system\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinancialType\nTCrossReference filter(source_system == 'PARIS' && code_type_id == 828) ~> ExpenseCostGroup828\nExpenseCostGroup828 select(mapColumn(\n\t\tsource_code_key,\n\t\text_code = target_code,\n\t\text_description = target_description,\n\t\tsource_system\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExpenseCostGroup\nTCrossReference filter(source_system == 'PARIS' && code_type_id == 827) ~> ExpenseGroup827\nExpenseGroup827 select(mapColumn(\n\t\tsource_code_key,\n\t\texg_code = target_code,\n\t\texg_description = target_description,\n\t\tsource_system\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExpenseGroup\nConcatSrcSysKeyExpLvl, ExpenseGroup join(exp_key == source_code_key,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> FinTypeExpGrp\nFinTypeExpGrp, ExpenseCostGroup join(exp_key == ExpenseCostGroup@source_code_key,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> FinTypeCostGrp\nNoMatchCols select(mapColumn(\n\t\texp_key,\n\t\texp_cost_compensation,\n\t\texp_code,\n\t\texp_description,\n\t\tlast_updated_by,\n\t\texg_key = exg_code,\n\t\texg_description = NoMatchCols@exg_description,\n\t\text_description,\n\t\text_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OutputColumns\nOutputColumns alterRow(upsertIf(true())) ~> AlterRow1\nExpenseGroup derive(source_code_key = concat(source_system,source_code_key)) ~> ConcatSrcSysKeyExgLvl\nExpenseCostGroup derive(source_code_key = concat(source_system, source_code_key)) ~> ConcatSrcSysKeyExtLvl\nFinancialType derive(exp_key = concat(source_system, exp_key)) ~> ConcatSrcSysKeyExpLvl\nFinTypeCostGrp derive(last_updated_by = 'm_pre_dim_expense_pa') ~> Constant\nConstant derive(each(match(endsWith(name,'_description')), $$ = coalesce($$, 'Not Applicable')),\n\t\teach(match(endsWith(name,'_code')), $$ = coalesce($$, 'N/A'))) ~> NoMatchCols\nAlterRow1 sink(input(\n\t\texp_key as string,\n\t\texp_cost_compensation as string,\n\t\texp_code as string,\n\t\texp_description as string,\n\t\tinserted_by as string,\n\t\tlast_updated_by as string,\n\t\tdate_inserted as timestamp,\n\t\tdate_last_updated as timestamp,\n\t\texg_key as string,\n\t\texg_description as string,\n\t\text_description as string,\n\t\text_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['exp_key'],\n\tformat: 'table',\n\tmapColumn(\n\t\texp_key,\n\t\texp_cost_compensation,\n\t\texp_code,\n\t\texp_description,\n\t\tlast_updated_by,\n\t\texg_key,\n\t\texg_description,\n\t\text_description,\n\t\text_code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimExpense"
		}
	}
}