{
	"name": "m_pre_dim_expense_pa",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "t_crossreference",
						"type": "DatasetReference"
					},
					"name": "TCrossReference"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_expense_pa",
						"type": "DatasetReference"
					},
					"name": "PreDimExpense"
				}
			],
			"transformations": [
				{
					"name": "FInancialType198"
				},
				{
					"name": "FinancialType"
				},
				{
					"name": "ExpenseCostGroup828"
				},
				{
					"name": "ExpenseCostGroup"
				},
				{
					"name": "ExpenseGroup827"
				},
				{
					"name": "ExpenseGroup"
				},
				{
					"name": "FInTypeExpGrp"
				},
				{
					"name": "FinTypeCostGrp"
				},
				{
					"name": "ColsPreDimExpense"
				}
			],
			"script": "source(output(\n\t\tsource_code_key as string,\n\t\tsource_system as string,\n\t\ttarget_code as string,\n\t\ttarget_description as string,\n\t\tcode_type_id as double,\n\t\tcode2 as string,\n\t\tom_x_ref as string,\n\t\tcode_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> TCrossReference\nTCrossReference filter(source_system == 'PARIS' && code_type_id == 198) ~> FInancialType198\nFInancialType198 select(mapColumn(\n\t\texp_key = source_code_key,\n\t\texp_code = target_code,\n\t\texp_description = target_description,\n\t\texp_cost_compensation = code2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinancialType\nTCrossReference filter(source_system == 'PARIS' && code_type_id == 828) ~> ExpenseCostGroup828\nExpenseCostGroup828 select(mapColumn(\n\t\tsource_code_key,\n\t\text_code = target_code,\n\t\text_description = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExpenseCostGroup\nTCrossReference filter(source_system == 'PARIS' && code_type_id == 827) ~> ExpenseGroup827\nExpenseGroup827 select(mapColumn(\n\t\tsource_code_key,\n\t\texg_code = target_code,\n\t\texg_description = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ExpenseGroup\nFinancialType, ExpenseGroup join(exp_key == source_code_key,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> FInTypeExpGrp\nFInTypeExpGrp, ExpenseCostGroup join(exp_key == ExpenseCostGroup@source_code_key,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> FinTypeCostGrp\nFinTypeCostGrp select(mapColumn(\n\t\texp_key,\n\t\texp_code,\n\t\texp_description,\n\t\texp_cost_compensation,\n\t\texg_code,\n\t\texg_description,\n\t\text_code,\n\t\text_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColsPreDimExpense\nColsPreDimExpense sink(input(\n\t\tagt_description as string,\n\t\tagt_key as string,\n\t\tlast_updated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimExpense"
		}
	}
}