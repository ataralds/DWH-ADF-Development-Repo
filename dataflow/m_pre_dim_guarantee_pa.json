{
	"name": "m_pre_dim_guarantee_pa",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "pea"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lga"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "m_pre_dim_guarantee",
						"type": "DatasetReference"
					},
					"name": "PreDimGuarantee"
				}
			],
			"transformations": [
				{
					"name": "PeaTable"
				},
				{
					"name": "LgaTable"
				},
				{
					"name": "PeaLga"
				},
				{
					"name": "expression"
				},
				{
					"name": "SelectedColumns"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "source(output(\n\t\tpeapeaid as long,\n\t\tpeamdescr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select peapeaid,\\n\t peamdescr \\nfrom dwh_stage.p_peatable',\n\tformat: 'query') ~> pea\nsource(output(\n\t\tlgalcaid as string,\n\t\tlgalgaid as string,\n\t\tlgacrcode as string,\n\t\tlgastdate as date,\n\t\tlgaendate as date,\n\t\tlgaintnote as string,\n\t\tlgacrcrdate as date,\n\t\tlgareceiver as long,\n\t\tlgastatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \tlgalcaid,\\n\t\tlgalgaid,\\n\t\tlgacrcode,\\n\t\tlgastdate,\\n\t\tlgaendate,\\n\t\tlgaintnote,\\n\t\tlgacrcrdate,\\n\t\tlgareceiver,\\n\t\tlgastatus\\n from dwh_stage.p_lgatable',\n\tformat: 'query') ~> lga\npea select(mapColumn(\n\t\tpeapeaid,\n\t\tpeamdescr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PeaTable\nlga select(mapColumn(\n\t\tlgalcaid,\n\t\tlgalgaid,\n\t\tlgacrcode,\n\t\tlgastdate,\n\t\tlgaendate,\n\t\tlgaintnote,\n\t\tlgacrcrdate,\n\t\tlgareceiver,\n\t\tlgastatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LgaTable\nPeaTable, LgaTable join(peapeaid == lgareceiver,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> PeaLga\nPeaLga derive(Gut_Key = concat('P', lgalgaid),\n\t\tGut_Type_Description = case (lgacrcode == 'C','Provided Guarantee',\r\n       case(lgacrcode == 'R','Received Guarantee','Received Counter Guarantee'\r\n           )\r\n     ),\n\t\tGut_Guarantee_Status = case (lgastatus == 'A','Open',\r\n       case(lgastatus == 'R','Closed','Closed'\r\n           )\r\n     ),\n\t\tGut_Inc_Key = concat('P', lgalcaid),\n\t\tGut_open_ind = case (lgastatus == 'A','Y',\r\n       case(lgastatus == 'R','N','N'\r\n           )\r\n     ),\n\t\tGut_Guarantee_type_Code = lgacrcode,\n\t\tinserted_by = 'pre_dim_guarantee_pa') ~> expression\nexpression select(mapColumn(\n\t\tGut_Date_Given = lgastdate,\n\t\tGut_Guarantee_Issued_To = peamdescr,\n\t\tGut_Guarantee_Remarks = lgaintnote,\n\t\tGut_Date_Expiry = lgaendate,\n\t\tGut_Date_Created = lgacrcrdate,\n\t\tinserted_by,\n\t\teach(match(left(name,3)=='Gut'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumns\nSelectedColumns alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tgut_key as string,\n\t\tgut_guarantee_issued_by as string,\n\t\tgut_guarantee_number as decimal(28,10),\n\t\tgut_date_created as date,\n\t\tgut_inc_key as string,\n\t\tgut_date_given as date,\n\t\tgut_guarantee_issued_to as string,\n\t\tgut_guarantee_remarks as string,\n\t\tgut_date_cancelled as date,\n\t\tgut_outside_cover_ind as string,\n\t\tgut_open_ind as string,\n\t\tdate_inserted as timestamp,\n\t\tgut_form_of_guarantee_code as string,\n\t\tgut_guarantee_type_desc as string,\n\t\tgut_guarantee_status as string,\n\t\tgut_form_of_guarantee_desc as string,\n\t\tgut_date_expiry as date,\n\t\tgut_guarantee_type_code as string,\n\t\tgut_interests_and_costs_incl as string,\n\t\tgut_jurisdiction as string,\n\t\tinserted_by as string,\n\t\tlast_updated_by as string,\n\t\tgut_counter_guarantee_for as decimal(28,10),\n\t\tdate_last_updated as timestamp,\n\t\tgut_guarantee_provider as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['gut_key'],\n\tformat: 'table',\n\tmapColumn(\n\t\tgut_key = Gut_Key,\n\t\tgut_date_created = Gut_Date_Created,\n\t\tgut_inc_key = Gut_Inc_Key,\n\t\tgut_date_given = Gut_Date_Given,\n\t\tgut_guarantee_issued_to = Gut_Guarantee_Issued_To,\n\t\tgut_guarantee_remarks = Gut_Guarantee_Remarks,\n\t\tgut_open_ind = Gut_open_ind,\n\t\tgut_guarantee_type_desc = Gut_Type_Description,\n\t\tgut_guarantee_status = Gut_Guarantee_Status,\n\t\tgut_date_expiry = Gut_Date_Expiry,\n\t\tgut_guarantee_type_code = Gut_Guarantee_type_Code,\n\t\tinserted_by\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimGuarantee"
		}
	}
}