{
	"name": "m_pre_dim_incident_pa",
	"properties": {
		"description": "mangler lookup til claimteam ",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "hlpExchangeRateToUsd"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "fil"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "fal"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lcc"
				},
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "tCrossReference"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lcf"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lca"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "obb"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "oba"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "ica"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lcr"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "car"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "laa"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "aga"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "sig"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "ina"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lab"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lda"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "qtb"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "staParisClmLead"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "unl"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "staRiskGroup"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "dimTime"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "staIncidentRsvGroupMe"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_incident",
						"type": "DatasetReference"
					},
					"name": "preDimIncidentPa"
				}
			],
			"transformations": [
				{
					"name": "currency"
				},
				{
					"name": "exchrateUSD"
				},
				{
					"name": "filtable"
				},
				{
					"name": "lccmaxincurred"
				},
				{
					"name": "xRefCurrency"
				},
				{
					"name": "lcftrtmco"
				},
				{
					"name": "lfcchngtime"
				},
				{
					"name": "selectLcf"
				},
				{
					"name": "lcaLcfInput"
				},
				{
					"name": "lcatableLcfInput",
					"description": "Filtering rows on lcaclodate not null"
				},
				{
					"name": "lcflca"
				},
				{
					"name": "falcolumns"
				},
				{
					"name": "falCurr"
				},
				{
					"name": "lccmaxincurredfal"
				},
				{
					"name": "falfil"
				},
				{
					"name": "joinExchrate"
				},
				{
					"name": "faltable"
				},
				{
					"name": "claimIncurredUsd"
				},
				{
					"name": "sumClaimIncurredUsd"
				},
				{
					"name": "minLccid"
				},
				{
					"name": "maxSumClaimIncurredUsd"
				},
				{
					"name": "lccColumns"
				},
				{
					"name": "tmpLccClaim"
				},
				{
					"name": "maxSumClaimTmpClaim"
				},
				{
					"name": "maxSumClaimLccTable"
				},
				{
					"name": "filterDates",
					"description": "Filtering rows on lcfchntime < lcaclodate"
				},
				{
					"name": "lcctable"
				},
				{
					"name": "lcftable"
				},
				{
					"name": "obbClaim"
				},
				{
					"name": "obatable"
				},
				{
					"name": "lcaClaimObject"
				},
				{
					"name": "lcaRiskObject"
				},
				{
					"name": "icaRiskObject"
				},
				{
					"name": "lcaoba"
				},
				{
					"name": "obaobb"
				},
				{
					"name": "claimObject",
					"description": "Filtering rows on claim date between obbstdate and obbendate (or +/- 10 years from current date)"
				},
				{
					"name": "lcaica"
				},
				{
					"name": "icaoba"
				},
				{
					"name": "obboba"
				},
				{
					"name": "riskObject"
				},
				{
					"name": "UnionRiskAndClaimObject"
				},
				{
					"name": "objNull"
				},
				{
					"name": "AggregateClmRiskObjects"
				},
				{
					"name": "obbRisk"
				},
				{
					"name": "obbname"
				},
				{
					"name": "obbtable"
				},
				{
					"name": "filterLcrctrid"
				},
				{
					"name": "selectLcr"
				},
				{
					"name": "lcrtable"
				},
				{
					"name": "cartable"
				},
				{
					"name": "laatable"
				},
				{
					"name": "lcatable"
				},
				{
					"name": "agatable"
				},
				{
					"name": "sigtable"
				},
				{
					"name": "inatable"
				},
				{
					"name": "icatable"
				},
				{
					"name": "labtable"
				},
				{
					"name": "ldaMaxColumns"
				},
				{
					"name": "ldaMinColumns"
				},
				{
					"name": "Aggregateldaldaid"
				},
				{
					"name": "Filterldadedcd3"
				},
				{
					"name": "joinMaxLdaldaid"
				},
				{
					"name": "joinMinLdaldaid"
				},
				{
					"name": "ldaMax"
				},
				{
					"name": "ldaMin"
				},
				{
					"name": "icaaga"
				},
				{
					"name": "icalca"
				},
				{
					"name": "lcalab"
				},
				{
					"name": "icaina"
				},
				{
					"name": "labcar"
				},
				{
					"name": "lablaa"
				},
				{
					"name": "lcaldaMax"
				},
				{
					"name": "lcaldaMin"
				},
				{
					"name": "xRefCurrencyMinLdaCurr"
				},
				{
					"name": "xRefCurrencyMaxLdaCurr"
				},
				{
					"name": "minLdaMinLdaCurr"
				},
				{
					"name": "maxLdaMaxLdaCurr"
				},
				{
					"name": "lcasig"
				},
				{
					"name": "lcalcr"
				},
				{
					"name": "lcaobb"
				},
				{
					"name": "lcalcf"
				},
				{
					"name": "lcalcc"
				},
				{
					"name": "SelectParisColumns"
				},
				{
					"name": "DerivedColumns",
					"description": "Updating/creating columns:\n'lcatlotype, lcacategorytype, lcawrkplccod, agabusndiv, agabusnsec, clm_team_sign"
				},
				{
					"name": "claimcategory801"
				},
				{
					"name": "xRefClaimCategory"
				},
				{
					"name": "tlotype800"
				},
				{
					"name": "xRefTloType"
				},
				{
					"name": "complexity466"
				},
				{
					"name": "xRefComplexity"
				},
				{
					"name": "employee329"
				},
				{
					"name": "xRefClmHandler"
				},
				{
					"name": "mainevent772"
				},
				{
					"name": "xRefMainevent"
				},
				{
					"name": "mainClaimType774"
				},
				{
					"name": "xRefMainClmType"
				},
				{
					"name": "eventdetail773"
				},
				{
					"name": "xRefEventDetail"
				},
				{
					"name": "claimAdjuster329"
				},
				{
					"name": "xRefClaimAdjuster"
				},
				{
					"name": "businessArea106"
				},
				{
					"name": "xRefBusinessArea"
				},
				{
					"name": "coverage122"
				},
				{
					"name": "xRefCoverage"
				},
				{
					"name": "agreementType113"
				},
				{
					"name": "xRefAgreementType"
				},
				{
					"name": "clmProcess816"
				},
				{
					"name": "xRefClmProcess"
				},
				{
					"name": "FilterQtbfieldn"
				},
				{
					"name": "qtbtable"
				},
				{
					"name": "LookupIncStatus"
				},
				{
					"name": "LookupClaimCategory"
				},
				{
					"name": "LookupTloType"
				},
				{
					"name": "LookupComplexity"
				},
				{
					"name": "LookupClmHndlr"
				},
				{
					"name": "LookupMainEvent"
				},
				{
					"name": "LookupMainClmType"
				},
				{
					"name": "LookupMainClmDetail"
				},
				{
					"name": "mainClmDetail775"
				},
				{
					"name": "xRefMainClmDetail"
				},
				{
					"name": "LookupEventDetail"
				},
				{
					"name": "LookupClmAdjuster"
				},
				{
					"name": "LookupBusinessArea"
				},
				{
					"name": "LookupCoverage"
				},
				{
					"name": "LookupAgreementType"
				},
				{
					"name": "LookupImmediateCause"
				},
				{
					"name": "immediateCause161"
				},
				{
					"name": "xRefImmediateCause"
				},
				{
					"name": "LookupClmProcess"
				},
				{
					"name": "LookupStaParisClmLead"
				},
				{
					"name": "DerivedTempKeyTemDescription"
				},
				{
					"name": "DerivedColumns2"
				},
				{
					"name": "Deduplicate"
				},
				{
					"name": "unlPlcOfIncident"
				},
				{
					"name": "LookupUnlVoyTo"
				},
				{
					"name": "LookupUnlVoyFrom"
				},
				{
					"name": "unlVoyageTo"
				},
				{
					"name": "unlVoyageFrom"
				},
				{
					"name": "LookupUnlPlcOfIncident"
				},
				{
					"name": "ChangeUnlColumns"
				},
				{
					"name": "riskGroup"
				},
				{
					"name": "LookupRiskGroup"
				},
				{
					"name": "LookupExchrateMax"
				},
				{
					"name": "exchrateUSDmin"
				},
				{
					"name": "exchrateUSDmax"
				},
				{
					"name": "LookupExchrateMin"
				},
				{
					"name": "DeriveColumns",
					"description": "Creating/updating columns:\nldadedcurr_max, ldatext_max, ldadedamt_max, ldadays_max, min_amount_usd, inc:complexity:desc, inc_geotag_reference"
				},
				{
					"name": "incDedAmountUsd"
				},
				{
					"name": "xRefRegisteredBy"
				},
				{
					"name": "LookupRegisteredBy"
				},
				{
					"name": "dimTimeYeardOfInc"
				},
				{
					"name": "dimTimeYearMonthOfReg"
				},
				{
					"name": "LookupYearOfInc"
				},
				{
					"name": "LookupYearMonthOfReg"
				},
				{
					"name": "Deduplicator2"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "incRsvGroupMe"
				},
				{
					"name": "MutualFixedAndSpecialCases"
				},
				{
					"name": "LookupIncRsvGroupMe"
				},
				{
					"name": "AlterRow"
				}
			],
			"script": "source(output(\n\t\tFROM_CURRENCY_ID as double,\n\t\tTO_CURRENCY_ID as double,\n\t\tEXCHANGE_FROM_DATE as timestamp,\n\t\tEXCHANGE_RATE as decimal(38,18),\n\t\tEXCHANGE_TO_DATE as timestamp,\n\t\tFROM_CURRENCY_CODE as string,\n\t\tTO_CURRENCY_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> hlpExchangeRateToUsd\nsource(output(\n\t\tfilacseq as decimal(38,18),\n\t\tfilacstat as string,\n\t\tfilagaid as string,\n\t\tfilcadate as timestamp,\n\t\tfilcasign as string,\n\t\tfilcastamp as string,\n\t\tfilcdoctype as string,\n\t\tfilcfunc as string,\n\t\tfilcordocn as decimal(38,18),\n\t\tfilcortyp as decimal(38,18),\n\t\tfilcosig1 as string,\n\t\tfilcosig2 as string,\n\t\tfilcrdate as timestamp,\n\t\tfilcrsign as string,\n\t\tfilcrstamp as string,\n\t\tfilcspbusndiv as decimal(38,18),\n\t\tfilcspbusnfunc as string,\n\t\tfilcspcondgrp as decimal(38,18),\n\t\tfilcspintrst as string,\n\t\tfilcsplimit as decimal(38,18),\n\t\tfilctrldate as timestamp,\n\t\tfilctrlsign as string,\n\t\tfildistext35 as string,\n\t\tfildocdate as timestamp,\n\t\tfildocmain as string,\n\t\tfildocn as decimal(38,18),\n\t\tfildodate as timestamp,\n\t\tfildostamp as string,\n\t\tfilexpdate as timestamp,\n\t\tfilexpeosign as string,\n\t\tfilexpstatus as string,\n\t\tfilexternalref as string,\n\t\tfilfilid as string,\n\t\tfilgldate as timestamp,\n\t\tfilglrunno as decimal(38,18),\n\t\tfilglstamp as string,\n\t\tfilingform as string,\n\t\tfilknvmark as string,\n\t\tfillisig1 as string,\n\t\tfillisig2 as string,\n\t\tfilnoaccounting as string,\n\t\tfilordate as timestamp,\n\t\tfiloridintrstdate as timestamp,\n\t\tfilorsign as string,\n\t\tfilorstamp as string,\n\t\tfilrefbase as decimal(38,18),\n\t\tfilresig1 as decimal(38,18),\n\t\tfilresig2 as decimal(38,18),\n\t\tfilvaldate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> fil\nsource(output(\n\t\tfalaccadrpeaid as decimal(38,18),\n\t\tfalaccamtp as decimal(38,18),\n\t\tfalaccdescr as string,\n\t\tfalaccpara as string,\n\t\tfalaccsw1 as string,\n\t\tfalaclcode as string,\n\t\tfalacstat as string,\n\t\tfaladvcod as decimal(38,18),\n\t\tfalagaid as string,\n\t\tfalagno as decimal(38,18),\n\t\tfalbalance as decimal(38,18),\n\t\tfalbaldescr as string,\n\t\tfalbillingno as decimal(38,18),\n\t\tfalbordadr as decimal(38,18),\n\t\tfalbordref as string,\n\t\tfalbroker as decimal(38,18),\n\t\tfalcashco as decimal(38,18),\n\t\tfalcathbtid as decimal(38,18),\n\t\tfalcctid as string,\n\t\tfalcedent as decimal(38,18),\n\t\tfalcedsecisolan as string,\n\t\tfalcedsecurno as decimal(38,18),\n\t\tfalclmadrpeaid as decimal(38,18),\n\t\tfalclmcat as string,\n\t\tfalclmreserve as decimal(38,18),\n\t\tfalcomcod as string,\n\t\tfalcovshare as decimal(38,18),\n\t\tfalcurr as string,\n\t\tfaldedamtp as decimal(38,18),\n\t\tfaldedcur as string,\n\t\tfaldedtamtp as decimal(38,18),\n\t\tfaldescr50 as string,\n\t\tfalduedate as timestamp,\n\t\tfalduest as decimal(38,18),\n\t\tfalelremitdescr as string,\n\t\tfalfalid as string,\n\t\tfalfblid as string,\n\t\tfalfilid as string,\n\t\tfalgenamtp as decimal(38,18),\n\t\tfalgencurr as string,\n\t\tfalicaid as string,\n\t\tfalinaid as string,\n\t\tfalinout as string,\n\t\tfalintamtp as decimal(38,18),\n\t\tfaliuwid as string,\n\t\tfaliyear as decimal(38,18),\n\t\tfallcaid as string,\n\t\tfallccid as string,\n\t\tfalln5 as decimal(38,18),\n\t\tfalmailaddress as string,\n\t\tfalmark as string,\n\t\tfalnreaccnynsw as string,\n\t\tfalnsci as decimal(38,18),\n\t\tfalobno as decimal(38,18),\n\t\tfalolddocno as decimal(38,18),\n\t\tfalorgins as decimal(38,18),\n\t\tfaloridintrstdate as timestamp,\n\t\tfaloutcode as decimal(38,18),\n\t\tfaloutform as string,\n\t\tfaloutstanding as decimal(38,18),\n\t\tfalownret as decimal(38,18),\n\t\tfalpaycod as decimal(38,18),\n\t\tfalpglb as decimal(38,18),\n\t\tfalpglbaccno as decimal(38,18),\n\t\tfalpgqid as string,\n\t\tfalplgroup as decimal(38,18),\n\t\tfalreaccn as string,\n\t\tfalrecamtp as decimal(38,18),\n\t\tfalreccur as string,\n\t\tfalrectamtp as decimal(38,18),\n\t\tfalsettled as decimal(38,18),\n\t\tfalshare as decimal(38,18),\n\t\tfalsource as decimal(38,18),\n\t\tfaluwbid as string,\n\t\tfaluwndisc as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> fal\nsource(output(\n\t\tlccadddescrlev1 as string,\n\t\tlccadddescrlev2 as string,\n\t\tlccadddescrlev3 as string,\n\t\tlccadddescrlev4 as string,\n\t\tlccadditionaltxt as string,\n\t\tlccadjuster as string,\n\t\tlccalleged1 as string,\n\t\tlccalleged2 as string,\n\t\tlccallegedtxt as string,\n\t\tlccamount as decimal(38,18),\n\t\tlccamtdispunknown as string,\n\t\tlcccargotype as string,\n\t\tlcccarriagemethod as string,\n\t\tlcccause as string,\n\t\tlcccausetxt as string,\n\t\tlccclmamtynsw as string,\n\t\tlccclmdet as string,\n\t\tlccclmtype as string,\n\t\tlccclupcommenced as decimal(38,18),\n\t\tlccclupcompleted as decimal(38,18),\n\t\tlccconseq as string,\n\t\tlccconseqos as string,\n\t\tlcccurr as string,\n\t\tlccdecision as decimal(38,18),\n\t\tlccdisembarkedat as string,\n\t\tlccdisembarkeddate as timestamp,\n\t\tlccdisembarkiso as string,\n\t\tlccembarkedat as string,\n\t\tlccembarkeddate as timestamp,\n\t\tlccembarkiso as string,\n\t\tlccemergevac as string,\n\t\tlccfduty as decimal(38,18),\n\t\tlccgrossamount as decimal(38,18),\n\t\tlccgrosssettle as decimal(38,18),\n\t\tlcchandlebyclms as string,\n\t\tlccinitcontpoint as string,\n\t\tlccinlitigation as string,\n\t\tlccjurisdiction as string,\n\t\tlccladid as decimal(38,18),\n\t\tlcclcaid as string,\n\t\tlcclccid as string,\n\t\tlcclightcccid as string,\n\t\tlccln6 as decimal(38,18),\n\t\tlccloconvess as string,\n\t\tlccloconvesstxt as string,\n\t\tlccmafareatxt as string,\n\t\tlccmaffectarea as string,\n\t\tlccmanos as string,\n\t\tlccmanouver as string,\n\t\tlccmfkey as string,\n\t\tlccnpersons as decimal(38,18),\n\t\tlccothshipname as string,\n\t\tlccpeaid as decimal(38,18),\n\t\tlccpilotname as string,\n\t\tlccpilotonboard as string,\n\t\tlccpollutant as string,\n\t\tlccradnavynsw as string,\n\t\tlccrecovccvid as decimal(38,18),\n\t\tlccrecovcom as string,\n\t\tlccrecovcurr as string,\n\t\tlccrecovery as decimal(38,18),\n\t\tlccrecovyn as string,\n\t\tlccremarks as string,\n\t\tlccrolecat as string,\n\t\tlccrule as string,\n\t\tlccruleofcov as string,\n\t\tlccsettlement as decimal(38,18),\n\t\tlcctext as string,\n\t\tlcctrtmco as decimal(38,18),\n\t\tlccuwsign as string,\n\t\tlccvessdevi as string,\n\t\tlccvisiblcccid as string,\n\t\tlccvoyagefr as string,\n\t\tlccvoyageto as string,\n\t\tlccvoyfriso as string,\n\t\tlccvoytoiso as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lcc\nsource(output(\n\t\tsource_code_key as string,\n\t\tsource_system as string,\n\t\ttarget_code as string,\n\t\ttarget_description as string,\n\t\tcode_type_id as double,\n\t\tcode2 as string,\n\t\tom_x_ref as string,\n\t\tcode_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tCrossReference\nsource(output(\n\t\tlcfccod2 as string,\n\t\tlcfccod2trmtdate as timestamp,\n\t\tlcfccod2txt35 as string,\n\t\tlcfchngtime as string,\n\t\tlcflcaid as string,\n\t\tlcfnextdate as timestamp,\n\t\tlcfsign as string,\n\t\tlcftrtmco as decimal(38,18),\n\t\tlcfwrkplccod as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lcf\nsource(output(\n\t\tlcaacstat as string,\n\t\tlcaadjsign as string,\n\t\tlcaagaid as string,\n\t\tlcaareacd as string,\n\t\tlcaareadescr as string,\n\t\tlcaautosetleyn as string,\n\t\tlcabigevent as string,\n\t\tlcabirtno as string,\n\t\tlcabonynsw as string,\n\t\tlcacagtyp as string,\n\t\tlcacalclamtfrinjured as string,\n\t\tlcacategorytype as string,\n\t\tlcacattype as string,\n\t\tlcaccod2 as string,\n\t\tlcaccod2date as timestamp,\n\t\tlcaccod2trmtdate as timestamp,\n\t\tlcaccod2txt35 as string,\n\t\tlcacefocc as string,\n\t\tlcacefocm as string,\n\t\tlcacefouc as string,\n\t\tlcaclintc as decimal(38,18),\n\t\tlcaclmcac as string,\n\t\tlcaclmdate as timestamp,\n\t\tlcaclmdatechd as string,\n\t\tlcaclmid as decimal(38,18),\n\t\tlcaclmintynsw as string,\n\t\tlcaclmn3 as decimal(38,18),\n\t\tlcaclmpeaid as decimal(38,18),\n\t\tlcaclmtype as string,\n\t\tlcaclodate as timestamp,\n\t\tlcacndid as string,\n\t\tlcacommonynsw as string,\n\t\tlcacompllevel as string,\n\t\tlcaconflictclm as string,\n\t\tlcacrdate as timestamp,\n\t\tlcacrobbid as string,\n\t\tlcacrsign as string,\n\t\tlcacyear as decimal(38,18),\n\t\tlcaecauseco as string,\n\t\tlcaecfid as string,\n\t\tlcaeclid as string,\n\t\tlcaecoid as string,\n\t\tlcaenassshr as decimal(38,18),\n\t\tlcaenintrst as string,\n\t\tlcaeuoffpros as decimal(38,18),\n\t\tlcaeuownpros as decimal(38,18),\n\t\tlcaexppdate as timestamp,\n\t\tlcaextadjynsw as string,\n\t\tlcaextclmid as string,\n\t\tlcafileref as decimal(38,18),\n\t\tlcafinalstatmdate as timestamp,\n\t\tlcafoadate as timestamp,\n\t\tlcafpareacd as string,\n\t\tlcafromareacd as string,\n\t\tlcageodescr as string,\n\t\tlcahour as decimal(38,18),\n\t\tlcaicaid as string,\n\t\tlcaimpexp as decimal(38,18),\n\t\tlcainsamt as decimal(38,18),\n\t\tlcainscurr as string,\n\t\tlcainsured as decimal(38,18),\n\t\tlcainsuredmno as string,\n\t\tlcainsuredmof as string,\n\t\tlcaintnote as string,\n\t\tlcaisrndcontrssigned as string,\n\t\tlcajurisdiction as string,\n\t\tlcaknvmark as string,\n\t\tlcalabid as string,\n\t\tlcalcaid as string,\n\t\tlcaldescr as string,\n\t\tlcaliabcode as decimal(38,18),\n\t\tlcaliabtxt as string,\n\t\tlcalimamt as decimal(38,18),\n\t\tlcalimcurr as string,\n\t\tlcalimdays as decimal(38,18),\n\t\tlcalimdedamt as decimal(38,18),\n\t\tlcalimrenewed as decimal(38,18),\n\t\tlcaloadate as timestamp,\n\t\tlcalodescr as string,\n\t\tlcalossco as string,\n\t\tlcalrgclmynsw as string,\n\t\tlcaltdate as timestamp,\n\t\tlcaludate as timestamp,\n\t\tlcalusign as string,\n\t\tlcamanhavsalaer as string,\n\t\tlcamfkey as string,\n\t\tlcamoveddate as timestamp,\n\t\tlcamovedsign as string,\n\t\tlcamovedto as string,\n\t\tlcamplamt as decimal(38,18),\n\t\tlcamplcurr as string,\n\t\tlcamuoffgrp as decimal(38,18),\n\t\tlcamuoffpros as decimal(38,18),\n\t\tlcamuownpros as decimal(38,18),\n\t\tlcan1nooftreatm as decimal(38,18),\n\t\tlcan2nooftreatm as decimal(38,18),\n\t\tlcan3nooftreatm as decimal(38,18),\n\t\tlcan4nooftreatm as decimal(38,18),\n\t\tlcan5nooftreatm as decimal(38,18),\n\t\tlcan6nooftreatm as decimal(38,18),\n\t\tlcan7nooftreatm as decimal(38,18),\n\t\tlcan8nooftreatm as decimal(38,18),\n\t\tlcancauseco as string,\n\t\tlcanextdate as timestamp,\n\t\tlcanextsign as string,\n\t\tlcanmclef as string,\n\t\tlcanoofpers as decimal(38,18),\n\t\tlcaobno as decimal(38,18),\n\t\tlcaoccoffdate as timestamp,\n\t\tlcaoccoffynsw as string,\n\t\tlcaoccownynsw as string,\n\t\tlcaoffice as decimal(38,18),\n\t\tlcaonoffs as decimal(38,18),\n\t\tlcaoutstm as string,\n\t\tlcapilotonboard as string,\n\t\tlcaportcccid as string,\n\t\tlcaportunlid as string,\n\t\tlcaprepayamtp as decimal(38,18),\n\t\tlcaprepaycurr as string,\n\t\tlcaprocess as string,\n\t\tlcarecovachamt as decimal(38,18),\n\t\tlcarecovachcurr as string,\n\t\tlcarecovachdate as timestamp,\n\t\tlcarecovachintnote as string,\n\t\tlcarecovachsign as string,\n\t\tlcarecovachynsw as string,\n\t\tlcarecovccvid as decimal(38,18),\n\t\tlcarecovpotamt as decimal(38,18),\n\t\tlcarecovpotcurr as string,\n\t\tlcarecovpotintnote as string,\n\t\tlcarecovpotynsw as string,\n\t\tlcarecovremdate as timestamp,\n\t\tlcareduceprem as string,\n\t\tlcaregamt as decimal(38,18),\n\t\tlcaregcurr as string,\n\t\tlcaregndate as timestamp,\n\t\tlcaregnsign as string,\n\t\tlcaregress as decimal(38,18),\n\t\tlcaregtext70 as string,\n\t\tlcarepdate as timestamp,\n\t\tlcaresumtionfrom as string,\n\t\tlcataucode as decimal(38,18),\n\t\tlcatautxt as string,\n\t\tlcataxno as string,\n\t\tlcatcauseco as string,\n\t\tlcatimnote as string,\n\t\tlcatlotype as decimal(38,18),\n\t\tlcatmcloludate as timestamp,\n\t\tlcatmclolusign as string,\n\t\tlcatmduedate as timestamp,\n\t\tlcatmextdocid as decimal(38,18),\n\t\tlcatmextduedate as timestamp,\n\t\tlcatmextludate as timestamp,\n\t\tlcatmextlusign as string,\n\t\tlcatmludate as timestamp,\n\t\tlcatmlusign as string,\n\t\tlcatmstatus as string,\n\t\tlcatoareacd as string,\n\t\tlcatranme as string,\n\t\tlcatranty as decimal(38,18),\n\t\tlcatrtmco as decimal(38,18),\n\t\tlcatzone as string,\n\t\tlcauwsign as string,\n\t\tlcawocdate as timestamp,\n\t\tlcawocstat as string,\n\t\tlcaworkplace as decimal(38,18),\n\t\tlcawrkclaim as decimal(38,18),\n\t\tlcawrkplccod as decimal(38,18),\n\t\tlcaxlmref as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lca\nsource(output(\n\t\tobbaccname as string,\n\t\tobbadr1 as string,\n\t\tobbadr2 as string,\n\t\tobbadr3 as string,\n\t\tobbadr4 as string,\n\t\tobbadr5 as string,\n\t\tobbareadescr as string,\n\t\tobbareafactorgroup as string,\n\t\tobbarmdgrdalways as string,\n\t\tobbaviatdescr as string,\n\t\tobbavproof as string,\n\t\tobbbnr as decimal(38,18),\n\t\tobbbonus as decimal(38,18),\n\t\tobbbreth as decimal(38,18),\n\t\tobbbuildfactor as decimal(38,18),\n\t\tobbbuiltmonth as decimal(38,18),\n\t\tobbbuiltyear as decimal(38,18),\n\t\tobbcagsubtyp as decimal(38,18),\n\t\tobbcapoty as decimal(38,18),\n\t\tobbcargodescr as string,\n\t\tobbcargotype as string,\n\t\tobbccbid as string,\n\t\tobbcefoen as string,\n\t\tobbcefofb as string,\n\t\tobbcefoty as string,\n\t\tobbcffid as string,\n\t\tobbclass as string,\n\t\tobbclass2 as string,\n\t\tobbcoordx as decimal(38,18),\n\t\tobbcoordy as decimal(38,18),\n\t\tobbcrdate as timestamp,\n\t\tobbcrsign as string,\n\t\tobbcrwisolan as string,\n\t\tobbcsvdate as timestamp,\n\t\tobbcsvtext as string,\n\t\tobbcumobno as decimal(38,18),\n\t\tobbcurr as string,\n\t\tobbdepth as decimal(38,18),\n\t\tobbdistrict as string,\n\t\tobbdwt as decimal(38,18),\n\t\tobbendate as timestamp,\n\t\tobbengfab as string,\n\t\tobbenginehp as string,\n\t\tobbengineyear as decimal(38,18),\n\t\tobbexname as string,\n\t\tobbfishlimit as string,\n\t\tobbfishsize as decimal(38,18),\n\t\tobbfishunit as string,\n\t\tobbfloor as decimal(38,18),\n\t\tobbfmark as string,\n\t\tobbformt as decimal(38,18),\n\t\tobbgeodescr as string,\n\t\tobbgeox as decimal(38,18),\n\t\tobbgeoy as decimal(38,18),\n\t\tobbgnr as decimal(38,18),\n\t\tobbgrpdescr as string,\n\t\tobbgrpfactorgroup as string,\n\t\tobbgrt as decimal(38,18),\n\t\tobbhinumber as string,\n\t\tobbhulltype as string,\n\t\tobbimpexp as decimal(38,18),\n\t\tobbinjurydescr as string,\n\t\tobbinstrument as decimal(38,18),\n\t\tobbinsynsw as string,\n\t\tobbismdate as timestamp,\n\t\tobbismsocity as string,\n\t\tobbkmavle as decimal(38,18),\n\t\tobbkmstan as decimal(38,18),\n\t\tobbkmyear as decimal(38,18),\n\t\tobbkmyrvalue as decimal(38,18),\n\t\tobbknowninjury as string,\n\t\tobbknvmark as string,\n\t\tobbkonst as string,\n\t\tobbkwh as decimal(38,18),\n\t\tobblandinggear as decimal(38,18),\n\t\tobblastvaldatebuildings as timestamp,\n\t\tobblastvaldateequipment as timestamp,\n\t\tobblbunit as string,\n\t\tobblength as decimal(38,18),\n\t\tobblicences as decimal(38,18),\n\t\tobbloc as string,\n\t\tobbludate as timestamp,\n\t\tobblusign as string,\n\t\tobbm3 as decimal(38,18),\n\t\tobbmainoshid as decimal(38,18),\n\t\tobbmaintlevel as decimal(38,18),\n\t\tobbmanager as decimal(38,18),\n\t\tobbmanerknum as string,\n\t\tobbmanisolan as string,\n\t\tobbmaterial as string,\n\t\tobbmcpid as string,\n\t\tobbmvaynsw as string,\n\t\tobbname as string,\n\t\tobbncaid as string,\n\t\tobbnoofcrew as decimal(38,18),\n\t\tobbnoofflat as decimal(38,18),\n\t\tobbnoofofficers as decimal(38,18),\n\t\tobbnoofother as decimal(38,18),\n\t\tobbnoofpax as decimal(38,18),\n\t\tobbobbid as string,\n\t\tobbobjdescr as string,\n\t\tobbobjema as decimal(38,18),\n\t\tobbobjemi as decimal(38,18),\n\t\tobbobno as decimal(38,18),\n\t\tobbobnorf as decimal(38,18),\n\t\tobbobver as decimal(38,18),\n\t\tobboffisolan as string,\n\t\tobboflid as decimal(38,18),\n\t\tobboshid as decimal(38,18),\n\t\tobbowndate as timestamp,\n\t\tobbowner as decimal(38,18),\n\t\tobbownynsw as string,\n\t\tobbpilotcert as string,\n\t\tobbpilothour as decimal(38,18),\n\t\tobbportcccid as string,\n\t\tobbportdescr as string,\n\t\tobbportunlid as string,\n\t\tobbraptorid as string,\n\t\tobbrecontrfactor as decimal(38,18),\n\t\tobbregdate as timestamp,\n\t\tobbrentstat as decimal(38,18),\n\t\tobbrespdate as timestamp,\n\t\tobbresptext as string,\n\t\tobbrotation as decimal(38,18),\n\t\tobbshbisolan as string,\n\t\tobbshpbld as decimal(38,18),\n\t\tobbsnr as decimal(38,18),\n\t\tobbsocity as string,\n\t\tobbsocity2 as string,\n\t\tobbspeedlimit as decimal(38,18),\n\t\tobbsrcob as string,\n\t\tobbstandard as decimal(38,18),\n\t\tobbstdate as timestamp,\n\t\tobbtaxno as string,\n\t\tobbtotamt as decimal(38,18),\n\t\tobbtradisolan as string,\n\t\tobbtradtextkey as string,\n\t\tobbtradunlid as string,\n\t\tobbtranme as string,\n\t\tobbtranty as decimal(38,18),\n\t\tobbtypedescr as string,\n\t\tobbuhcid as decimal(38,18),\n\t\tobbusecod as string,\n\t\tobbverstat as string,\n\t\tobbvescod as string,\n\t\tobbvesisolan as string,\n\t\tobbwater as string,\n\t\tobbweigthgroup as string,\n\t\tobbx1factorgroup as string,\n\t\tobbx2factorgroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> obb\nsource(output(\n\t\tobaassetno as decimal(38,18),\n\t\tobaassetsubno as decimal(38,18),\n\t\tobacallno as string,\n\t\tobachassis as string,\n\t\tobacomp2 as decimal(38,18),\n\t\tobacrdate as timestamp,\n\t\tobacrsign as string,\n\t\tobaextnote as string,\n\t\tobaimono as decimal(38,18),\n\t\tobaimoynsw as string,\n\t\tobaintnote as string,\n\t\tobaknvmark as string,\n\t\tobalongtermrate as decimal(38,18),\n\t\tobaludate as timestamp,\n\t\tobalusign as string,\n\t\tobammsino as decimal(38,18),\n\t\tobancmid as string,\n\t\tobancnid as string,\n\t\tobancsid as string,\n\t\tobanjcid as string,\n\t\tobanpcid as decimal(38,18),\n\t\tobaobno as decimal(38,18),\n\t\tobaobrt as decimal(38,18),\n\t\tobaorgbui as decimal(38,18),\n\t\tobaorgbuiltmonth as decimal(38,18),\n\t\tobaoxno as decimal(38,18),\n\t\tobapeaid as decimal(38,18),\n\t\tobatrackit as string,\n\t\tobatrackit1 as string,\n\t\tobatrackit2 as string,\n\t\tobatrackit3 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> oba\nsource(output(\n\t\ticaadmfeerate as decimal(38,18),\n\t\ticaagaid as string,\n\t\ticaaggregate as decimal(38,18),\n\t\ticaamtcod as string,\n\t\ticaamtlevel as decimal(38,18),\n\t\ticaavrperspre as decimal(38,18),\n\t\ticac1000prem as decimal(38,18),\n\t\ticacadate as timestamp,\n\t\ticacantxt as string,\n\t\ticacasign as string,\n\t\ticachdate as timestamp,\n\t\ticachhour as decimal(38,18),\n\t\ticacorrty as decimal(38,18),\n\t\ticacrdate as timestamp,\n\t\ticacrobbid as string,\n\t\ticacrsign as string,\n\t\ticacslynsw as string,\n\t\ticadayamt as decimal(38,18),\n\t\ticadaysinall as decimal(38,18),\n\t\ticadeclaredamt as decimal(38,18),\n\t\ticadeclaredamtlocal as decimal(38,18),\n\t\ticadednote as string,\n\t\ticadeliverydate as timestamp,\n\t\ticaendate as timestamp,\n\t\ticaenhour as decimal(38,18),\n\t\ticaeoamt as decimal(38,18),\n\t\ticaeoamtcod as string,\n\t\ticaexhausted as decimal(38,18),\n\t\ticaexpendate as timestamp,\n\t\ticaexpenhour as decimal(38,18),\n\t\ticaexptext as string,\n\t\ticaextndisc as decimal(38,18),\n\t\ticaextshare as decimal(38,18),\n\t\ticafixownrnote as string,\n\t\ticafixownrynsw as string,\n\t\ticagt as decimal(38,18),\n\t\ticaicaid as string,\n\t\ticainaid as string,\n\t\ticaindate as timestamp,\n\t\ticaint100prem as decimal(38,18),\n\t\ticaintcurr as string,\n\t\ticaintgrlag as decimal(38,18),\n\t\ticaintosprem as decimal(38,18),\n\t\ticaintrate as decimal(38,18),\n\t\ticaknvmark as string,\n\t\ticalaunchdate as timestamp,\n\t\ticalimldescr as string,\n\t\ticaludate as timestamp,\n\t\ticalusign as string,\n\t\ticamincurr as string,\n\t\ticaminpre as decimal(38,18),\n\t\ticanoofpersons as decimal(38,18),\n\t\ticanote as string,\n\t\ticaobno as decimal(38,18),\n\t\ticaoforder as decimal(38,18),\n\t\ticaosvolamt as decimal(38,18),\n\t\ticaourshare as decimal(38,18),\n\t\ticaowndisc as decimal(38,18),\n\t\ticaoyrno as decimal(38,18),\n\t\ticaoyrnote as string,\n\t\ticaoyrto as decimal(38,18),\n\t\ticapaymfreq as decimal(38,18),\n\t\ticapaymperc as decimal(38,18),\n\t\ticaperspre as decimal(38,18),\n\t\ticapmlamt as decimal(38,18),\n\t\ticapmlcurr as string,\n\t\ticapremgt as decimal(38,18),\n\t\ticaprevyadmfee as decimal(38,18),\n\t\ticaprevyinstad as decimal(38,18),\n\t\ticaprevynatpre as decimal(38,18),\n\t\ticaprevypre as decimal(38,18),\n\t\ticaprevyrate as decimal(38,18),\n\t\ticaprovst as decimal(38,18),\n\t\ticaprwdate as timestamp,\n\t\ticarinote as string,\n\t\ticariobjecttype as string,\n\t\ticasondisc as decimal(38,18),\n\t\ticastat3 as string,\n\t\ticastdate as timestamp,\n\t\ticasthour as decimal(38,18),\n\t\ticasufix2 as string,\n\t\ticat1000prem as decimal(38,18),\n\t\ticatlorat as decimal(38,18),\n\t\ticatotamt as decimal(38,18),\n\t\ticaunitamt as decimal(38,18),\n\t\ticaunitprem as decimal(38,18),\n\t\ticaunits as decimal(38,18),\n\t\ticauwaid as string,\n\t\ticauwkey as string,\n\t\ticauwtotamt as decimal(38,18),\n\t\ticawroforder as decimal(38,18),\n\t\ticawrshare as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> ica\nsource(output(\n\t\tlcrareacd as string,\n\t\tlcrclmtype as string,\n\t\tlcrctrid as string,\n\t\tlcrforeignkey as string,\n\t\tlcrlcaid as string,\n\t\tlcrlccid as string,\n\t\tlcrln5 as decimal(38,18),\n\t\tlcrludate as timestamp,\n\t\tlcrlusign as string,\n\t\tlcrnote as string,\n\t\tlcrpeaid as decimal(38,18),\n\t\tlcrrefnam as string,\n\t\tlcrroletype as string,\n\t\tlcrshare as decimal(38,18),\n\t\tlcrsrtln5 as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lcr\nsource(output(\n\t\tcarcccid as string,\n\t\tcarclmareasw as decimal(38,18),\n\t\tcarcntrysw as decimal(38,18),\n\t\tcarcntysw as decimal(38,18),\n\t\tcarctosw as decimal(38,18),\n\t\tcariso2ch as string,\n\t\tcariso3ch as string,\n\t\tcarisonum as decimal(38,18),\n\t\tcarldescr as string,\n\t\tcarlevelarea as decimal(38,18),\n\t\tcarleveltype as string,\n\t\tcarleviso3ch as string,\n\t\tcarmdescr as string,\n\t\tcarriskiness as string,\n\t\tcarsdescr as string,\n\t\tcarshipsw as decimal(38,18),\n\t\tcarstopuse as string,\n\t\tcarsw5 as string,\n\t\tcartaxdaterulelstins as decimal(38,18),\n\t\tcartaxdaterulemain as decimal(38,18),\n\t\tcartaxexternal as string,\n\t\tcartradesw as decimal(38,18),\n\t\tcarusasw as decimal(38,18),\n\t\tcarwarzonesw as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> car\nsource(output(\n\t\tlaaacdn3 as decimal(38,18),\n\t\tlaaclmdate as timestamp,\n\t\tlaaclmsta as string,\n\t\tlaaknvmark as string,\n\t\tlaalaaid as string,\n\t\tlaaldescr as string,\n\t\tlaasupevnt as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> laa\nsource(output(\n\t\tagaadjsign as string,\n\t\tagaadmcode as string,\n\t\tagaagaid as string,\n\t\tagaagname as string,\n\t\tagaagno as decimal(38,18),\n\t\tagaagnorf as decimal(38,18),\n\t\tagaagtype as decimal(38,18),\n\t\tagaalgid as string,\n\t\tagaareacd as string,\n\t\tagaassetno as decimal(38,18),\n\t\tagaassetsubno as decimal(38,18),\n\t\tagaausign as string,\n\t\tagaautoconpol as string,\n\t\tagaavttrkeep as string,\n\t\tagaavttrnote as string,\n\t\tagaavttrpeaid as decimal(38,18),\n\t\tagaavttrpros as decimal(38,18),\n\t\tagaavttrstatus as string,\n\t\tagaavttrynsw as string,\n\t\tagabusnbranch as decimal(38,18),\n\t\tagabusncla as decimal(38,18),\n\t\tagabusndiv as decimal(38,18),\n\t\tagabusnregion as decimal(38,18),\n\t\tagabusnsec as decimal(38,18),\n\t\tagacantxt as string,\n\t\tagacashbefcovdate as timestamp,\n\t\tagacashbeforecover as string,\n\t\tagaccpid as string,\n\t\tagachartradeteam as string,\n\t\tagaclasstype as string,\n\t\tagaclmsign as string,\n\t\tagaclmuat as string,\n\t\tagaclosedate as timestamp,\n\t\tagaclosesign as string,\n\t\tagacloseynsw as string,\n\t\tagacomfacnote as string,\n\t\tagacomfacpeaid as decimal(38,18),\n\t\tagacomfacynsw as string,\n\t\tagacomp2 as decimal(38,18),\n\t\tagacompdisckeep as string,\n\t\tagacompdiscnote as string,\n\t\tagacompdiscpeaid as decimal(38,18),\n\t\tagacompdiscpros as decimal(38,18),\n\t\tagacompdiscynsw as string,\n\t\tagacomtarnote as string,\n\t\tagacomtarpeaid as decimal(38,18),\n\t\tagacomtarstknote as string,\n\t\tagacomtarstkpeaid as decimal(38,18),\n\t\tagacomtarstkynsw as string,\n\t\tagacomtarynsw as string,\n\t\tagaconcern as decimal(38,18),\n\t\tagaconnectsw as string,\n\t\tagaconsrnote as string,\n\t\tagaconsrynsw as string,\n\t\tagacontinsagaid as string,\n\t\tagacontinsagno as decimal(38,18),\n\t\tagacontinsynsw as string,\n\t\tagacrdate as timestamp,\n\t\tagacrsign as string,\n\t\tagacumul as string,\n\t\tagadatcan as timestamp,\n\t\tagadatest as timestamp,\n\t\tagadatora as timestamp,\n\t\tagadatore as timestamp,\n\t\tagadatpca as timestamp,\n\t\tagadecltyp as string,\n\t\tagadwbs as string,\n\t\tagaeldocynsw as string,\n\t\tagaelinvynsw as string,\n\t\tagaendate as timestamp,\n\t\tagaenhour as decimal(38,18),\n\t\tagaentrytype as string,\n\t\tagaeosign as string,\n\t\tagafileref as decimal(38,18),\n\t\tagafixprnote as string,\n\t\tagafixprpeaid as decimal(38,18),\n\t\tagafixprynsw as string,\n\t\tagafromcomp as decimal(38,18),\n\t\tagagday as decimal(38,18),\n\t\tagagen1keep as string,\n\t\tagagen1note as string,\n\t\tagagen1peaid as decimal(38,18),\n\t\tagagen1prov as decimal(38,18),\n\t\tagagen1ynsw as string,\n\t\tagagen2keep as string,\n\t\tagagen2note as string,\n\t\tagagen2peaid as decimal(38,18),\n\t\tagagen2prov as decimal(38,18),\n\t\tagagen2ynsw as string,\n\t\tagagen3keep as string,\n\t\tagagen3note as string,\n\t\tagagen3peaid as decimal(38,18),\n\t\tagagen3prov as decimal(38,18),\n\t\tagagen3ynsw as string,\n\t\tagagident as string,\n\t\tagagmonth as decimal(38,18),\n\t\tagagtype as string,\n\t\tagahealthdate as timestamp,\n\t\tagahealthynsw as string,\n\t\tagaincprovkeep as string,\n\t\tagaincprovnote as string,\n\t\tagaincprovpeaid as decimal(38,18),\n\t\tagaincprovpros as decimal(38,18),\n\t\tagaincprovynsw as string,\n\t\tagaincrebkeep as string,\n\t\tagaincrebnote as string,\n\t\tagaincrebpeaid as decimal(38,18),\n\t\tagaincrebpros as decimal(38,18),\n\t\tagaincrebynsw as string,\n\t\tagaindustrytxt as string,\n\t\tagainstti as string,\n\t\tagaintnote as string,\n\t\tagaisic as string,\n\t\tagaiyear as decimal(38,18),\n\t\tagaknvmark as string,\n\t\tagaktocred as decimal(38,18),\n\t\tagaktocust as decimal(38,18),\n\t\tagaktodeb as decimal(38,18),\n\t\tagaliabendate as timestamp,\n\t\tagalocpolissued as string,\n\t\tagalongname as string,\n\t\tagalostcode as string,\n\t\tagalosttxt35 as string,\n\t\tagaludate as timestamp,\n\t\tagalusign as string,\n\t\tagamaiper as decimal(38,18),\n\t\tagamgrpnote as string,\n\t\tagamgrpynsw as string,\n\t\tagamincurr as string,\n\t\tagaminpre as decimal(38,18),\n\t\taganoterm as decimal(38,18),\n\t\tagansalecom as decimal(38,18),\n\t\taganscomynsw as string,\n\t\taganumpers as decimal(38,18),\n\t\tagaoffice as decimal(38,18),\n\t\tagaoiltyp as decimal(38,18),\n\t\tagaopencover as string,\n\t\tagaordercode as string,\n\t\tagaordertxt35 as string,\n\t\tagaorgcrdate as timestamp,\n\t\tagaorgins as decimal(38,18),\n\t\tagaoxno as decimal(38,18),\n\t\tagaoxrefid as string,\n\t\tagaoyrno as decimal(38,18),\n\t\tagaoyrnote as string,\n\t\tagaoyrto as decimal(38,18),\n\t\tagapeoid as string,\n\t\tagapictype as string,\n\t\tagapwcode as decimal(38,18),\n\t\tagapwfrdate as timestamp,\n\t\tagaratcod as string,\n\t\tagaratemodel as decimal(38,18),\n\t\tagarefcod as string,\n\t\tagareftxt as string,\n\t\tagaremove as decimal(38,18),\n\t\tagarenbatchid as decimal(38,18),\n\t\tagarencod as decimal(38,18),\n\t\tagarentxt as string,\n\t\tagasalesdiv as decimal(38,18),\n\t\tagasetfreq as decimal(38,18),\n\t\tagasettldetprt as string,\n\t\tagashut as string,\n\t\tagasitid as string,\n\t\tagaskipinstadynsw as string,\n\t\tagasource as decimal(38,18),\n\t\tagastat1 as string,\n\t\tagastat2 as string,\n\t\tagastateareacd as string,\n\t\tagastdate as timestamp,\n\t\tagasthour as decimal(38,18),\n\t\tagaswo as string,\n\t\tagatocomp as decimal(38,18),\n\t\tagatrackit as string,\n\t\tagatrackit1 as string,\n\t\tagatrackit2 as string,\n\t\tagatrackit3 as string,\n\t\tagatreatas as string,\n\t\tagaturnover as decimal(38,18),\n\t\tagatzone as string,\n\t\tagauat as string,\n\t\tagaufafpynsw as string,\n\t\tagausage as string,\n\t\tagausecod as string,\n\t\tagauwsign as string,\n\t\tagawbs as string,\n\t\tagawbscust as string,\n\t\tagawntnocperiod as decimal(38,18),\n\t\tagawnttext35 as string,\n\t\tagawntynsw as string,\n\t\tagaxmednote as string,\n\t\tagaxmedpeaid as decimal(38,18),\n\t\tagaxmedynsw as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> aga\nsource(output(\n\t\tsigaacynsw as string,\n\t\tsigaccoaccg as decimal(38,18),\n\t\tsigaccosref as string,\n\t\tsigaccosubref as string,\n\t\tsigaccoswitches as string,\n\t\tsigaccynsw as string,\n\t\tsigaclynsw as string,\n\t\tsigagaln2 as decimal(38,18),\n\t\tsigauwynsw as string,\n\t\tsigbprtpl as string,\n\t\tsigbusnbranch as decimal(38,18),\n\t\tsigbusncla as decimal(38,18),\n\t\tsigbusndiv as decimal(38,18),\n\t\tsigbusnregion as decimal(38,18),\n\t\tsigbusnsec as decimal(38,18),\n\t\tsigbusntyp as decimal(38,18),\n\t\tsigcfax as string,\n\t\tsigclaaccess as decimal(38,18),\n\t\tsigclaaie as string,\n\t\tsigclaclmaccess as decimal(38,18),\n\t\tsigclacovaccess as decimal(38,18),\n\t\tsigclaimfunc as string,\n\t\tsigclaselection as string,\n\t\tsigclmdefupdate as string,\n\t\tsigclmswitches as string,\n\t\tsigclmynsw as string,\n\t\tsigclosefunc as string,\n\t\tsigcmail as string,\n\t\tsigcomp2 as decimal(38,18),\n\t\tsigcondcoaie as string,\n\t\tsigcondcoclmaccess as decimal(38,18),\n\t\tsigcondcocovaccess as decimal(38,18),\n\t\tsigcondcoselection as string,\n\t\tsigconnbusnbranch as decimal(38,18),\n\t\tsigconoffice as decimal(38,18),\n\t\tsigcphone as string,\n\t\tsigcrdate as timestamp,\n\t\tsigcreatefunc as string,\n\t\tsigcreateswitches as string,\n\t\tsigcrsign as string,\n\t\tsigcurr as string,\n\t\tsigdebugidentify as string,\n\t\tsigdebugmacro as string,\n\t\tsigdefagtype as decimal(38,18),\n\t\tsigdefccode as decimal(38,18),\n\t\tsigdeflanguage as string,\n\t\tsigdefobrt as decimal(38,18),\n\t\tsigdivaccess as decimal(38,18),\n\t\tsigdivaie as string,\n\t\tsigdivclmaccess as decimal(38,18),\n\t\tsigdivcovaccess as decimal(38,18),\n\t\tsigdivselection as string,\n\t\tsigdocsecacc as decimal(38,18),\n\t\tsigdocsecclm as decimal(38,18),\n\t\tsigdocsecoth as decimal(38,18),\n\t\tsigdocsecuw as decimal(38,18),\n\t\tsigefiledomain as string,\n\t\tsigefilelibrary as string,\n\t\tsigefilepassword as string,\n\t\tsigefileplace as string,\n\t\tsigefileuserid as string,\n\t\tsigelremitfunc as string,\n\t\tsigemploymentid as string,\n\t\tsigfirstname as string,\n\t\tsigfltipacondco as decimal(38,18),\n\t\tsigfltipacrsign as string,\n\t\tsigfltipaintrst as string,\n\t\tsigfltipaitemno as string,\n\t\tsigfltipalegalclm as string,\n\t\tsigfltipapcod2 as string,\n\t\tsigfltipapcode as string,\n\t\tsigfltipashowcancl as string,\n\t\tsigfltipashowsold as string,\n\t\tsigfltipashowvalid as string,\n\t\tsigfltlcadelclms as string,\n\t\tsigfltlcafilter as decimal(38,18),\n\t\tsigfltlcaonlyclmins as string,\n\t\tsigformsecurity as decimal(38,18),\n\t\tsigfryear as decimal(38,18),\n\t\tsigfunc as string,\n\t\tsiggensec as decimal(38,18),\n\t\tsiggroupid as string,\n\t\tsighierarc as string,\n\t\tsiginqaie as string,\n\t\tsiginqselection as string,\n\t\tsigintaie as string,\n\t\tsigintclmaccess as decimal(38,18),\n\t\tsigintcovaccess as decimal(38,18),\n\t\tsigintselection as string,\n\t\tsigipaln2 as decimal(38,18),\n\t\tsigisaln2 as decimal(38,18),\n\t\tsigitemnoaie as string,\n\t\tsigitemnoclmaccess as decimal(38,18),\n\t\tsigitemnocovaccess as decimal(38,18),\n\t\tsigitemnoselection as string,\n\t\tsigiyear as decimal(38,18),\n\t\tsigiyearynsw as string,\n\t\tsiglang2 as string,\n\t\tsiglastlogin as decimal(38,18),\n\t\tsiglastname as string,\n\t\tsiglcaln2 as decimal(38,18),\n\t\tsigldescr as string,\n\t\tsigletterprlabel as string,\n\t\tsiglocaie as string,\n\t\tsiglocdeftab as decimal(38,18),\n\t\tsiglocselection as string,\n\t\tsiglocswitches as string,\n\t\tsigludate as timestamp,\n\t\tsiglusign as string,\n\t\tsigmaildisclaimer as string,\n\t\tsigmaildisclaimfrom as string,\n\t\tsigmailfromaddress as string,\n\t\tsigmailpassword as string,\n\t\tsigmailsentitems as string,\n\t\tsigmailuser as string,\n\t\tsigmainsign as string,\n\t\tsigmaisec as decimal(38,18),\n\t\tsigmdescr as string,\n\t\tsigmiscprlabel as string,\n\t\tsignameid as string,\n\t\tsignoteprlabel as string,\n\t\tsigobaln2 as decimal(38,18),\n\t\tsigoffice as decimal(38,18),\n\t\tsigofficeaccess as decimal(38,18),\n\t\tsigofficeaie as string,\n\t\tsigofficeclmaccess as decimal(38,18),\n\t\tsigofficecovaccess as decimal(38,18),\n\t\tsigofficeselection as string,\n\t\tsigonlinemaster as string,\n\t\tsigorgplace as string,\n\t\tsigpayswitches as string,\n\t\tsigpeaid as decimal(38,18),\n\t\tsigpeoplesecur as string,\n\t\tsigperssecur as string,\n\t\tsigplinterimynsw as string,\n\t\tsigpltransfunc as string,\n\t\tsigpolprlabel as string,\n\t\tsigposition as string,\n\t\tsigpositioncode as string,\n\t\tsigpremswitches as string,\n\t\tsigpwdate as timestamp,\n\t\tsigsecaccess as decimal(38,18),\n\t\tsigsecaie as string,\n\t\tsigsecclmaccess as decimal(38,18),\n\t\tsigseccovaccess as decimal(38,18),\n\t\tsigsecselection as string,\n\t\tsigsettpolynsw as string,\n\t\tsigsign as string,\n\t\tsigsitid as string,\n\t\tsigspecialversion as string,\n\t\tsigsqlseq as decimal(38,18),\n\t\tsigstopuse as string,\n\t\tsigtffautouser as string,\n\t\tsigtitle as string,\n\t\tsigtitlecode as string,\n\t\tsigtoyear as decimal(38,18),\n\t\tsiguwaynsw as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> sig\nsource(output(\n\t\tinaaccadrpeaid as decimal(38,18),\n\t\tinaag100e as string,\n\t\tinaagaid as string,\n\t\tinaareacd as string,\n\t\tinaassetno as decimal(38,18),\n\t\tinaassetsubno as decimal(38,18),\n\t\tinaborind as string,\n\t\tinabusnsubcla as decimal(38,18),\n\t\tinabusntyp as decimal(38,18),\n\t\tinacapoty as decimal(38,18),\n\t\tinacedent as decimal(38,18),\n\t\tinaclmadrpeaid as decimal(38,18),\n\t\tinaclmlead as decimal(38,18),\n\t\tinacondco as decimal(38,18),\n\t\tinacondset as string,\n\t\tinacooroccynsw as string,\n\t\tinacrdate as timestamp,\n\t\tinacrobbid as string,\n\t\tinacroynsw as string,\n\t\tinacrsign as string,\n\t\tinacshind as decimal(38,18),\n\t\tinacurr as string,\n\t\tinadescr6 as string,\n\t\tinadescr7 as string,\n\t\tinadwbsname as string,\n\t\tinaebusnsubcla as decimal(38,18),\n\t\tinaetcdone as string,\n\t\tinaetcdonedate as timestamp,\n\t\tinaetcpremium as string,\n\t\tinafileref as decimal(38,18),\n\t\tinafortcode as decimal(38,18),\n\t\tinagroup as decimal(38,18),\n\t\tinaimpexp as decimal(38,18),\n\t\tinainaid as string,\n\t\tinaindex as decimal(38,18),\n\t\tinainktp as string,\n\t\tinainno as decimal(38,18),\n\t\tinaintnote as string,\n\t\tinaintrst as string,\n\t\tinainttype as string,\n\t\tinaintyp as decimal(38,18),\n\t\tinaisaid as string,\n\t\tinaitaid as string,\n\t\tinaitemno as string,\n\t\tinaiyear as decimal(38,18),\n\t\tinaknvmark as string,\n\t\tinalocpolissued as string,\n\t\tinalosstxt35 as string,\n\t\tinalostcode as string,\n\t\tinalosttxt35 as string,\n\t\tinaludate as timestamp,\n\t\tinalusign as string,\n\t\tinamainin as string,\n\t\tinamutual as string,\n\t\tinanatsw as string,\n\t\tinanopers as decimal(38,18),\n\t\tinaob100e as string,\n\t\tinaobno as decimal(38,18),\n\t\tinaoperatingname as string,\n\t\tinaoperator as decimal(38,18),\n\t\tinaordercode as string,\n\t\tinaordertxt35 as string,\n\t\tinaoxno as decimal(38,18),\n\t\tinaoxrefid as string,\n\t\tinapayer as decimal(38,18),\n\t\tinapiffotype as decimal(38,18),\n\t\tinapintsh as decimal(38,18),\n\t\tinapirdctype as decimal(38,18),\n\t\tinapnote as string,\n\t\tinapofid as string,\n\t\tinaratema as string,\n\t\tinaratind as decimal(38,18),\n\t\tinareinnoof as decimal(38,18),\n\t\tinareinshare as decimal(38,18),\n\t\tinareinynsw as string,\n\t\tinarencod as decimal(38,18),\n\t\tinarenewswitches as string,\n\t\tinarenfieldsman as string,\n\t\tinarentxt as string,\n\t\tinaretyp as decimal(38,18),\n\t\tinariscod as decimal(38,18),\n\t\tinartlead as decimal(38,18),\n\t\tinaseasonmonthp as decimal(38,18),\n\t\tinaseasonnote as string,\n\t\tinaseasonynsw as string,\n\t\tinaslipref as string,\n\t\tinasmallcraft as string,\n\t\tinastat1 as string,\n\t\tinastopsettlement as string,\n\t\tinasufix1 as string,\n\t\tinataxcod as string,\n\t\tinataxexternal as string,\n\t\tinatocefo as string,\n\t\tinatotind as decimal(38,18),\n\t\tinatrdescr as string,\n\t\tinatzone as string,\n\t\tinausecod as string,\n\t\tinauwradrpeaid as decimal(38,18),\n\t\tinavoyagededynsw as string,\n\t\tinawarranty2 as decimal(38,18),\n\t\tinawarrenty as decimal(38,18),\n\t\tinawarrsw as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> ina\nsource(output(\n\t\tlabacarea as string,\n\t\tlabagtype as decimal(38,18),\n\t\tlabareacd as string,\n\t\tlabbigevent as string,\n\t\tlabclmdate as timestamp,\n\t\tlabclmsta as string,\n\t\tlabevno as decimal(38,18),\n\t\tlabknvmark as string,\n\t\tlablaaid as string,\n\t\tlablabid as string,\n\t\tlablodescr as string,\n\t\tlabmainev as string,\n\t\tlabomclmtype as string,\n\t\tlabportcccid as string,\n\t\tlabportunlid as string,\n\t\tlabtime as decimal(38,18),\n\t\tlabtzone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lab\nsource(output(\n\t\tldaage as decimal(38,18),\n\t\tldaclmcat as string,\n\t\tldacrdate as timestamp,\n\t\tldacrsign as string,\n\t\tldadays as decimal(38,18),\n\t\tldadedamt as decimal(38,18),\n\t\tldadedamtp as decimal(38,18),\n\t\tldadedcd3 as string,\n\t\tldadedcurr as string,\n\t\tldadedkey as string,\n\t\tldadedperc as decimal(38,18),\n\t\tldagrlamt as decimal(38,18),\n\t\tldalcaid as string,\n\t\tldaldaid as string,\n\t\tldaln2 as decimal(38,18),\n\t\tldatext as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lda\nsource(output(\n\t\tqtbdispynsw as string,\n\t\tqtbfieldn as string,\n\t\tqtbmdescr as string,\n\t\tqtbsdescr as string,\n\t\tqtbvalue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> qtb\nsource(output(\n\t\tname as string,\n\t\tpeapeaid as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> staParisClmLead\nsource(output(\n\t\tunlairport as string,\n\t\tunlaltname as string,\n\t\tunlaltwodiacritics as string,\n\t\tunlbordercrossing as string,\n\t\tunlchangeindicator as string,\n\t\tunlcoordinates as string,\n\t\tunlcustom as string,\n\t\tunlcustomdim as string,\n\t\tunlfixedtransp as string,\n\t\tunliata as string,\n\t\tunliso2ch as string,\n\t\tunlloccode as string,\n\t\tunllocname as string,\n\t\tunllocwodiacritics as string,\n\t\tunlludate as timestamp,\n\t\tunllusign as string,\n\t\tunlmdescr as string,\n\t\tunlmulifunc as string,\n\t\tunlname as string,\n\t\tunlport as string,\n\t\tunlpostalexoff as string,\n\t\tunlrailterminal as string,\n\t\tunlremarks as string,\n\t\tunlroadterminal as string,\n\t\tunlstopuse as string,\n\t\tunlsubdiv as string,\n\t\tunlunlid as string,\n\t\tunlunlludate as timestamp,\n\t\tunlunlstatus as string,\n\t\tunlwodiacritics as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> unl\nsource(output(\n\t\tagreement_type as string,\n\t\tbusiness_area as string,\n\t\tcoverage_code as string,\n\t\tcoverage_desc as string,\n\t\tinserted_date as timestamp,\n\t\tmutual_fixed as string,\n\t\tpk_risk_group as double,\n\t\treinsurance_pgm_code as string,\n\t\treinsurance_pgm_desc as string,\n\t\trisk_group_code as string,\n\t\trisk_group_desc as string,\n\t\trisk_group_sort as double,\n\t\tsegment_code as string,\n\t\tsegment_desc as string,\n\t\tupdated_date as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> staRiskGroup\nsource(output(\n\t\taccounting_month_end_date as timestamp,\n\t\taccounting_month_id as double,\n\t\taccounting_month_key as decimal(38,18),\n\t\taccounting_month_of_quarter as double,\n\t\taccounting_month_of_year as double,\n\t\taccounting_month_start_date as timestamp,\n\t\taccounting_month_time_span as double,\n\t\taccounting_qtr_end_date as timestamp,\n\t\taccounting_qtr_of_year as double,\n\t\taccounting_qtr_start_date as timestamp,\n\t\taccounting_qtr_time_span as double,\n\t\taccounting_quarter_id as double,\n\t\taccounting_quarter_key as decimal(38,18),\n\t\taccounting_year_end_date as timestamp,\n\t\taccounting_year_id as double,\n\t\taccounting_year_key as decimal(38,18),\n\t\taccounting_year_number as double,\n\t\taccounting_year_start_date as timestamp,\n\t\taccounting_year_time_span as double,\n\t\tall_years as string,\n\t\tcalendar_date_id as double,\n\t\tcalendar_date_key as timestamp,\n\t\tday as timestamp,\n\t\tday_name as string,\n\t\tday_of_accounting_month as double,\n\t\tday_of_accounting_quarter as double,\n\t\tday_of_accounting_year as double,\n\t\tday_of_policy_month as double,\n\t\tday_of_policy_quarter as double,\n\t\tday_of_policy_year as double,\n\t\tday_of_underwriting_month as double,\n\t\tday_of_underwriting_quarter as double,\n\t\tday_of_underwriting_year as double,\n\t\tdimension_key as double,\n\t\tpolicy_month_end_date as timestamp,\n\t\tpolicy_month_id as double,\n\t\tpolicy_month_key as decimal(38,18),\n\t\tpolicy_month_name as string,\n\t\tpolicy_month_of_quarter as double,\n\t\tpolicy_month_of_year as double,\n\t\tpolicy_month_start_date as timestamp,\n\t\tpolicy_month_time_span as double,\n\t\tpolicy_qtr_end_date as timestamp,\n\t\tpolicy_qtr_of_year as double,\n\t\tpolicy_qtr_start_date as timestamp,\n\t\tpolicy_qtr_time_span as double,\n\t\tpolicy_quarter_id as double,\n\t\tpolicy_quarter_key as decimal(38,18),\n\t\tpolicy_year_end_date as timestamp,\n\t\tpolicy_year_id as double,\n\t\tpolicy_year_key as decimal(38,18),\n\t\tpolicy_year_number as double,\n\t\tpolicy_year_start_date as timestamp,\n\t\tpolicy_year_time_span as double,\n\t\ttop_id as double,\n\t\ttop_key as decimal(38,18),\n\t\tunderwriting_month_end_date as timestamp,\n\t\tunderwriting_month_id as double,\n\t\tunderwriting_month_key as decimal(38,18),\n\t\tunderwriting_month_of_quarter as double,\n\t\tunderwriting_month_of_year as double,\n\t\tunderwriting_month_start_date as timestamp,\n\t\tunderwriting_month_time_span as double,\n\t\tunderwriting_qtr_end_date as timestamp,\n\t\tunderwriting_qtr_of_year as double,\n\t\tunderwriting_qtr_start_date as timestamp,\n\t\tunderwriting_qtr_time_span as double,\n\t\tunderwriting_quarter_id as double,\n\t\tunderwriting_quarter_key as decimal(38,18),\n\t\tunderwriting_year_end_date as timestamp,\n\t\tunderwriting_year_id as double,\n\t\tunderwriting_year_key as decimal(38,18),\n\t\tunderwriting_year_number as double,\n\t\tunderwriting_year_start_date as timestamp,\n\t\tunderwriting_year_time_span as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> dimTime\nsource(output(\n\t\tbusiness_area as string,\n\t\tdate_inserted as timestamp,\n\t\tdate_updated as timestamp,\n\t\tinserted_by as string,\n\t\tmutual_fixed as string,\n\t\tpk_incident_rsv_group_me as double,\n\t\trob_risk_group_code as string,\n\t\trob_risk_group_desc as string,\n\t\trob_segment_code as string,\n\t\trob_segment_desc as string,\n\t\trsv_group_code as string,\n\t\trsv_group_desc as string,\n\t\tspecial_cases as string,\n\t\tupdated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> staIncidentRsvGroupMe\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 124) ~> currency\nhlpExchangeRateToUsd select(mapColumn(\n\t\tEXCHANGE_FROM_DATE,\n\t\tEXCHANGE_RATE,\n\t\tFROM_CURRENCY_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSD\nfil select(mapColumn(\n\t\tfilfilid,\n\t\tfilvaldate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> filtable\nlcc select(mapColumn(\n\t\teach(match(in(['lcclcaid','lcclccid'],name)),\n\t\t\t$$+'_maxIncurred' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lccmaxincurred\ncurrency select(mapColumn(\n\t\teach(match(in(['target_code'],name)),\n\t\t\t$$+'_currency' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrency\nlcf filter(contains([2,4], #item == lcftrtmco)) ~> lcftrtmco\nselectLcf derive(lcfchngtime = toDate(left(lcfchngtime,8),'yyyyMMdd')) ~> lfcchngtime\nlcftrtmco select(mapColumn(\n\t\tlcfchngtime,\n\t\tlcflcaid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectLcf\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaicaid','lcaclmdate','lcaobno','lcaclodate','lcalabid','lcatrtmco','lcauwsign','lcaacstat','lcacrsign','lcawrkplccod','lcacrdate','lcaltdate','lcaadjsign','lcacefocc','lcaclmcac','lcacefocm','lcabirtno','lcaextclmid','lcalossco','lcatlotype','lcacategorytype','lcaobno','lcaldescr','lcaportunlid','lcamfkey','lcaprocess'],name)),\n\t\t\t$$+'_lcfInput' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaLcfInput\nlcaLcfInput filter(!isNull(lcaclodate_lcfInput)) ~> lcatableLcfInput\nlfcchngtime, lcatableLcfInput join(lcflcaid == lcalcaid_lcfInput,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcflca\nfal select(mapColumn(\n\t\teach(match(in(['fallccid','falfilid','falcurr','falinout','faloutcode','faloutstanding','falsettled'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> falcolumns\nfalcolumns, xRefCurrency lookup(falcurr == target_code_currency,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> falCurr\nlccmaxincurred, faltable join(lcclccid_maxIncurred == fallccid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lccmaxincurredfal\nlccmaxincurredfal, filtable join(falfilid == filfilid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falfil\nfalfil, exchrateUSD join(coalesce(falcurr,'USD') == FROM_CURRENCY_CODE\n\t&& filvaldate == EXCHANGE_FROM_DATE,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinExchrate\nfalCurr select(mapColumn(\n\t\tfalfilid,\n\t\tfalinout,\n\t\tfallccid,\n\t\tfaloutcode,\n\t\tfaloutstanding,\n\t\tfalsettled,\n\t\tfalcurr = target_code_currency\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> faltable\njoinExchrate derive(claim_incurred_usd = case((falinout=='I') || (falinout=='O' && faloutcode==2), coalesce(faloutstanding/EXCHANGE_RATE,0),toDecimal(0)) +\ncase((falinout=='I') || (falinout=='O' && faloutcode==2), coalesce(falsettled/EXCHANGE_RATE,0),toDecimal(0))) ~> claimIncurredUsd\nclaimIncurredUsd aggregate(groupBy(lcclcaid_maxIncurred,\n\t\tlcclccid_maxIncurred),\n\tsum_claim_incurred_usd = sum(claim_incurred_usd)) ~> sumClaimIncurredUsd\nsumClaimIncurredUsd aggregate(groupBy(lcclcaid_maxIncurred,\n\t\tsum_claim_incurred_usd),\n\tmin_lccid_maxIncurred = min(lcclccid_maxIncurred)) ~> minLccid\nminLccid aggregate(groupBy(lcclcaid_maxIncurred),\n\tmax_sum_claim_incurred_usd = max(sum_claim_incurred_usd)) ~> maxSumClaimIncurredUsd\nlcc select(mapColumn(\n\t\teach(match(in(['lcclcaid','lcclccid','lccvoyagefr','lccvoyageto','lccclmtype','lccuwsign'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lccColumns\nminLccid select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_tmp_lcc_claim' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tmpLccClaim\nmaxSumClaimIncurredUsd, tmpLccClaim join(lcclcaid_maxIncurred == lcclcaid_maxIncurred_tmp_lcc_claim\n\t&& max_sum_claim_incurred_usd == sum_claim_incurred_usd_tmp_lcc_claim,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> maxSumClaimTmpClaim\nmaxSumClaimTmpClaim, lccColumns join(lcclcaid_maxIncurred == lcclcaid\n\t&& min_lccid_maxIncurred_tmp_lcc_claim == lcclccid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> maxSumClaimLccTable\nlcflca filter(lcfchngtime <toDate(lcaclodate_lcfInput)) ~> filterDates\nmaxSumClaimLccTable select(mapColumn(\n\t\tlcclcaid,\n\t\tlcclccid,\n\t\tlccuwsign,\n\t\tlccvoyagefr,\n\t\tlccvoyageto\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcctable\nfilterDates aggregate(groupBy(lcflcaid),\n\tlcfchngtime = max(lcfchngtime)) ~> lcftable\nobb select(mapColumn(\n\t\teach(match(in(['obbobno','obbstdate','obbendate','obbname'],name)),\n\t\t\t$$+'_clm' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbClaim\noba select(mapColumn(\n\t\teach(match(in(['obaobno','obaimono'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obatable\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaclmdate','lcaobno'],name)),\n\t\t\t$$+'_claim_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaClaimObject\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaclmdate','lcaicaid'],name)),\n\t\t\t$$+'_risk_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaRiskObject\nica select(mapColumn(\n\t\teach(match(in(['icaicaid','icaobno'],name)),\n\t\t\t$$+'_risk_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> icaRiskObject\nlcaClaimObject, obatable join(lcaobno_claim_object == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcaoba\nlcaoba, obbClaim join(obaobno == obbobno_clm,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter((coalesce(lcaclmdate_claim_object,currentTimestamp()) > coalesce(obbstdate_clm, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(lcaclmdate_claim_object,currentTimestamp()) < coalesce(obbendate_clm, addDays(currentTimestamp(), 36500)))) ~> claimObject\nlcaRiskObject, icaRiskObject join(lcaicaid_risk_object == icaicaid_risk_object,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcaica\nlcaica, obatable join(icaobno_risk_object == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaoba\nicaoba, obbRisk join(obaobno == obbobno_risk,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obboba\nobboba filter((coalesce(lcaclmdate_risk_object,currentTimestamp()) > coalesce(obbstdate_risk, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(lcaclmdate_risk_object,currentTimestamp()) < coalesce(obbendate_risk, addDays(currentTimestamp(), 36500)))) ~> riskObject\nriskObject, claimObject union(byName: true)~> UnionRiskAndClaimObject\nUnionRiskAndClaimObject derive(obj_null = 1+null()) ~> objNull\nobjNull aggregate(groupBy(lcalcaid_risk_object),\n\tobbname_risk = max(obbname_risk),\n\t\tobbname_clm = max(obbname_clm),\n\t\tobaimono = max(obaimono)) ~> AggregateClmRiskObjects\nobb select(mapColumn(\n\t\teach(match(in(['obbobno','obbstdate','obbendate','obbname'],name)),\n\t\t\t$$+'_risk' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbRisk\nAggregateClmRiskObjects derive(obbname = case(isNull(trim(obbname_risk)), trim(obbname_clm), trim(obbname_risk))) ~> obbname\nobbname select(mapColumn(\n\t\tlcalcaid_obbtable = lcalcaid_risk_object,\n\t\tobaimono,\n\t\tobbname\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbtable\nlcr filter(lower(lcrctrid) == 'source') ~> filterLcrctrid\nfilterLcrctrid select(mapColumn(\n\t\teach(match(in(['lcrlcaid','lcrrefnam'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectLcr\nselectLcr aggregate(groupBy(lcrlcaid),\n\tmax_lcrrefname = max(lcrrefnam)) ~> lcrtable\ncar select(mapColumn(\n\t\teach(match(in(['cariso3ch','carmdescr'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> cartable\nlaa select(mapColumn(\n\t\teach(match(in(['laalaaid','laasupevnt'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> laatable\nlca select(mapColumn(\n\t\teach(match(in(['lcalabid','lcatrtmco','lcalcaid','lcaicaid','lcauwsign','lcaclmdate','lcacrsign','lcawrkplccod','lcacrdate','lcaclodate','lcaltdate','lcaadjsign','lcacefocc','lcaclmcac','lcacefocm','lcabirtno','lcaextclmid','lcalossco','lcatlotype','lcacategorytype','lcaobno','lcaldescr','lcaportunlid','lcamfkey','lcaprocess','lcaclmid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcatable\naga select(mapColumn(\n\t\teach(match(in(['agaagaid','agabusndiv','agabusncla','agabusnsec'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> agatable\nsig select(mapColumn(\n\t\teach(match(in(['sigsign','sigoffice'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sigtable\nina select(mapColumn(\n\t\teach(match(in(['inainaid','inaclmlead','inaintrst','inamutual'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> inatable\nica select(mapColumn(\n\t\teach(match(in(['icaicaid','icaobno','icainaid','icaagaid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> icatable\nlab select(mapColumn(\n\t\teach(match(in(['lablabid','labclmdate','labmainev','lablodescr','labagtype','lablaaid','labareacd','labportunlid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> labtable\nlda select(mapColumn(\n\t\teach(match(in(['ldalcaid','ldadedcurr','ldadedamt','ldatext','ldadays','ldaldaid'],name)),\n\t\t\t$$+'_max' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMaxColumns\nlda select(mapColumn(\n\t\teach(match(in(['ldadedcurr','ldadedamt','ldatext','ldadays','ldaldaid','ldalcaid'],name)),\n\t\t\t$$+'_min' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMinColumns\nFilterldadedcd3 aggregate(groupBy(ldalcaid),\n\tmax_ldaldaid = max(ldaldaid),\n\t\tmin_ldaldaid = min(ldaldaid)) ~> Aggregateldaldaid\nlda filter(!in(['990','999'], ldadedcd3)) ~> Filterldadedcd3\nldaMaxColumns, Aggregateldaldaid join(ldaldaid_max == max_ldaldaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinMaxLdaldaid\nldaMinColumns, Aggregateldaldaid join(ldaldaid_min == min_ldaldaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinMinLdaldaid\njoinMaxLdaldaid select(mapColumn(\n\t\tldadays_max,\n\t\tldadedamt_max,\n\t\tldadedcurr_max,\n\t\tldalcaid_max,\n\t\tldaldaid_max,\n\t\tldatext_max\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMax\njoinMinLdaldaid select(mapColumn(\n\t\tldadays_min,\n\t\tldadedamt_min,\n\t\tldadedcurr_min,\n\t\tldalcaid_min,\n\t\tldaldaid_min,\n\t\tldatext_min\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMin\nicatable, agatable join(icaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaaga\nicaaga, lcatable join(icaicaid == lcaicaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icalca\nicalca, labtable join(lcalabid == lablabid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcalab\nlcalab, inatable join(icainaid == inainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaina\nicaina, cartable join(labareacd == cariso3ch,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> labcar\nlabcar, laatable join(lablaaid == laalaaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lablaa\nlablaa, ldaMax join(lcalcaid == ldalcaid_max,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaldaMax\nlcaldaMax, ldaMin join(lcalcaid == ldalcaid_min,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaldaMin\ncurrency select(mapColumn(\n\t\teach(match(in(['source_code_key'],name)),\n\t\t\t$$+'_currency_min' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrencyMinLdaCurr\ncurrency select(mapColumn(\n\t\teach(match(in(['source_code_key'],name)),\n\t\t\t$$+'_currency_max' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrencyMaxLdaCurr\nlcaldaMin, xRefCurrencyMinLdaCurr lookup(ldadedcurr_min == source_code_key_currency_min,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> minLdaMinLdaCurr\nminLdaMinLdaCurr, xRefCurrencyMaxLdaCurr lookup(ldadedcurr_max == source_code_key_currency_max,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> maxLdaMaxLdaCurr\nmaxLdaMaxLdaCurr, sigtable join(upper(trim(lcacrsign)) == upper(trim(sigsign)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcasig\nlcasig, lcrtable join(lcalcaid == lcrlcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcr\nlcalcr, obbtable join(lcalcaid == lcalcaid_obbtable,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaobb\nlcaobb, lcftable join(lcalcaid == lcflcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcf\nlcalcf, lcctable join(lcalcaid == lcclcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcc\nlcalcc select(mapColumn(\n\t\teach(match(in(['lablabid','labclmdate','labmainev','lablodescr','lcatrtmco','labagtype','inaclmlead','lcalcaid','lcauwsign','lcaclmdate','lcacrsign','agabusndiv','lcawrkplccod','lcacrdate','lcaclodate','lcaltdate','lcaadjsign','ldadedcurr_min','ldaldaid_min','ldadedamt_min','ldatext_min','ldadays_min','ldadedcurr_max','ldadedamt_max','ldatext_max','ldadays_max','ldaldaid_max','laasupevnt','lcacefocc','lcaclmcac','lcacefocm','inaintrst','agabusncla','lcaclmid','lcaextclmid','max_lcrrefname','carmdescr','lcalossco','lcatlotype','lcacategorytype','obaimono','obbname','lcaldescr','lcfchngtime','agabusnsec','source_code_key_currency_min','source_code_key_currency_max','lccvoyagefr','lccvoyageto','lcaportunlid','inamutual','labportunlid','lccuwsign','lcamfkey','lcaprocess'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectParisColumns\nSelectParisColumns derive(lcatlotype = 0,\n\t\tlcacategorytype = coalesce(lcacategorytype,'Z'),\n\t\tlcawrkplccod = toString(lcawrkplccod),\n\t\tagabusndiv = case(left(toString(agabusndiv),1)=='4',toString(agabusndiv)+'-'+inamutual,toString(agabusndiv)),\n\t\tagabusnsec = toString(agabusnsec),\n\t\tclm_team_sign = case(agabusndiv==4, lccuwsign, lcauwsign)) ~> DerivedColumns\ntCrossReference filter(code_type_id ==801 &&\r\nsource_system == 'PARIS') ~> claimcategory801\nclaimcategory801 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description'],name)),\n\t\t\t$$+'_claimCategory' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClaimCategory\ntCrossReference filter(code_type_id ==800 &&\r\nsource_system == 'PARIS') ~> tlotype800\ntlotype800 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description'],name)),\n\t\t\t$$+'_tloType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefTloType\ntCrossReference filter(code_type_id == 466 &&\r\nsource_system == 'PARIS') ~> complexity466\ncomplexity466 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description','target_code'],name)),\n\t\t\t$$+'_complexity' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefComplexity\ntCrossReference filter(code_type_id == 329 &&\r\nsource_system == 'PARIS') ~> employee329\nemployee329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_clmHandler' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClmHandler\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 772) ~> mainevent772\nmainevent772 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainEvent' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainevent\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 774) ~> mainClaimType774\nmainClaimType774 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainClmType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainClmType\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 773) ~> eventdetail773\neventdetail773 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_eventDetail' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefEventDetail\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 329) ~> claimAdjuster329\nclaimAdjuster329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_claimAdjuster' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClaimAdjuster\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 106) ~> businessArea106\nbusinessArea106 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_businessArea' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefBusinessArea\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 122) ~> coverage122\ncoverage122 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_coverage' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCoverage\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 113) ~> agreementType113\nagreementType113 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_agreementType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefAgreementType\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 816) ~> clmProcess816\nclmProcess816 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_clmProcess' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClmProcess\nqtb filter(qtbfieldn == 'lcatrtmco') ~> FilterQtbfieldn\nFilterQtbfieldn select(mapColumn(\n\t\teach(match(in(['qtbvalue','qtbmdescr'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> qtbtable\nDerivedColumns, qtbtable lookup(toString(lcatrtmco) == qtbvalue,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIncStatus\nLookupIncStatus, xRefClaimCategory lookup(lcacategorytype == source_code_key_claimCategory,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClaimCategory\nLookupClaimCategory, xRefTloType lookup(toString(lcatlotype) == source_code_key_tloType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTloType\nLookupTloType, xRefComplexity lookup(lcawrkplccod == source_code_key_complexity,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupComplexity\nLookupComplexity, xRefClmHandler lookup(lcauwsign == source_code_key_clmHandler,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmHndlr\nLookupClmHndlr, xRefMainevent lookup(laasupevnt == source_code_key_mainEvent,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainEvent\nLookupMainEvent, xRefMainClmType lookup(lcacefocc == source_code_key_mainClmType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainClmType\nLookupMainClmType, xRefMainClmDetail lookup(lcacefocm == source_code_key_mainClmDetail,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainClmDetail\ntCrossReference filter(source_system == 'PARIS' &&\r\ncode_type_id == 775) ~> mainClmDetail775\nmainClmDetail775 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainClmDetail' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainClmDetail\nLookupMainClmDetail, xRefEventDetail lookup(labmainev == source_code_key_eventDetail,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupEventDetail\nLookupEventDetail, xRefClaimAdjuster lookup(lcaadjsign == source_code_key_claimAdjuster,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmAdjuster\nLookupClmAdjuster, xRefBusinessArea lookup(agabusndiv == source_code_key_businessArea,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupBusinessArea\nLookupBusinessArea, xRefCoverage lookup(inaintrst == source_code_key_coverage,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCoverage\nLookupCoverage, xRefAgreementType lookup(agabusnsec == source_code_key_agreementType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupAgreementType\nLookupAgreementType, xRefImmediateCause lookup(lcaclmcac == source_code_key_immediateCause,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupImmediateCause\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 161) ~> immediateCause161\nimmediateCause161 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_immediateCause' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefImmediateCause\nLookupImmediateCause, xRefClmProcess lookup(lcaprocess == source_code_key_clmProcess,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmProcess\nLookupClmProcess, staParisClmLead lookup(inaclmlead == peapeaid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupStaParisClmLead\nLookupStaParisClmLead derive(tem_key = 'N/A',\n\t\ttem_description = 'Not Applicable') ~> DerivedTempKeyTemDescription\nDerivedTempKeyTemDescription derive(inc_team_description = case(agabusndiv=='2', 'Offshore ENergy Claims (Oslo)', \r\ncase(in(['1','3'],agabusndiv) && tem_key=='25', 'Marine Claims (Oslo)', tem_description)),\n\t\tclmlead = case(isNull(peapeaid),'N','Y'),\n\t\tpk_key_inc = 'P'+lcalcaid,\n\t\tinc_ind_open = case(in([1,3],coalesce(toInteger(lcatrtmco),9)), 'Y', 'N'),\n\t\tinc_vessel_name = case(labagtype==2 && obbname == 'UNKNOWN' , 'ENERGY OBJECT' , upper(obbname)),\n\t\tgrp_key = 'P' + lablabid,\n\t\tclm_date = lcaclmdate,\n\t\tarchive_date = case(lcatrtmco == 9 && isNull(lcaclodate), toDate('01.01.1800', 'dd.MM.yyyy') , toDate(lcaclodate)),\n\t\tlcaclmcac = toInteger(lcaclmcac),\n\t\tdeleted_ind = case(lcatrtmco == 9, 'Y', 'N'),\n\t\tinc_year_of_incident_calyear = toInteger(left(lablabid, 4)),\n\t\tbusiness_area = case(in(['PF','PM'],target_code_businessArea), 'PI', target_code_businessArea),\n\t\tagreement_type = target_code_agreementType,\n\t\tcoverage_code = target_code_coverage,\n\t\tmutual_fixed = case(inamutual == 'Y', 'Mutual', 'Fixed'),\n\t\tlast_renewed_date = null()+1,\n\t\tincident_id = null()+1,\n\t\tinc_file_number = '0') ~> DerivedColumns2\nDerivedColumns2 aggregate(groupBy(pk_key_inc,\n\t\tlablodescr,\n\t\tinc_ind_open,\n\t\tarchive_date,\n\t\tlast_renewed_date,\n\t\ttarget_code_clmHandler,\n\t\ttarget_description_clmHandler,\n\t\tinc_team_description,\n\t\tobbname,\n\t\tobaimono,\n\t\tinc_file_number,\n\t\tincident_id,\n\t\ttarget_code_clmProcess,\n\t\ttarget_description_clmProcess,\n\t\tgrp_key,\n\t\tlcalcaid,\n\t\ttarget_code_complexity,\n\t\ttarget_description_complexity,\n\t\tlcacrdate,\n\t\tlcaclodate,\n\t\tlcaltdate,\n\t\ttarget_code_claimAdjuster,\n\t\ttarget_description_claimAdjuster,\n\t\tldaldaid_min,\n\t\tldadedcurr_min,\n\t\tldadedamt_min,\n\t\tldatext_min,\n\t\tldadays_min,\n\t\tldaldaid_max,\n\t\tldadedcurr_max,\n\t\tldadedamt_max,\n\t\tldatext_max,\n\t\tldadays_max,\n\t\ttarget_code_mainEvent,\n\t\ttarget_description_mainEvent,\n\t\ttarget_code_eventDetail,\n\t\ttarget_description_eventDetail,\n\t\ttarget_code_mainClmType,\n\t\ttarget_description_mainClmType,\n\t\ttarget_code_mainClmDetail,\n\t\ttarget_description_mainClmDetail,\n\t\tbusiness_area,\n\t\tagreement_type,\n\t\tcoverage_code,\n\t\tmutual_fixed,\n\t\ttarget_code_immediateCause,\n\t\ttarget_description_immediateCause,\n\t\tlcaclmid,\n\t\tlcacrsign,\n\t\tdeleted_ind,\n\t\tlcaextclmid,\n\t\tqtbmdescr,\n\t\tmax_lcrrefname,\n\t\tcarmdescr,\n\t\tlcalossco,\n\t\ttarget_description_tloType,\n\t\ttarget_description_claimCategory,\n\t\tinc_year_of_incident_calyear,\n\t\tlcaldescr,\n\t\tlcfchngtime,\n\t\tsource_code_key_currency_min,\n\t\tsource_code_key_currency_max,\n\t\tlccvoyagefr,\n\t\tlccvoyageto,\n\t\tlcaportunlid,\n\t\tlabportunlid,\n\t\tlcamfkey),\n\tlabclmdate = max(labclmdate)) ~> Deduplicate\nunl select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_plc_of_incident' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlPlcOfIncident\nDeduplicate, unlVoyageTo lookup(lccvoyageto == unlname_voyageTo,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlVoyTo\nLookupUnlVoyTo, unlVoyageFrom lookup(lccvoyagefr == unlunlid_voyageFrom,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlVoyFrom\nunl select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_voyageTo' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlVoyageTo\nunl select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_voyageFrom' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlVoyageFrom\nLookupUnlVoyFrom, unlPlcOfIncident lookup(labportunlid == unlunlid_plc_of_incident,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlPlcOfIncident\nLookupUnlPlcOfIncident derive(unlname_voyageTo = left(unlname_voyageTo, 50),\n\t\tunlname_voyageFrom = left(unlname_voyageFrom, 50),\n\t\tunlname_plc_of_incident = left(unlname_plc_of_incident, 50)) ~> ChangeUnlColumns\nstaRiskGroup select(mapColumn(\n\t\teach(match(in(['mutual_fixed','coverage_code','agreement_type','business_area','risk_group_code','segment_code'],name)),\n\t\t\t$$+'_riskGroup' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> riskGroup\nChangeUnlColumns, riskGroup lookup(business_area == business_area_riskGroup\n\t&& coverage_code == coverage_code_riskGroup\n\t&& agreement_type == agreement_type_riskGroup\n\t&& mutual_fixed == mutual_fixed_riskGroup,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRiskGroup\nLookupRiskGroup, exchrateUSDmax lookup(labclmdate == EXCHANGE_FROM_DATE_maxExchRate\n\t&& source_code_key_currency_max == FROM_CURRENCY_CODE_maxExchRate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExchrateMax\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(in(['EXCHANGE_RATE','EXCHANGE_FROM_DATE','FROM_CURRENCY_CODE'],name)),\n\t\t\t$$+'_minExchRate' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSDmin\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(in(['EXCHANGE_RATE','EXCHANGE_FROM_DATE','FROM_CURRENCY_CODE'],name)),\n\t\t\t$$+'_maxExchRate' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSDmax\nLookupExchrateMax, exchrateUSDmin lookup(source_code_key_currency_min == FROM_CURRENCY_CODE_minExchRate\n\t&& labclmdate == EXCHANGE_FROM_DATE_minExchRate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExchrateMin\nLookupExchrateMin derive(ldadedcurr_max = case(ldaldaid_min != ldaldaid_max,ldadedcurr_max, null()+'.'),\n\t\tldatext_max = case(ldaldaid_min != ldaldaid_max, ldatext_max, null()+'.'),\n\t\tldadedamt_max = case(ldaldaid_min != ldaldaid_max, ldadedamt_max, toDecimal(null()+1)),\n\t\tldadays_max = case(ldaldaid_min != ldaldaid_max, ldadays_max, toDecimal(null()+1)),\n\t\tmin_amount_usd = ldadedamt_min/EXCHANGE_RATE_minExchRate,\n\t\tinc_complexity_desc = left(target_description_complexity, 25),\n\t\tinc_geotag_reference = left(lcalcaid, 4)+replace(left(lcalcaid,6),' ', '')) ~> DeriveColumns\nDeriveColumns derive(inc_ded_amount_usd = ldadedamt_max/EXCHANGE_RATE_maxExchRate) ~> incDedAmountUsd\nemployee329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_registeredBy' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegisteredBy\nincDedAmountUsd, xRefRegisteredBy lookup(lcacrsign == source_code_key_registeredBy,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegisteredBy\ndimTime select(mapColumn(\n\t\teach(match(in(['day','accounting_month_key','underwriting_year_number'],name)),\n\t\t\t$$+'_yearOfInc' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimTimeYeardOfInc\ndimTime select(mapColumn(\n\t\teach(match(in(['day','accounting_month_key','accounting_year_number'],name)),\n\t\t\t$$+'_YearMonthOfReg' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimTimeYearMonthOfReg\nLookupRegisteredBy, dimTimeYeardOfInc lookup(labclmdate == day_yearOfInc,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYearOfInc\nLookupYearOfInc, dimTimeYearMonthOfReg lookup(lcacrdate == day_YearMonthOfReg,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYearMonthOfReg\nLookupYearMonthOfReg aggregate(groupBy(risk_group_code_riskGroup,\n\t\taccounting_month_key_yearOfInc,\n\t\taccounting_month_key_YearMonthOfReg,\n\t\tinc_complexity_desc,\n\t\tinc_ded_amount_usd,\n\t\tldadedamt_max,\n\t\tldadedcurr_max,\n\t\tldatext_max,\n\t\tldadays_max,\n\t\tmin_amount_usd,\n\t\tlcacrdate,\n\t\tlcaltdate,\n\t\tunderwriting_year_number_yearOfInc,\n\t\taccounting_year_number_YearMonthOfReg,\n\t\tarchive_date,\n\t\tlabclmdate,\n\t\tlablodescr,\n\t\tinc_ind_open,\n\t\tlast_renewed_date,\n\t\ttarget_code_clmHandler,\n\t\ttarget_description_clmHandler,\n\t\tinc_team_description,\n\t\tobbname,\n\t\tobaimono,\n\t\tinc_file_number,\n\t\tincident_id,\n\t\ttarget_code_clmProcess,\n\t\ttarget_description_clmProcess,\n\t\tgrp_key,\n\t\tlcalcaid,\n\t\ttarget_code_complexity,\n\t\ttarget_description_complexity,\n\t\tlcaclodate,\n\t\ttarget_code_claimAdjuster,\n\t\ttarget_description_claimAdjuster,\n\t\tldadedcurr_min,\n\t\tldadedamt_min,\n\t\tldatext_min,\n\t\tldadays_min,\n\t\ttarget_code_mainEvent,\n\t\ttarget_description_mainEvent,\n\t\ttarget_code_eventDetail,\n\t\ttarget_description_eventDetail,\n\t\ttarget_code_mainClmType,\n\t\ttarget_description_mainClmType,\n\t\ttarget_code_mainClmDetail,\n\t\ttarget_description_mainClmDetail,\n\t\tbusiness_area,\n\t\tagreement_type,\n\t\tcoverage_code,\n\t\tmutual_fixed,\n\t\ttarget_code_immediateCause,\n\t\ttarget_description_immediateCause,\n\t\tsegment_code_riskGroup,\n\t\ttarget_code_registeredBy,\n\t\ttarget_description_registeredBy,\n\t\tlcaextclmid,\n\t\tdeleted_ind,\n\t\tqtbmdescr,\n\t\tmax_lcrrefname,\n\t\tcarmdescr,\n\t\tlcalossco,\n\t\ttarget_description_tloType,\n\t\ttarget_description_claimCategory,\n\t\tinc_geotag_reference,\n\t\tinc_year_of_incident_calyear,\n\t\tlcaldescr,\n\t\tlcfchngtime,\n\t\tunlname_voyageFrom,\n\t\tunlname_voyageTo,\n\t\tunlname_plc_of_incident,\n\t\tlcamfkey),\n\tpk_key_inc = first(pk_key_inc)) ~> Deduplicator2\nDeduplicator2 derive(segment_code_riskGroup = case(isNull(segment_code_riskGroup), 'N/A', segment_code_riskGroup),\n\t\trisk_group_code_riskGroup = case(isNull(risk_group_code_riskGroup), 'N/A', risk_group_code_riskGroup),\n\t\tint_text_restricted = case(in(['CREW','PASS','PERS'], target_code_mainClmType),  'Restricted due to privacy regulations' , lablodescr),\n\t\tinc_my_guard_claim_id = case(lcaextclmid == '0', null()+'.', lcaextclmid),\n\t\tinc_om_claim_rule_code = 'N/A',\n\t\tinc_om_claim_rule_desc = 'Not Applicable',\n\t\tinc_paris_pool_ind = 'N',\n\t\tlast_updated_by = 'm_pre_dim_incident_pa',\n\t\tinc_longitude = 0,\n\t\tinc_latitude = 0) ~> DerivedColumn1\nMutualFixedAndSpecialCases select(mapColumn(\n\t\teach(match(in(['rsv_group_code','rsv_group_desc','business_area','rob_segment_code','rob_risk_group_code'],name)),\n\t\t\t$$+'_incRsvGroupMe' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> incRsvGroupMe\nstaIncidentRsvGroupMe filter(mutual_fixed == 'Fixed' &&\r\nspecial_cases == 'N/A') ~> MutualFixedAndSpecialCases\nDerivedColumn1, incRsvGroupMe lookup(risk_group_code_riskGroup == rob_risk_group_code_incRsvGroupMe\n\t&& business_area == business_area_incRsvGroupMe\n\t&& segment_code_riskGroup == rob_segment_code_incRsvGroupMe,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIncRsvGroupMe\nLookupIncRsvGroupMe alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(input(\n\t\tpk_key_inc as string,\n\t\tinc_retention as decimal(28,10),\n\t\tinc_gic_incident_id as decimal(28,10),\n\t\tinc_mygard_claim_id as string,\n\t\tinc_date_archive as date,\n\t\tinc_deleted_ind as string,\n\t\tinc_year_of_registered as decimal(28,10),\n\t\tinc_ind_open as string,\n\t\tinc_reg_in_paris_pool_ind as string,\n\t\tinc_claim_process_desc as string,\n\t\tgrp_text as string,\n\t\tinc_team_description as string,\n\t\tinc_longitude as decimal(28,10),\n\t\tdate_last_updated as timestamp,\n\t\tinc_voyage_to as string,\n\t\tinc_ded_used_text_1 as string,\n\t\tinc_registered_by_desc as string,\n\t\tinc_ded_used_amount_2 as decimal(28,10),\n\t\tbest_value_estimate as decimal(28,10),\n\t\tinc_vessel_name as string,\n\t\tinc_yearmonth_of_registered as decimal(28,10),\n\t\tinc_reserve_created_by_desc as string,\n\t\tinc_text_restricted as string,\n\t\tinc_claim_adjuster_desc as string,\n\t\tgrp_description as string,\n\t\tinc_gard_claim_id as string,\n\t\tgrp_event_detail_description as string,\n\t\tinc_registered_date as date,\n\t\tinc_voyage_from as string,\n\t\tinc_main_claim_detail_desc as string,\n\t\tinc_main_claim_handler_desc as string,\n\t\tgrp_ind_major_incient as string,\n\t\tgrp_key as string,\n\t\tgrp_main_event_code as string,\n\t\tinc_latitude as decimal(28,10),\n\t\tinc_om_rule_code as string,\n\t\tinc_ded_used_amount_usd_1 as decimal(28,10),\n\t\tinc_reserve_created_by_code as string,\n\t\tinc_year_of_incident_calyear as decimal(28,10),\n\t\tinc_description as string,\n\t\tinc_year_of_incident as decimal(28,10),\n\t\tlast_updated_by as string,\n\t\tinc_incident_risk_group_desc as string,\n\t\tinc_me_tlo_ind as string,\n\t\tinc_complexity_desc as string,\n\t\tinc_date_of_incident as date,\n\t\tinc_geotag_reference as string,\n\t\tinc_claim_process_code as string,\n\t\tinc_casualty_cause as string,\n\t\treserve_worst_outcome as decimal(28,10),\n\t\tinc_status_desc as string,\n\t\tinc_imono as string,\n\t\tinc_text as string,\n\t\tinc_ded_used_amount_1 as decimal(28,10),\n\t\tinc_ded_used_days_1 as decimal(28,10),\n\t\tinc_me_tlo_type as string,\n\t\tdate_inserted as timestamp,\n\t\tinc_ded_used_curr_2 as string,\n\t\tinc_ded_used_amount_usd_2 as decimal(28,10),\n\t\tinc_om_rule_desc as string,\n\t\tinc_me_claim_cat_type as string,\n\t\tinc_registered_by_code as string,\n\t\tinc_text_unresticted as string,\n\t\tinc_claim_adjuster_code as string,\n\t\tinc_code as string,\n\t\tinc_immediate_cause as string,\n\t\tgrp_claim_incurred_gross_usd as decimal(28,10),\n\t\tinc_ded_used_curr_1 as string,\n\t\tinc_main_claim_detail_code as string,\n\t\tinc_ded_used_text_2 as string,\n\t\tgrp_event_deatil_code as string,\n\t\tinc_date_archive_old as date,\n\t\tinserted_by as string,\n\t\tinc_place_of_incident as string,\n\t\tinc_main_claim_type_desc as string,\n\t\tinc_yearmonth_of_incident as decimal(28,10),\n\t\tinc_date_last_reviewed as date,\n\t\tinc_members_reference as string,\n\t\tinc_payment_created_by_desc as string,\n\t\tinc_main_jurisdiction as string,\n\t\tinc_complexity_code as string,\n\t\tinc_ded_used_days_2 as decimal(28,10),\n\t\tgrp_main_event_description as string,\n\t\tinc_incident_risk_group as string,\n\t\tinc_main_claim_type_code as string,\n\t\tinc_incident_reference as string,\n\t\tgrp_code as string,\n\t\treserve_best_outcome as decimal(28,10),\n\t\tinc_file_number as string,\n\t\tgrp_id as decimal(28,10),\n\t\tinc_payment_created_by_code as string,\n\t\tinc_main_claim_handler_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tpk_key_inc,\n\t\tinc_gic_incident_id = incident_id,\n\t\tinc_mygard_claim_id = inc_my_guard_claim_id,\n\t\tinc_date_archive = archive_date,\n\t\tinc_deleted_ind = deleted_ind,\n\t\tinc_year_of_registered = accounting_year_number_YearMonthOfReg,\n\t\tinc_ind_open,\n\t\tinc_reg_in_paris_pool_ind = inc_paris_pool_ind,\n\t\tinc_claim_process_desc = target_description_clmProcess,\n\t\tgrp_text = lablodescr,\n\t\tinc_team_description,\n\t\tinc_longitude,\n\t\tinc_voyage_to = unlname_voyageTo,\n\t\tinc_ded_used_text_1 = ldatext_min,\n\t\tinc_registered_by_desc = target_description_registeredBy,\n\t\tinc_ded_used_amount_2 = ldadedamt_max,\n\t\tinc_vessel_name = obbname,\n\t\tinc_yearmonth_of_registered = accounting_month_key_YearMonthOfReg,\n\t\tinc_text_restricted = int_text_restricted,\n\t\tinc_claim_adjuster_desc = target_description_claimAdjuster,\n\t\tgrp_description = target_description_mainEvent,\n\t\tinc_gard_claim_id = lcamfkey,\n\t\tgrp_event_detail_description = target_description_eventDetail,\n\t\tinc_registered_date = lcacrdate,\n\t\tinc_voyage_from = unlname_voyageFrom,\n\t\tinc_main_claim_detail_desc = target_description_mainClmDetail,\n\t\tinc_main_claim_handler_desc = target_description_clmHandler,\n\t\tgrp_key,\n\t\tgrp_main_event_code = target_code_mainEvent,\n\t\tinc_latitude,\n\t\tinc_om_rule_code = inc_om_claim_rule_code,\n\t\tinc_ded_used_amount_usd_1 = min_amount_usd,\n\t\tinc_year_of_incident_calyear,\n\t\tinc_description = target_description_mainEvent,\n\t\tinc_year_of_incident = underwriting_year_number_yearOfInc,\n\t\tlast_updated_by,\n\t\tinc_incident_risk_group_desc = rsv_group_desc_incRsvGroupMe,\n\t\tinc_me_tlo_ind = lcalossco,\n\t\tinc_complexity_desc,\n\t\tinc_date_of_incident = labclmdate,\n\t\tinc_geotag_reference,\n\t\tinc_claim_process_code = target_code_clmProcess,\n\t\tinc_status_desc = qtbmdescr,\n\t\tinc_imono = obaimono,\n\t\tinc_file_number\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimIncidentPa"
		}
	}
}