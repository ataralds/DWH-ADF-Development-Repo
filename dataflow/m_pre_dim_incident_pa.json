{
	"name": "m_pre_dim_incident_pa",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "hlpExchangeRateToUsd"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "pFILTABLE"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "pFALTABLE"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "pLCCTABLE"
				},
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "tCrossReference"
				},
				{
					"dataset": {
						"referenceName": "Agresso",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "xRefCurrency"
				},
				{
					"name": "xchangeUSD"
				},
				{
					"name": "FILTABLE"
				},
				{
					"name": "FALTABLE"
				},
				{
					"name": "LCCTABLE"
				},
				{
					"name": "LookupCurrency"
				},
				{
					"name": "FALwithCURR"
				}
			],
			"script": "source(output(\n\t\tFROM_CURRENCY_ID as double,\n\t\tTO_CURRENCY_ID as double,\n\t\tEXCHANGE_FROM_DATE as timestamp,\n\t\tEXCHANGE_RATE as decimal(38,18),\n\t\tEXCHANGE_TO_DATE as timestamp,\n\t\tFROM_CURRENCY_CODE as string,\n\t\tTO_CURRENCY_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> hlpExchangeRateToUsd\nsource(output(\n\t\tfilacseq as decimal(38,18),\n\t\tfilacstat as string,\n\t\tfilagaid as string,\n\t\tfilcadate as timestamp,\n\t\tfilcasign as string,\n\t\tfilcastamp as string,\n\t\tfilcdoctype as string,\n\t\tfilcfunc as string,\n\t\tfilcordocn as decimal(38,18),\n\t\tfilcortyp as decimal(38,18),\n\t\tfilcosig1 as string,\n\t\tfilcosig2 as string,\n\t\tfilcrdate as timestamp,\n\t\tfilcrsign as string,\n\t\tfilcrstamp as string,\n\t\tfilcspbusndiv as decimal(38,18),\n\t\tfilcspbusnfunc as string,\n\t\tfilcspcondgrp as decimal(38,18),\n\t\tfilcspintrst as string,\n\t\tfilcsplimit as decimal(38,18),\n\t\tfilctrldate as timestamp,\n\t\tfilctrlsign as string,\n\t\tfildistext35 as string,\n\t\tfildocdate as timestamp,\n\t\tfildocmain as string,\n\t\tfildocn as decimal(38,18),\n\t\tfildodate as timestamp,\n\t\tfildostamp as string,\n\t\tfilexpdate as timestamp,\n\t\tfilexpeosign as string,\n\t\tfilexpstatus as string,\n\t\tfilexternalref as string,\n\t\tfilfilid as string,\n\t\tfilgldate as timestamp,\n\t\tfilglrunno as decimal(38,18),\n\t\tfilglstamp as string,\n\t\tfilingform as string,\n\t\tfilknvmark as string,\n\t\tfillisig1 as string,\n\t\tfillisig2 as string,\n\t\tfilnoaccounting as string,\n\t\tfilordate as timestamp,\n\t\tfiloridintrstdate as timestamp,\n\t\tfilorsign as string,\n\t\tfilorstamp as string,\n\t\tfilrefbase as decimal(38,18),\n\t\tfilresig1 as decimal(38,18),\n\t\tfilresig2 as decimal(38,18),\n\t\tfilvaldate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> pFILTABLE\nsource(output(\n\t\tfalaccadrpeaid as decimal(38,18),\n\t\tfalaccamtp as decimal(38,18),\n\t\tfalaccdescr as string,\n\t\tfalaccpara as string,\n\t\tfalaccsw1 as string,\n\t\tfalaclcode as string,\n\t\tfalacstat as string,\n\t\tfaladvcod as decimal(38,18),\n\t\tfalagaid as string,\n\t\tfalagno as decimal(38,18),\n\t\tfalbalance as decimal(38,18),\n\t\tfalbaldescr as string,\n\t\tfalbillingno as decimal(38,18),\n\t\tfalbordadr as decimal(38,18),\n\t\tfalbordref as string,\n\t\tfalbroker as decimal(38,18),\n\t\tfalcashco as decimal(38,18),\n\t\tfalcathbtid as decimal(38,18),\n\t\tfalcctid as string,\n\t\tfalcedent as decimal(38,18),\n\t\tfalcedsecisolan as string,\n\t\tfalcedsecurno as decimal(38,18),\n\t\tfalclmadrpeaid as decimal(38,18),\n\t\tfalclmcat as string,\n\t\tfalclmreserve as decimal(38,18),\n\t\tfalcomcod as string,\n\t\tfalcovshare as decimal(38,18),\n\t\tfalcurr as string,\n\t\tfaldedamtp as decimal(38,18),\n\t\tfaldedcur as string,\n\t\tfaldedtamtp as decimal(38,18),\n\t\tfaldescr50 as string,\n\t\tfalduedate as timestamp,\n\t\tfalduest as decimal(38,18),\n\t\tfalelremitdescr as string,\n\t\tfalfalid as string,\n\t\tfalfblid as string,\n\t\tfalfilid as string,\n\t\tfalgenamtp as decimal(38,18),\n\t\tfalgencurr as string,\n\t\tfalicaid as string,\n\t\tfalinaid as string,\n\t\tfalinout as string,\n\t\tfalintamtp as decimal(38,18),\n\t\tfaliuwid as string,\n\t\tfaliyear as decimal(38,18),\n\t\tfallcaid as string,\n\t\tfallccid as string,\n\t\tfalln5 as decimal(38,18),\n\t\tfalmailaddress as string,\n\t\tfalmark as string,\n\t\tfalnreaccnynsw as string,\n\t\tfalnsci as decimal(38,18),\n\t\tfalobno as decimal(38,18),\n\t\tfalolddocno as decimal(38,18),\n\t\tfalorgins as decimal(38,18),\n\t\tfaloridintrstdate as timestamp,\n\t\tfaloutcode as decimal(38,18),\n\t\tfaloutform as string,\n\t\tfaloutstanding as decimal(38,18),\n\t\tfalownret as decimal(38,18),\n\t\tfalpaycod as decimal(38,18),\n\t\tfalpglb as decimal(38,18),\n\t\tfalpglbaccno as decimal(38,18),\n\t\tfalpgqid as string,\n\t\tfalplgroup as decimal(38,18),\n\t\tfalreaccn as string,\n\t\tfalrecamtp as decimal(38,18),\n\t\tfalreccur as string,\n\t\tfalrectamtp as decimal(38,18),\n\t\tfalsettled as decimal(38,18),\n\t\tfalshare as decimal(38,18),\n\t\tfalsource as decimal(38,18),\n\t\tfaluwbid as string,\n\t\tfaluwndisc as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> pFALTABLE\nsource(output(\n\t\tlccadddescrlev1 as string,\n\t\tlccadddescrlev2 as string,\n\t\tlccadddescrlev3 as string,\n\t\tlccadddescrlev4 as string,\n\t\tlccadditionaltxt as string,\n\t\tlccadjuster as string,\n\t\tlccalleged1 as string,\n\t\tlccalleged2 as string,\n\t\tlccallegedtxt as string,\n\t\tlccamount as decimal(38,18),\n\t\tlccamtdispunknown as string,\n\t\tlcccargotype as string,\n\t\tlcccarriagemethod as string,\n\t\tlcccause as string,\n\t\tlcccausetxt as string,\n\t\tlccclmamtynsw as string,\n\t\tlccclmdet as string,\n\t\tlccclmtype as string,\n\t\tlccclupcommenced as decimal(38,18),\n\t\tlccclupcompleted as decimal(38,18),\n\t\tlccconseq as string,\n\t\tlccconseqos as string,\n\t\tlcccurr as string,\n\t\tlccdecision as decimal(38,18),\n\t\tlccdisembarkedat as string,\n\t\tlccdisembarkeddate as timestamp,\n\t\tlccdisembarkiso as string,\n\t\tlccembarkedat as string,\n\t\tlccembarkeddate as timestamp,\n\t\tlccembarkiso as string,\n\t\tlccemergevac as string,\n\t\tlccfduty as decimal(38,18),\n\t\tlccgrossamount as decimal(38,18),\n\t\tlccgrosssettle as decimal(38,18),\n\t\tlcchandlebyclms as string,\n\t\tlccinitcontpoint as string,\n\t\tlccinlitigation as string,\n\t\tlccjurisdiction as string,\n\t\tlccladid as decimal(38,18),\n\t\tlcclcaid as string,\n\t\tlcclccid as string,\n\t\tlcclightcccid as string,\n\t\tlccln6 as decimal(38,18),\n\t\tlccloconvess as string,\n\t\tlccloconvesstxt as string,\n\t\tlccmafareatxt as string,\n\t\tlccmaffectarea as string,\n\t\tlccmanos as string,\n\t\tlccmanouver as string,\n\t\tlccmfkey as string,\n\t\tlccnpersons as decimal(38,18),\n\t\tlccothshipname as string,\n\t\tlccpeaid as decimal(38,18),\n\t\tlccpilotname as string,\n\t\tlccpilotonboard as string,\n\t\tlccpollutant as string,\n\t\tlccradnavynsw as string,\n\t\tlccrecovccvid as decimal(38,18),\n\t\tlccrecovcom as string,\n\t\tlccrecovcurr as string,\n\t\tlccrecovery as decimal(38,18),\n\t\tlccrecovyn as string,\n\t\tlccremarks as string,\n\t\tlccrolecat as string,\n\t\tlccrule as string,\n\t\tlccruleofcov as string,\n\t\tlccsettlement as decimal(38,18),\n\t\tlcctext as string,\n\t\tlcctrtmco as decimal(38,18),\n\t\tlccuwsign as string,\n\t\tlccvessdevi as string,\n\t\tlccvisiblcccid as string,\n\t\tlccvoyagefr as string,\n\t\tlccvoyageto as string,\n\t\tlccvoyfriso as string,\n\t\tlccvoytoiso as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> pLCCTABLE\nsource(output(\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> tCrossReference\nsource(output(\n\t\tEMPLOYEE_ID as string,\n\t\tCOMPANY as string,\n\t\tCOMPANY_NAME as string,\n\t\tMAIN_EMPLOYER as decimal(38,18),\n\t\tCONTRACT_TYPE as string,\n\t\tCONTRACT_DESC as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tAD_NAME as string,\n\t\tJOBPHONE as string,\n\t\tSHORTPHONE as string,\n\t\tJOBMOBILE as string,\n\t\tEMAIL as string,\n\t\tCOSTC as string,\n\t\tLAST_UPDATE as timestamp,\n\t\tPOSITION as string,\n\t\tPOSITION_TITLE as string,\n\t\tSENIORITY as string,\n\t\tSEN_TITLE as string,\n\t\tDISPLAY_NAME as string,\n\t\tOFFICE as string,\n\t\tSTATUS as string,\n\t\tSTATUS_DESC as string,\n\t\tCONTR_DATE_FROM as timestamp,\n\t\tCONTR_DATE_TO as timestamp,\n\t\tGARD_NO as decimal(38,18),\n\t\tTHE_BRIDGE as decimal(38,18),\n\t\tP_GARD_NO as decimal(38,18),\n\t\tP_THE_BRIDGE as decimal(38,18),\n\t\tNICKNAME as string,\n\t\tCOSTC_STATUS as string,\n\t\tP_MYGARD_FX as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> source1\ntCrossReference filter(SOURCE_SYSTEM == 'Paris' && CODE_TYPE_ID == 124) ~> xRefCurrency\nhlpExchangeRateToUsd select(mapColumn(\n\t\tEXCHANGE_FROM_DATE,\n\t\tEXCHANGE_RATE,\n\t\tFROM_CURRENCY_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xchangeUSD\npFILTABLE select(mapColumn(\n\t\tfilfilid,\n\t\tfilvaldate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FILTABLE\npFALTABLE select(mapColumn(\n\t\tfalfilid,\n\t\tfalcurr,\n\t\tfalinout,\n\t\tfaloutcode,\n\t\tfaloutstanding\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FALTABLE\npLCCTABLE select(mapColumn(\n\t\tlcclccid,\n\t\tlcclcaid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LCCTABLE\nFALTABLE, xRefCurrency lookup(falcurr == SOURCE_CODE_KEY,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'none')~> LookupCurrency\nLookupCurrency select(mapColumn(\n\t\tfalfilid,\n\t\tfalcurr,\n\t\tfalinout,\n\t\tfaloutcode,\n\t\tfaloutstanding,\n\t\tTARGET_CODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FALwithCURR"
		}
	}
}