{
	"name": "m_pre_dim_incident_pa_copy1",
	"properties": {
		"description": "mangler lookup til claimteam ",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "hlpExchangeRateToUsd"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "filtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "fal"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcc"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tCrossReference"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcf"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lca"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obb"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "oba"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ica"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcr"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "cartable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "laatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "sigtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "inatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "labtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lda"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "qtbtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "staParisClmLead"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "unltable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "staRiskGroup"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "dimTime"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "staIncidentRsvGroupMe"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_incident",
						"type": "DatasetReference"
					},
					"name": "preDimIncidentPa"
				}
			],
			"transformations": [
				{
					"name": "currency"
				},
				{
					"name": "exchrateUSD"
				},
				{
					"name": "lccmaxincurred",
					"description": "Lcc columns used to calculate max incurred"
				},
				{
					"name": "xRefCurrency"
				},
				{
					"name": "lfcchngtime"
				},
				{
					"name": "lcaLcfInput"
				},
				{
					"name": "lcatableLcfInput",
					"description": "Filtering rows on lcaclodate not null"
				},
				{
					"name": "lcflca"
				},
				{
					"name": "falCurr"
				},
				{
					"name": "lccfal"
				},
				{
					"name": "falfil"
				},
				{
					"name": "joinExchrate"
				},
				{
					"name": "faltable"
				},
				{
					"name": "claimIncurredUsd"
				},
				{
					"name": "sumClaimIncurredUsd"
				},
				{
					"name": "minLccid"
				},
				{
					"name": "maxSumClaimIncurredUsd"
				},
				{
					"name": "lccColumns"
				},
				{
					"name": "tmpLccClaim"
				},
				{
					"name": "maxSumClaimTmpClaim"
				},
				{
					"name": "maxSumClaimLccTable"
				},
				{
					"name": "filterDates",
					"description": "Filtering rows on lcfchntime < lcaclodate"
				},
				{
					"name": "lcctable"
				},
				{
					"name": "lcftable"
				},
				{
					"name": "obbClaim"
				},
				{
					"name": "lcaClaimObject"
				},
				{
					"name": "lcaRiskObject"
				},
				{
					"name": "icaRiskObject"
				},
				{
					"name": "lcaoba"
				},
				{
					"name": "obaobb"
				},
				{
					"name": "claimObject",
					"description": "Filtering rows on claim date between obbstdate and obbendate (or +/- 10 years from current date)"
				},
				{
					"name": "lcaica"
				},
				{
					"name": "icaoba"
				},
				{
					"name": "obboba"
				},
				{
					"name": "riskObject"
				},
				{
					"name": "UnionRiskAndClaimObject"
				},
				{
					"name": "objNull"
				},
				{
					"name": "AggregateClmRiskObjects"
				},
				{
					"name": "obbRisk"
				},
				{
					"name": "obbname"
				},
				{
					"name": "obbtable"
				},
				{
					"name": "lcrtable"
				},
				{
					"name": "lcatable"
				},
				{
					"name": "ldaMaxColumns"
				},
				{
					"name": "ldaMinColumns"
				},
				{
					"name": "Aggregateldaldaid"
				},
				{
					"name": "Filterldadedcd3"
				},
				{
					"name": "joinMaxLdaldaid"
				},
				{
					"name": "joinMinLdaldaid"
				},
				{
					"name": "ldaMax"
				},
				{
					"name": "ldaMin"
				},
				{
					"name": "icaaga"
				},
				{
					"name": "icalca"
				},
				{
					"name": "lcalab"
				},
				{
					"name": "icaina"
				},
				{
					"name": "labcar"
				},
				{
					"name": "lablaa"
				},
				{
					"name": "lcaldaMax"
				},
				{
					"name": "lcaldaMin"
				},
				{
					"name": "xRefCurrencyMinLdaCurr"
				},
				{
					"name": "xRefCurrencyMaxLdaCurr"
				},
				{
					"name": "minLdaMinLdaCurr"
				},
				{
					"name": "maxLdaMaxLdaCurr"
				},
				{
					"name": "lcasig"
				},
				{
					"name": "lcalcr"
				},
				{
					"name": "lcaobb"
				},
				{
					"name": "lcalcf"
				},
				{
					"name": "lcalcc"
				},
				{
					"name": "SelectParisColumns"
				},
				{
					"name": "DerivedColumns",
					"description": "Updating/creating columns:\n'lcatlotype, lcacategorytype, lcawrkplccod, agabusndiv, agabusnsec, clm_team_sign"
				},
				{
					"name": "claimcategory801"
				},
				{
					"name": "xRefClaimCategory"
				},
				{
					"name": "tlotype800"
				},
				{
					"name": "xRefTloType"
				},
				{
					"name": "complexity466"
				},
				{
					"name": "xRefComplexity"
				},
				{
					"name": "employee329"
				},
				{
					"name": "xRefClmHandler"
				},
				{
					"name": "mainevent772"
				},
				{
					"name": "xRefMainevent"
				},
				{
					"name": "mainClaimType774"
				},
				{
					"name": "xRefMainClmType"
				},
				{
					"name": "eventdetail773"
				},
				{
					"name": "xRefEventDetail"
				},
				{
					"name": "claimAdjuster329"
				},
				{
					"name": "xRefClaimAdjuster"
				},
				{
					"name": "businessArea106"
				},
				{
					"name": "xRefBusinessArea"
				},
				{
					"name": "coverage122"
				},
				{
					"name": "xRefCoverage"
				},
				{
					"name": "agreementType113"
				},
				{
					"name": "xRefAgreementType"
				},
				{
					"name": "clmProcess816"
				},
				{
					"name": "xRefClmProcess"
				},
				{
					"name": "LookupIncStatus"
				},
				{
					"name": "LookupClaimCategory"
				},
				{
					"name": "LookupTloType"
				},
				{
					"name": "LookupComplexity"
				},
				{
					"name": "LookupClmHndlr"
				},
				{
					"name": "LookupMainEvent"
				},
				{
					"name": "LookupMainClmType"
				},
				{
					"name": "LookupMainClmDetail"
				},
				{
					"name": "mainClmDetail775"
				},
				{
					"name": "xRefMainClmDetail"
				},
				{
					"name": "LookupEventDetail"
				},
				{
					"name": "LookupClmAdjuster"
				},
				{
					"name": "LookupBusinessArea"
				},
				{
					"name": "LookupCoverage"
				},
				{
					"name": "LookupAgreementType"
				},
				{
					"name": "LookupImmediateCause"
				},
				{
					"name": "immediateCause161"
				},
				{
					"name": "xRefImmediateCause"
				},
				{
					"name": "LookupClmProcess"
				},
				{
					"name": "LookupStaParisClmLead"
				},
				{
					"name": "DerivedTempKeyTemDescription"
				},
				{
					"name": "DerivedColumns2"
				},
				{
					"name": "Deduplicate"
				},
				{
					"name": "unlPlcOfIncident"
				},
				{
					"name": "LookupUnlVoyTo"
				},
				{
					"name": "LookupUnlVoyFrom"
				},
				{
					"name": "unlVoyageTo"
				},
				{
					"name": "unlVoyageFrom"
				},
				{
					"name": "LookupUnlPlcOfIncident"
				},
				{
					"name": "ChangeUnlColumns"
				},
				{
					"name": "riskGroup"
				},
				{
					"name": "LookupRiskGroup"
				},
				{
					"name": "LookupExchrateMax"
				},
				{
					"name": "exchrateUSDmin"
				},
				{
					"name": "exchrateUSDmax"
				},
				{
					"name": "LookupExchrateMin"
				},
				{
					"name": "DeriveColumns",
					"description": "Creating/updating columns:\nldadedcurr_max, ldatext_max, ldadedamt_max, ldadays_max, min_amount_usd, inc:complexity:desc, inc_geotag_reference"
				},
				{
					"name": "incDedAmountUsd"
				},
				{
					"name": "xRefRegisteredBy"
				},
				{
					"name": "LookupRegisteredBy"
				},
				{
					"name": "dimTimeYeardOfInc"
				},
				{
					"name": "dimTimeYearMonthOfReg"
				},
				{
					"name": "LookupYearOfInc"
				},
				{
					"name": "LookupYearMonthOfReg"
				},
				{
					"name": "Deduplicator2"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "incRsvGroupMe"
				},
				{
					"name": "LookupIncRsvGroupMe"
				}
			],
			"script": "source(output(\n\t\texchange_rate as decimal(28,10),\n\t\texchange_from_date as date,\n\t\tfrom_currency_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select exchange_rate,exchange_from_date,from_currency_code\\nfrom dwh_stage.hlp_exchange_rate_to_usd',\n\tformat: 'query') ~> hlpExchangeRateToUsd\nsource(output(\n\t\tfilfilid as string,\n\t\tfilvaldate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select filfilid, filvaldate\\nfrom dwh_stage.p_filtable',\n\tformat: 'query') ~> filtable\nsource(output(\n\t\tfallccid as string,\n\t\tfalfilid as string,\n\t\tfalcurr as string,\n\t\tfalinout as string,\n\t\tfaloutcode as integer,\n\t\tfaloutstanding as decimal(28,10),\n\t\tfalsettled as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select fallccid,falfilid,falcurr,falinout,faloutcode,faloutstanding,falsettled\\nfrom dwh_stage.p_faltable',\n\tformat: 'query') ~> fal\nsource(output(\n\t\tlcclcaid as string,\n\t\tlcclccid as string,\n\t\tlccvoyagefr as string,\n\t\tlccvoyageto as string,\n\t\tlccclmtype as string,\n\t\tlccuwsign as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \\nlcclcaid, lcclccid, lccvoyagefr, lccvoyageto, lccclmtype, lccuwsign\\nfrom dwh_stage.p_lcctable',\n\tformat: 'query') ~> lcc\nsource(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select *\\nfrom dwh_stage.t_crossreference',\n\tformat: 'query') ~> tCrossReference\nsource(output(\n\t\tlcfchngtime as string,\n\t\tlcflcaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lcfchngtime, lcflcaid\\nfrom dwh_stage.p_lcftable\\nwhere lcftrtmco in (2,4)',\n\tformat: 'query') ~> lcf\nsource(output(\n\t\tlcalabid as string,\n\t\tlcatrtmco as integer,\n\t\tlcalcaid as string,\n\t\tlcaicaid as string,\n\t\tlcauwsign as string,\n\t\tlcaclmdate as date,\n\t\tlcacrsign as string,\n\t\tlcawrkplccod as integer,\n\t\tlcacrdate as date,\n\t\tlcaclodate as date,\n\t\tlcaltdate as date,\n\t\tlcaadjsign as string,\n\t\tlcacefocc as string,\n\t\tlcaclmcac as string,\n\t\tlcacefocm as string,\n\t\tlcabirtno as string,\n\t\tlcaextclmid as string,\n\t\tlcalossco as string,\n\t\tlcatlotype as integer,\n\t\tlcacategorytype as string,\n\t\tlcaobno as integer,\n\t\tlcaldescr as string,\n\t\tlcaportunlid as string,\n\t\tlcamfkey as string,\n\t\tlcaprocess as string,\n\t\tlcaclmid as integer,\n\t\tlcaacstat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \\nlcalabid,lcatrtmco,lcalcaid,lcaicaid,lcauwsign,lcaclmdate,lcacrsign,lcawrkplccod,lcacrdate,lcaclodate,lcaltdate,lcaadjsign,lcacefocc,lcaclmcac,lcacefocm,lcabirtno,lcaextclmid,lcalossco,lcatlotype,lcacategorytype,lcaobno,lcaldescr,lcaportunlid,lcamfkey,lcaprocess,lcaclmid, lcaacstat\\nfrom dwh_stage.p_lcatable',\n\tformat: 'query') ~> lca\nsource(output(\n\t\tobbobno as integer,\n\t\tobbstdate as date,\n\t\tobbendate as date,\n\t\tobbname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select\\nobbobno, obbstdate, obbendate, obbname\\nfrom dwh_stage.p_obbtable',\n\tformat: 'query') ~> obb\nsource(output(\n\t\tobaobno as integer,\n\t\tobaimono as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obaobno,obaimono\\nfrom dwh_stage.p_obatable',\n\tformat: 'query') ~> oba\nsource(output(\n\t\ticaicaid as string,\n\t\ticaobno as integer,\n\t\ticainaid as string,\n\t\ticaagaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaicaid, icaobno, icainaid, icaagaid\\nfrom dwh_stage.p_icatable',\n\tformat: 'query') ~> ica\nsource(output(\n\t\tlcrlcaid as string,\n\t\tlcrrefnam as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lcrlcaid, lcrrefnam\\nfrom dwh_stage.p_lcrtable\\nwhere lower(lcrctrid) = \\'source\\'',\n\tformat: 'query') ~> lcr\nsource(output(\n\t\tcariso3ch as string,\n\t\tcarmdescr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select cariso3ch, carmdescr\\nfrom dwh_stage.p_cartable',\n\tformat: 'query') ~> cartable\nsource(output(\n\t\tlaalaaid as string,\n\t\tlaasupevnt as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select laalaaid, laasupevnt\\nfrom dwh_stage.p_laatable',\n\tformat: 'query') ~> laatable\nsource(output(\n\t\tagaagaid as string,\n\t\tagabusndiv as integer,\n\t\tagabusncla as integer,\n\t\tagabusnsec as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agaagaid, agabusndiv, agabusncla, agabusnsec\\nfrom dwh_stage.p_agatable',\n\tformat: 'query') ~> agatable\nsource(output(\n\t\tsigsign as string,\n\t\tsigoffice as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select sigsign, sigoffice\\nfrom dwh_stage.p_sigtable',\n\tformat: 'query') ~> sigtable\nsource(output(\n\t\tinainaid as string,\n\t\tinaclmlead as long,\n\t\tinaintrst as string,\n\t\tinamutual as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select inainaid, inaclmlead, inaintrst, inamutual\\nfrom dwh_stage.p_inatable',\n\tformat: 'query') ~> inatable\nsource(output(\n\t\tlablabid as string,\n\t\tlabclmdate as date,\n\t\tlabmainev as string,\n\t\tlablodescr as string,\n\t\tlabagtype as integer,\n\t\tlablaaid as string,\n\t\tlabareacd as string,\n\t\tlabportunlid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lablabid, labclmdate, labmainev, lablodescr, labagtype, lablaaid, labareacd, labportunlid\\nfrom dwh_stage.p_labtable',\n\tformat: 'query') ~> labtable\nsource(output(\n\t\tldalcaid as string,\n\t\tldaldaid as string,\n\t\tldadedcd3 as string,\n\t\tldadedcurr as string,\n\t\tldadedamt as long,\n\t\tldatext as string,\n\t\tldadays as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select ldalcaid, ldaldaid, ldadedcd3, ldadedcurr, ldadedamt, ldatext, ldadays\\nfrom dwh_stage.p_ldatable',\n\tformat: 'query') ~> lda\nsource(output(\n\t\tqtbvalue as string,\n\t\tqtbmdescr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select qtbvalue, qtbmdescr\\nfrom dwh_stage.p_qtbtable\\nwhere qtbfieldn = \\'lcatrtmco\\'',\n\tformat: 'query') ~> qtbtable\nsource(output(\n\t\tpeapeaid as long,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select *\\nfrom dwh_stage.sta_paris_claim_lead',\n\tformat: 'query') ~> staParisClmLead\nsource(output(\n\t\tunlunlid as string,\n\t\tunlname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select unlunlid, unlname\\nfrom dwh_stage.p_unltable',\n\tformat: 'query') ~> unltable\nsource(output(\n\t\tmutual_fixed as string,\n\t\tcoverage_code as string,\n\t\tagreement_type as string,\n\t\tbusiness_area as string,\n\t\trisk_group_code as string,\n\t\tsegment_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select mutual_fixed, coverage_code, agreement_type, business_area, risk_group_code, segment_code\\nfrom dwh_stage.sta_risk_group',\n\tformat: 'query') ~> staRiskGroup\nsource(output(\n\t\tday as date,\n\t\taccounting_month_key as long,\n\t\taccounting_year_number as short,\n\t\tunderwriting_year_number as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select day, accounting_month_key, accounting_year_number, underwriting_year_number\\nfrom dwh_prepare.pre_dim_time',\n\tformat: 'query') ~> dimTime\nsource(output(\n\t\trsv_group_code as string,\n\t\trsv_group_desc as string,\n\t\tbusiness_area as string,\n\t\trob_segment_code as string,\n\t\trob_risk_group_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select rsv_group_code, rsv_group_desc, business_area,  rob_segment_code, rob_risk_group_code\\nfrom dwh_stage.sta_incident_rsv_group_me\\nwhere mutual_fixed = \\'Fixed\\' and\\nspecial_cases = \\'N/A\\'',\n\tformat: 'query') ~> staIncidentRsvGroupMe\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 124) ~> currency\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSD\nlcc select(mapColumn(\n\t\teach(match(in(['lcclcaid','lcclccid'],name)),\n\t\t\t$$+'_maxIncurred' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lccmaxincurred\ncurrency select(mapColumn(\n\t\teach(match(in(['target_code'],name)),\n\t\t\t$$+'_currency' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrency\nlcf derive(lcfchngtime = toDate(left(lcfchngtime,8),'yyyyMMdd')) ~> lfcchngtime\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaicaid','lcaclmdate','lcaobno','lcaclodate','lcalabid','lcatrtmco','lcauwsign','lcaacstat','lcacrsign','lcawrkplccod','lcacrdate','lcaltdate','lcaadjsign','lcacefocc','lcaclmcac','lcacefocm','lcabirtno','lcaextclmid','lcalossco','lcatlotype','lcacategorytype','lcaobno','lcaldescr','lcaportunlid','lcamfkey','lcaprocess'],name)),\n\t\t\t$$+'_lcfInput' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaLcfInput\nlcaLcfInput filter(!isNull(lcaclodate_lcfInput)) ~> lcatableLcfInput\nlfcchngtime, lcatableLcfInput join(lcflcaid == lcalcaid_lcfInput,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcflca\nfal, xRefCurrency lookup(falcurr == target_code_currency,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> falCurr\nlccmaxincurred, faltable join(lcclccid_maxIncurred == fallccid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lccfal\nlccfal, filtable join(falfilid == filfilid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falfil\nfalfil, exchrateUSD join(coalesce(falcurr,'USD') == from_currency_code\n\t&& filvaldate == exchange_from_date,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinExchrate\nfalCurr select(mapColumn(\n\t\tfalfilid,\n\t\tfalinout,\n\t\tfallccid,\n\t\tfaloutcode,\n\t\tfaloutstanding,\n\t\tfalsettled,\n\t\tfalcurr = target_code_currency\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> faltable\njoinExchrate derive(claim_incurred_usd = case((falinout=='I') || (falinout=='O' && faloutcode==2), coalesce(faloutstanding/exchange_rate,0),toDecimal(0)) +\ncase((falinout=='I') || (falinout=='O' && faloutcode==2), coalesce(falsettled/exchange_rate,0),toDecimal(0))) ~> claimIncurredUsd\nclaimIncurredUsd aggregate(groupBy(lcclcaid_maxIncurred,\n\t\tlcclccid_maxIncurred),\n\tsum_claim_incurred_usd = sum(claim_incurred_usd)) ~> sumClaimIncurredUsd\nsumClaimIncurredUsd aggregate(groupBy(lcclcaid_maxIncurred,\n\t\tsum_claim_incurred_usd),\n\tmin_lccid_maxIncurred = min(lcclccid_maxIncurred)) ~> minLccid\nminLccid aggregate(groupBy(lcclcaid_maxIncurred),\n\tmax_sum_claim_incurred_usd = max(sum_claim_incurred_usd)) ~> maxSumClaimIncurredUsd\nlcc select(mapColumn(\n\t\teach(match(in(['lcclcaid','lcclccid','lccvoyagefr','lccvoyageto','lccclmtype','lccuwsign'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lccColumns\nminLccid select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_tmp_lcc_claim' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tmpLccClaim\nmaxSumClaimIncurredUsd, tmpLccClaim join(lcclcaid_maxIncurred == lcclcaid_maxIncurred_tmp_lcc_claim\n\t&& max_sum_claim_incurred_usd == sum_claim_incurred_usd_tmp_lcc_claim,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> maxSumClaimTmpClaim\nmaxSumClaimTmpClaim, lccColumns join(lcclcaid_maxIncurred == lcclcaid\n\t&& min_lccid_maxIncurred_tmp_lcc_claim == lcclccid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> maxSumClaimLccTable\nlcflca filter(lcfchngtime <lcaclodate_lcfInput) ~> filterDates\nmaxSumClaimLccTable select(mapColumn(\n\t\tlcclcaid,\n\t\tlcclccid,\n\t\tlccuwsign,\n\t\tlccvoyagefr,\n\t\tlccvoyageto\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcctable\nfilterDates aggregate(groupBy(lcflcaid),\n\tlcfchngtime = max(lcfchngtime)) ~> lcftable\nobb select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_clm' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbClaim\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaclmdate','lcaobno'],name)),\n\t\t\t$$+'_claim_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaClaimObject\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaclmdate','lcaicaid'],name)),\n\t\t\t$$+'_risk_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaRiskObject\nica select(mapColumn(\n\t\teach(match(in(['icaicaid','icaobno'],name)),\n\t\t\t$$+'_risk_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> icaRiskObject\nlcaClaimObject, oba join(lcaobno_claim_object == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcaoba\nlcaoba, obbClaim join(obaobno == obbobno_clm,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter((coalesce(lcaclmdate_claim_object,currentTimestamp()) > coalesce(obbstdate_clm, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(lcaclmdate_claim_object,currentTimestamp()) < coalesce(obbendate_clm, addDays(currentTimestamp(), 36500)))) ~> claimObject\nlcaRiskObject, icaRiskObject join(lcaicaid_risk_object == icaicaid_risk_object,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcaica\nlcaica, oba join(icaobno_risk_object == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaoba\nicaoba, obbRisk join(obaobno == obbobno_risk,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obboba\nobboba filter((coalesce(lcaclmdate_risk_object,currentTimestamp()) > coalesce(obbstdate_risk, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(lcaclmdate_risk_object,currentTimestamp()) < coalesce(obbendate_risk, addDays(currentTimestamp(), 36500)))) ~> riskObject\nriskObject, claimObject union(byName: true)~> UnionRiskAndClaimObject\nUnionRiskAndClaimObject derive(obj_null = 1+null()) ~> objNull\nobjNull aggregate(groupBy(lcalcaid_risk_object),\n\tobbname_risk = max(obbname_risk),\n\t\tobbname_clm = max(obbname_clm),\n\t\tobaimono = max(obaimono)) ~> AggregateClmRiskObjects\nobb select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_risk' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbRisk\nAggregateClmRiskObjects derive(obbname = case(isNull(trim(obbname_risk)), trim(obbname_clm), trim(obbname_risk))) ~> obbname\nobbname select(mapColumn(\n\t\tlcalcaid_obbtable = lcalcaid_risk_object,\n\t\tobaimono,\n\t\tobbname\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbtable\nlcr aggregate(groupBy(lcrlcaid),\n\tmax_lcrrefname = max(lcrrefnam)) ~> lcrtable\nlca select(mapColumn(\n\t\teach(match(in(['lcalabid','lcatrtmco','lcalcaid','lcaicaid','lcauwsign','lcaclmdate','lcacrsign','lcawrkplccod','lcacrdate','lcaclodate','lcaltdate','lcaadjsign','lcacefocc','lcaclmcac','lcacefocm','lcabirtno','lcaextclmid','lcalossco','lcatlotype','lcacategorytype','lcaobno','lcaldescr','lcaportunlid','lcamfkey','lcaprocess','lcaclmid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcatable\nlda select(mapColumn(\n\t\teach(match(in(['ldalcaid','ldadedcurr','ldadedamt','ldatext','ldadays','ldaldaid'],name)),\n\t\t\t$$+'_max' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMaxColumns\nlda select(mapColumn(\n\t\teach(match(in(['ldadedcurr','ldadedamt','ldatext','ldadays','ldaldaid','ldalcaid'],name)),\n\t\t\t$$+'_min' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMinColumns\nFilterldadedcd3 aggregate(groupBy(ldalcaid),\n\tmax_ldaldaid = max(ldaldaid),\n\t\tmin_ldaldaid = min(ldaldaid)) ~> Aggregateldaldaid\nlda filter(!in(['990','999'], ldadedcd3)) ~> Filterldadedcd3\nldaMaxColumns, Aggregateldaldaid join(ldaldaid_max == max_ldaldaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinMaxLdaldaid\nldaMinColumns, Aggregateldaldaid join(ldaldaid_min == min_ldaldaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinMinLdaldaid\njoinMaxLdaldaid select(mapColumn(\n\t\tldadays_max,\n\t\tldadedamt_max,\n\t\tldadedcurr_max,\n\t\tldalcaid_max,\n\t\tldaldaid_max,\n\t\tldatext_max\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMax\njoinMinLdaldaid select(mapColumn(\n\t\tldadays_min,\n\t\tldadedamt_min,\n\t\tldadedcurr_min,\n\t\tldalcaid_min,\n\t\tldaldaid_min,\n\t\tldatext_min\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMin\nica, agatable join(icaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaaga\nicaaga, lcatable join(icaicaid == lcaicaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icalca\nicalca, labtable join(lcalabid == lablabid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcalab\nlcalab, inatable join(icainaid == inainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaina\nicaina, cartable join(labareacd == cariso3ch,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> labcar\nlabcar, laatable join(lablaaid == laalaaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lablaa\nlablaa, ldaMax join(lcalcaid == ldalcaid_max,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaldaMax\nlcaldaMax, ldaMin join(lcalcaid == ldalcaid_min,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaldaMin\ncurrency select(mapColumn(\n\t\teach(match(in(['source_code_key'],name)),\n\t\t\t$$+'_currency_min' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrencyMinLdaCurr\ncurrency select(mapColumn(\n\t\teach(match(in(['source_code_key'],name)),\n\t\t\t$$+'_currency_max' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrencyMaxLdaCurr\nlcaldaMin, xRefCurrencyMinLdaCurr lookup(ldadedcurr_min == source_code_key_currency_min,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> minLdaMinLdaCurr\nminLdaMinLdaCurr, xRefCurrencyMaxLdaCurr lookup(ldadedcurr_max == source_code_key_currency_max,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> maxLdaMaxLdaCurr\nmaxLdaMaxLdaCurr, sigtable join(upper(trim(lcacrsign)) == upper(trim(sigsign)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcasig\nlcasig, lcrtable join(lcalcaid == lcrlcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcr\nlcalcr, obbtable join(lcalcaid == lcalcaid_obbtable,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaobb\nlcaobb, lcftable join(lcalcaid == lcflcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcf\nlcalcf, lcctable join(lcalcaid == lcclcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcc\nlcalcc select(mapColumn(\n\t\teach(match(in(['lablabid','labclmdate','labmainev','lablodescr','lcatrtmco','labagtype','inaclmlead','lcalcaid','lcauwsign','lcaclmdate','lcacrsign','agabusndiv','lcawrkplccod','lcacrdate','lcaclodate','lcaltdate','lcaadjsign','ldadedcurr_min','ldaldaid_min','ldadedamt_min','ldatext_min','ldadays_min','ldadedcurr_max','ldadedamt_max','ldatext_max','ldadays_max','ldaldaid_max','laasupevnt','lcacefocc','lcaclmcac','lcacefocm','inaintrst','agabusncla','lcaclmid','lcaextclmid','max_lcrrefname','carmdescr','lcalossco','lcatlotype','lcacategorytype','obaimono','obbname','lcaldescr','lcfchngtime','agabusnsec','source_code_key_currency_min','source_code_key_currency_max','lccvoyagefr','lccvoyageto','lcaportunlid','inamutual','labportunlid','lccuwsign','lcamfkey','lcaprocess'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectParisColumns\nSelectParisColumns derive(lcatlotype = 0,\n\t\tlcacategorytype = coalesce(lcacategorytype,'Z'),\n\t\tlcawrkplccod = toString(lcawrkplccod),\n\t\tagabusndiv = case(left(toString(agabusndiv),1)=='4',toString(agabusndiv)+'-'+inamutual,toString(agabusndiv)),\n\t\tagabusnsec = toString(agabusnsec),\n\t\tclm_team_sign = case(agabusndiv==4, lccuwsign, lcauwsign)) ~> DerivedColumns\ntCrossReference filter(code_type_id ==801 &&\r\nsource_system == 'PARIS') ~> claimcategory801\nclaimcategory801 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description'],name)),\n\t\t\t$$+'_claimCategory' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClaimCategory\ntCrossReference filter(code_type_id ==800 &&\r\nsource_system == 'PARIS') ~> tlotype800\ntlotype800 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description'],name)),\n\t\t\t$$+'_tloType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefTloType\ntCrossReference filter(code_type_id == 466 &&\r\nsource_system == 'PARIS') ~> complexity466\ncomplexity466 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description','target_code'],name)),\n\t\t\t$$+'_complexity' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefComplexity\ntCrossReference filter(code_type_id == 329 &&\r\nsource_system == 'PARIS') ~> employee329\nemployee329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_clmHandler' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClmHandler\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 772) ~> mainevent772\nmainevent772 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainEvent' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainevent\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 774) ~> mainClaimType774\nmainClaimType774 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainClmType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainClmType\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 773) ~> eventdetail773\neventdetail773 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_eventDetail' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefEventDetail\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 329) ~> claimAdjuster329\nclaimAdjuster329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_claimAdjuster' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClaimAdjuster\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 106) ~> businessArea106\nbusinessArea106 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_businessArea' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefBusinessArea\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 122) ~> coverage122\ncoverage122 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_coverage' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCoverage\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 113) ~> agreementType113\nagreementType113 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_agreementType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefAgreementType\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 816) ~> clmProcess816\nclmProcess816 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_clmProcess' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClmProcess\nDerivedColumns, qtbtable lookup(toString(lcatrtmco) == qtbvalue,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIncStatus\nLookupIncStatus, xRefClaimCategory lookup(lcacategorytype == source_code_key_claimCategory,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClaimCategory\nLookupClaimCategory, xRefTloType lookup(toString(lcatlotype) == source_code_key_tloType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTloType\nLookupTloType, xRefComplexity lookup(lcawrkplccod == source_code_key_complexity,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupComplexity\nLookupComplexity, xRefClmHandler lookup(lcauwsign == source_code_key_clmHandler,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmHndlr\nLookupClmHndlr, xRefMainevent lookup(laasupevnt == source_code_key_mainEvent,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainEvent\nLookupMainEvent, xRefMainClmType lookup(lcacefocc == source_code_key_mainClmType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainClmType\nLookupMainClmType, xRefMainClmDetail lookup(lcacefocm == source_code_key_mainClmDetail,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainClmDetail\ntCrossReference filter(source_system == 'PARIS' &&\r\ncode_type_id == 775) ~> mainClmDetail775\nmainClmDetail775 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainClmDetail' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainClmDetail\nLookupMainClmDetail, xRefEventDetail lookup(labmainev == source_code_key_eventDetail,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupEventDetail\nLookupEventDetail, xRefClaimAdjuster lookup(lcaadjsign == source_code_key_claimAdjuster,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmAdjuster\nLookupClmAdjuster, xRefBusinessArea lookup(agabusndiv == source_code_key_businessArea,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupBusinessArea\nLookupBusinessArea, xRefCoverage lookup(inaintrst == source_code_key_coverage,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCoverage\nLookupCoverage, xRefAgreementType lookup(agabusnsec == source_code_key_agreementType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupAgreementType\nLookupAgreementType, xRefImmediateCause lookup(lcaclmcac == source_code_key_immediateCause,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupImmediateCause\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 161) ~> immediateCause161\nimmediateCause161 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_immediateCause' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefImmediateCause\nLookupImmediateCause, xRefClmProcess lookup(lcaprocess == source_code_key_clmProcess,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmProcess\nLookupClmProcess, staParisClmLead lookup(inaclmlead == peapeaid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupStaParisClmLead\nLookupStaParisClmLead derive(tem_key = 'N/A',\n\t\ttem_description = 'Not Applicable') ~> DerivedTempKeyTemDescription\nDerivedTempKeyTemDescription derive(inc_team_description = case(agabusndiv=='2', 'Offshore ENergy Claims (Oslo)', \r\ncase(in(['1','3'],agabusndiv) && tem_key=='25', 'Marine Claims (Oslo)', tem_description)),\n\t\tclmlead = case(isNull(peapeaid),'N','Y'),\n\t\tpk_key_inc = 'P'+lcalcaid,\n\t\tinc_ind_open = case(in([1,3],coalesce(toInteger(lcatrtmco),9)), 'Y', 'N'),\n\t\tinc_vessel_name = case(labagtype==2 && obbname == 'UNKNOWN' , 'ENERGY OBJECT' , upper(obbname)),\n\t\tgrp_key = 'P' + lablabid,\n\t\tclm_date = lcaclmdate,\n\t\tarchive_date = case(lcatrtmco == 9 && isNull(lcaclodate), toDate('01.01.1800', 'dd.MM.yyyy') , lcaclodate),\n\t\tlcaclmcac = toInteger(lcaclmcac),\n\t\tdeleted_ind = case(lcatrtmco == 9, 'Y', 'N'),\n\t\tinc_year_of_incident_calyear = toInteger(left(lablabid, 4)),\n\t\tbusiness_area = case(in(['PF','PM'],target_code_businessArea), 'PI', target_code_businessArea),\n\t\tagreement_type = target_code_agreementType,\n\t\tcoverage_code = target_code_coverage,\n\t\tmutual_fixed = case(inamutual == 'Y', 'Mutual', 'Fixed'),\n\t\tlast_renewed_date = null()+1,\n\t\tincident_id = null()+1,\n\t\tinc_file_number = '0') ~> DerivedColumns2\nDerivedColumns2 aggregate(groupBy(pk_key_inc,\n\t\tlablodescr,\n\t\tinc_ind_open,\n\t\tarchive_date,\n\t\tlast_renewed_date,\n\t\ttarget_code_clmHandler,\n\t\ttarget_description_clmHandler,\n\t\tinc_team_description,\n\t\tobbname,\n\t\tobaimono,\n\t\tinc_file_number,\n\t\tincident_id,\n\t\ttarget_code_clmProcess,\n\t\ttarget_description_clmProcess,\n\t\tgrp_key,\n\t\tlcalcaid,\n\t\ttarget_code_complexity,\n\t\ttarget_description_complexity,\n\t\tlcacrdate,\n\t\tlcaclodate,\n\t\tlcaltdate,\n\t\ttarget_code_claimAdjuster,\n\t\ttarget_description_claimAdjuster,\n\t\tldaldaid_min,\n\t\tldadedcurr_min,\n\t\tldadedamt_min,\n\t\tldatext_min,\n\t\tldadays_min,\n\t\tldaldaid_max,\n\t\tldadedcurr_max,\n\t\tldadedamt_max,\n\t\tldatext_max,\n\t\tldadays_max,\n\t\ttarget_code_mainEvent,\n\t\ttarget_description_mainEvent,\n\t\ttarget_code_eventDetail,\n\t\ttarget_description_eventDetail,\n\t\ttarget_code_mainClmType,\n\t\ttarget_description_mainClmType,\n\t\ttarget_code_mainClmDetail,\n\t\ttarget_description_mainClmDetail,\n\t\tbusiness_area,\n\t\tagreement_type,\n\t\tcoverage_code,\n\t\tmutual_fixed,\n\t\ttarget_code_immediateCause,\n\t\ttarget_description_immediateCause,\n\t\tlcaclmid,\n\t\tlcacrsign,\n\t\tdeleted_ind,\n\t\tlcaextclmid,\n\t\tqtbmdescr,\n\t\tmax_lcrrefname,\n\t\tcarmdescr,\n\t\tlcalossco,\n\t\ttarget_description_tloType,\n\t\ttarget_description_claimCategory,\n\t\tinc_year_of_incident_calyear,\n\t\tlcaldescr,\n\t\tlcfchngtime,\n\t\tsource_code_key_currency_min,\n\t\tsource_code_key_currency_max,\n\t\tlccvoyagefr,\n\t\tlccvoyageto,\n\t\tlcaportunlid,\n\t\tlabportunlid,\n\t\tlcamfkey),\n\tlabclmdate = max(labclmdate)) ~> Deduplicate\nunltable select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_plc_of_incident' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlPlcOfIncident\nDeduplicate, unlVoyageTo lookup(lccvoyageto == unlname_voyageTo,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlVoyTo\nLookupUnlVoyTo, unlVoyageFrom lookup(lccvoyagefr == unlunlid_voyageFrom,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlVoyFrom\nunltable select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_voyageTo' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlVoyageTo\nunltable select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_voyageFrom' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlVoyageFrom\nLookupUnlVoyFrom, unlPlcOfIncident lookup(labportunlid == unlunlid_plc_of_incident,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlPlcOfIncident\nLookupUnlPlcOfIncident derive(unlname_voyageTo = left(unlname_voyageTo, 50),\n\t\tunlname_voyageFrom = left(unlname_voyageFrom, 50),\n\t\tunlname_plc_of_incident = left(unlname_plc_of_incident, 50)) ~> ChangeUnlColumns\nstaRiskGroup select(mapColumn(\n\t\teach(match(in(['mutual_fixed','coverage_code','agreement_type','business_area','risk_group_code','segment_code'],name)),\n\t\t\t$$+'_riskGroup' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> riskGroup\nChangeUnlColumns, riskGroup lookup(business_area == business_area_riskGroup\n\t&& coverage_code == coverage_code_riskGroup\n\t&& agreement_type == agreement_type_riskGroup\n\t&& mutual_fixed == mutual_fixed_riskGroup,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRiskGroup\nLookupRiskGroup, exchrateUSDmax lookup(labclmdate == exchange_from_date_maxExchRate\n\t&& source_code_key_currency_max == from_currency_code_maxExchRate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExchrateMax\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_minExchRate' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSDmin\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_maxExchRate' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSDmax\nLookupExchrateMax, exchrateUSDmin lookup(source_code_key_currency_min == from_currency_code_minExchRate\n\t&& labclmdate == exchange_from_date_minExchRate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExchrateMin\nLookupExchrateMin derive(ldadedcurr_max = case(ldaldaid_min != ldaldaid_max,ldadedcurr_max, null()+'.'),\n\t\tldatext_max = case(ldaldaid_min != ldaldaid_max, ldatext_max, null()+'.'),\n\t\tldadedamt_max = case(ldaldaid_min != ldaldaid_max, ldadedamt_max, toLong(null()+1)),\n\t\tldadays_max = case(ldaldaid_min != ldaldaid_max, ldadays_max, toDecimal(null()+1)),\n\t\tmin_amount_usd = ldadedamt_min/exchange_rate_minExchRate,\n\t\tinc_complexity_desc = left(target_description_complexity, 25),\n\t\tinc_geotag_reference = left(lcalcaid, 4)+replace(left(lcalcaid,6),' ', '')) ~> DeriveColumns\nDeriveColumns derive(inc_ded_amount_usd = ldadedamt_max/exchange_rate_maxExchRate) ~> incDedAmountUsd\nemployee329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_registeredBy' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegisteredBy\nincDedAmountUsd, xRefRegisteredBy lookup(lcacrsign == source_code_key_registeredBy,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegisteredBy\ndimTime select(mapColumn(\n\t\teach(match(in(['day','accounting_month_key','underwriting_year_number'],name)),\n\t\t\t$$+'_yearOfInc' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimTimeYeardOfInc\ndimTime select(mapColumn(\n\t\teach(match(in(['day','accounting_month_key','accounting_year_number'],name)),\n\t\t\t$$+'_YearMonthOfReg' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimTimeYearMonthOfReg\nLookupRegisteredBy, dimTimeYeardOfInc lookup(labclmdate == day_yearOfInc,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYearOfInc\nLookupYearOfInc, dimTimeYearMonthOfReg lookup(lcacrdate == day_YearMonthOfReg,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYearMonthOfReg\nLookupYearMonthOfReg aggregate(groupBy(risk_group_code_riskGroup,\n\t\taccounting_month_key_yearOfInc,\n\t\taccounting_month_key_YearMonthOfReg,\n\t\tinc_complexity_desc,\n\t\tinc_ded_amount_usd,\n\t\tldadedamt_max,\n\t\tldadedcurr_max,\n\t\tldatext_max,\n\t\tldadays_max,\n\t\tmin_amount_usd,\n\t\tlcacrdate,\n\t\tlcaltdate,\n\t\tunderwriting_year_number_yearOfInc,\n\t\taccounting_year_number_YearMonthOfReg,\n\t\tarchive_date,\n\t\tlabclmdate,\n\t\tlablodescr,\n\t\tinc_ind_open,\n\t\tlast_renewed_date,\n\t\ttarget_code_clmHandler,\n\t\ttarget_description_clmHandler,\n\t\tinc_team_description,\n\t\tobbname,\n\t\tobaimono,\n\t\tinc_file_number,\n\t\tincident_id,\n\t\ttarget_code_clmProcess,\n\t\ttarget_description_clmProcess,\n\t\tgrp_key,\n\t\tlcalcaid,\n\t\ttarget_code_complexity,\n\t\ttarget_description_complexity,\n\t\tlcaclodate,\n\t\ttarget_code_claimAdjuster,\n\t\ttarget_description_claimAdjuster,\n\t\tldadedcurr_min,\n\t\tldadedamt_min,\n\t\tldatext_min,\n\t\tldadays_min,\n\t\ttarget_code_mainEvent,\n\t\ttarget_description_mainEvent,\n\t\ttarget_code_eventDetail,\n\t\ttarget_description_eventDetail,\n\t\ttarget_code_mainClmType,\n\t\ttarget_description_mainClmType,\n\t\ttarget_code_mainClmDetail,\n\t\ttarget_description_mainClmDetail,\n\t\tbusiness_area,\n\t\tagreement_type,\n\t\tcoverage_code,\n\t\tmutual_fixed,\n\t\ttarget_code_immediateCause,\n\t\ttarget_description_immediateCause,\n\t\tsegment_code_riskGroup,\n\t\ttarget_code_registeredBy,\n\t\ttarget_description_registeredBy,\n\t\tlcaextclmid,\n\t\tdeleted_ind,\n\t\tqtbmdescr,\n\t\tmax_lcrrefname,\n\t\tcarmdescr,\n\t\tlcalossco,\n\t\ttarget_description_tloType,\n\t\ttarget_description_claimCategory,\n\t\tinc_geotag_reference,\n\t\tinc_year_of_incident_calyear,\n\t\tlcaldescr,\n\t\tlcfchngtime,\n\t\tunlname_voyageFrom,\n\t\tunlname_voyageTo,\n\t\tunlname_plc_of_incident,\n\t\tlcamfkey),\n\tpk_key_inc = first(pk_key_inc)) ~> Deduplicator2\nDeduplicator2 derive(segment_code_riskGroup = case(isNull(segment_code_riskGroup), 'N/A', segment_code_riskGroup),\n\t\trisk_group_code_riskGroup = case(isNull(risk_group_code_riskGroup), 'N/A', risk_group_code_riskGroup),\n\t\tint_text_restricted = case(in(['CREW','PASS','PERS'], target_code_mainClmType),  'Restricted due to privacy regulations' , lablodescr),\n\t\tinc_my_guard_claim_id = case(lcaextclmid == '0', null()+'.', lcaextclmid),\n\t\tinc_om_claim_rule_code = 'N/A',\n\t\tinc_om_claim_rule_desc = 'Not Applicable',\n\t\tinc_paris_pool_ind = 'N',\n\t\tlast_updated_by = 'm_pre_dim_incident_pa',\n\t\tinc_longitude = 0,\n\t\tinc_latitude = 0) ~> DerivedColumn1\nstaIncidentRsvGroupMe select(mapColumn(\n\t\teach(match(in(['rsv_group_code','rsv_group_desc','business_area','rob_segment_code','rob_risk_group_code'],name)),\n\t\t\t$$+'_incRsvGroupMe' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> incRsvGroupMe\nDerivedColumn1, incRsvGroupMe lookup(risk_group_code_riskGroup == rob_risk_group_code_incRsvGroupMe\n\t&& business_area == business_area_incRsvGroupMe\n\t&& segment_code_riskGroup == rob_segment_code_incRsvGroupMe,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIncRsvGroupMe\nLookupIncRsvGroupMe sink(input(\n\t\tpk_key_inc as string,\n\t\tinc_retention as decimal(28,10),\n\t\tinc_gic_incident_id as decimal(28,10),\n\t\tinc_mygard_claim_id as string,\n\t\tinc_date_archive as date,\n\t\tinc_deleted_ind as string,\n\t\tinc_year_of_registered as decimal(28,10),\n\t\tinc_ind_open as string,\n\t\tinc_reg_in_paris_pool_ind as string,\n\t\tinc_claim_process_desc as string,\n\t\tgrp_text as string,\n\t\tinc_team_description as string,\n\t\tinc_longitude as decimal(28,10),\n\t\tdate_last_updated as timestamp,\n\t\tinc_voyage_to as string,\n\t\tinc_ded_used_text_1 as string,\n\t\tinc_registered_by_desc as string,\n\t\tinc_ded_used_amount_2 as decimal(28,10),\n\t\tbest_value_estimate as decimal(28,10),\n\t\tinc_vessel_name as string,\n\t\tinc_yearmonth_of_registered as decimal(28,10),\n\t\tinc_reserve_created_by_desc as string,\n\t\tinc_text_restricted as string,\n\t\tinc_claim_adjuster_desc as string,\n\t\tgrp_description as string,\n\t\tinc_gard_claim_id as string,\n\t\tgrp_event_detail_description as string,\n\t\tinc_registered_date as date,\n\t\tinc_voyage_from as string,\n\t\tinc_main_claim_detail_desc as string,\n\t\tinc_main_claim_handler_desc as string,\n\t\tgrp_ind_major_incient as string,\n\t\tgrp_key as string,\n\t\tgrp_main_event_code as string,\n\t\tinc_latitude as decimal(28,10),\n\t\tinc_om_rule_code as string,\n\t\tinc_ded_used_amount_usd_1 as decimal(28,10),\n\t\tinc_reserve_created_by_code as string,\n\t\tinc_year_of_incident_calyear as decimal(28,10),\n\t\tinc_description as string,\n\t\tinc_year_of_incident as decimal(28,10),\n\t\tlast_updated_by as string,\n\t\tinc_incident_risk_group_desc as string,\n\t\tinc_me_tlo_ind as string,\n\t\tinc_complexity_desc as string,\n\t\tinc_date_of_incident as date,\n\t\tinc_geotag_reference as string,\n\t\tinc_claim_process_code as string,\n\t\tinc_casualty_cause as string,\n\t\treserve_worst_outcome as decimal(28,10),\n\t\tinc_status_desc as string,\n\t\tinc_imono as string,\n\t\tinc_text as string,\n\t\tinc_ded_used_amount_1 as decimal(28,10),\n\t\tinc_ded_used_days_1 as decimal(28,10),\n\t\tinc_me_tlo_type as string,\n\t\tdate_inserted as timestamp,\n\t\tinc_ded_used_curr_2 as string,\n\t\tinc_ded_used_amount_usd_2 as decimal(28,10),\n\t\tinc_om_rule_desc as string,\n\t\tinc_me_claim_cat_type as string,\n\t\tinc_registered_by_code as string,\n\t\tinc_text_unresticted as string,\n\t\tinc_claim_adjuster_code as string,\n\t\tinc_code as string,\n\t\tinc_immediate_cause as string,\n\t\tgrp_claim_incurred_gross_usd as decimal(28,10),\n\t\tinc_ded_used_curr_1 as string,\n\t\tinc_main_claim_detail_code as string,\n\t\tinc_ded_used_text_2 as string,\n\t\tgrp_event_deatil_code as string,\n\t\tinc_date_archive_old as date,\n\t\tinserted_by as string,\n\t\tinc_place_of_incident as string,\n\t\tinc_main_claim_type_desc as string,\n\t\tinc_yearmonth_of_incident as decimal(28,10),\n\t\tinc_date_last_reviewed as date,\n\t\tinc_members_reference as string,\n\t\tinc_payment_created_by_desc as string,\n\t\tinc_main_jurisdiction as string,\n\t\tinc_complexity_code as string,\n\t\tinc_ded_used_days_2 as decimal(28,10),\n\t\tgrp_main_event_description as string,\n\t\tinc_incident_risk_group as string,\n\t\tinc_main_claim_type_code as string,\n\t\tinc_incident_reference as string,\n\t\tgrp_code as string,\n\t\treserve_best_outcome as decimal(28,10),\n\t\tinc_file_number as string,\n\t\tgrp_id as decimal(28,10),\n\t\tinc_payment_created_by_code as string,\n\t\tinc_main_claim_handler_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['pk_key_inc'],\n\tformat: 'table',\n\tmapColumn(\n\t\tpk_key_inc,\n\t\tinc_ind_open,\n\t\tinc_team_description,\n\t\tinc_longitude,\n\t\tgrp_key,\n\t\tinc_latitude,\n\t\tinc_year_of_incident_calyear,\n\t\tlast_updated_by,\n\t\tinc_complexity_desc,\n\t\tinc_geotag_reference,\n\t\tinc_file_number\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimIncidentPa"
		}
	}
}