{
	"name": "m_pre_dim_incident_pa_copy1",
	"properties": {
		"description": "mangler lookup til claimteam ",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "hlpExchangeRateToUsd"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "fil"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "fal"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcc"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tCrossReference"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcf"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lca"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obb"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "oba"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ica"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcr"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "car"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "laa"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "aga"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "sig"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "ina"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lab"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "lda"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "qtb"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "staParisClmLead"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "unl"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "staRiskGroup"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "dimTime"
				},
				{
					"dataset": {
						"referenceName": "Oltp05",
						"type": "DatasetReference"
					},
					"name": "staIncidentRsvGroupMe"
				}
			],
			"sinks": [
				{
					"name": "preDimIncidentPa"
				}
			],
			"transformations": [
				{
					"name": "currency"
				},
				{
					"name": "exchrateUSD"
				},
				{
					"name": "lccmaxincurred"
				},
				{
					"name": "xRefCurrency"
				},
				{
					"name": "lcftrtmco"
				},
				{
					"name": "lfcchngtime"
				},
				{
					"name": "selectLcf"
				},
				{
					"name": "lcaLcfInput"
				},
				{
					"name": "lcatableLcfInput",
					"description": "Filtering rows on lcaclodate not null"
				},
				{
					"name": "lcflca"
				},
				{
					"name": "falCurr"
				},
				{
					"name": "lccmaxincurredfal"
				},
				{
					"name": "falfil"
				},
				{
					"name": "joinExchrate"
				},
				{
					"name": "faltable"
				},
				{
					"name": "claimIncurredUsd"
				},
				{
					"name": "sumClaimIncurredUsd"
				},
				{
					"name": "minLccid"
				},
				{
					"name": "maxSumClaimIncurredUsd"
				},
				{
					"name": "lccColumns"
				},
				{
					"name": "tmpLccClaim"
				},
				{
					"name": "maxSumClaimTmpClaim"
				},
				{
					"name": "maxSumClaimLccTable"
				},
				{
					"name": "filterDates",
					"description": "Filtering rows on lcfchntime < lcaclodate"
				},
				{
					"name": "lcctable"
				},
				{
					"name": "lcftable"
				},
				{
					"name": "obbClaim"
				},
				{
					"name": "lcaClaimObject"
				},
				{
					"name": "lcaRiskObject"
				},
				{
					"name": "icaRiskObject"
				},
				{
					"name": "lcaoba"
				},
				{
					"name": "obaobb"
				},
				{
					"name": "claimObject",
					"description": "Filtering rows on claim date between obbstdate and obbendate (or +/- 10 years from current date)"
				},
				{
					"name": "lcaica"
				},
				{
					"name": "icaoba"
				},
				{
					"name": "obboba"
				},
				{
					"name": "riskObject"
				},
				{
					"name": "UnionRiskAndClaimObject"
				},
				{
					"name": "objNull"
				},
				{
					"name": "AggregateClmRiskObjects"
				},
				{
					"name": "obbRisk"
				},
				{
					"name": "obbname"
				},
				{
					"name": "obbtable"
				},
				{
					"name": "filterLcrctrid"
				},
				{
					"name": "selectLcr"
				},
				{
					"name": "lcrtable"
				},
				{
					"name": "lcatable"
				},
				{
					"name": "agatable"
				},
				{
					"name": "sigtable"
				},
				{
					"name": "inatable"
				},
				{
					"name": "labtable"
				},
				{
					"name": "ldaMaxColumns"
				},
				{
					"name": "ldaMinColumns"
				},
				{
					"name": "Aggregateldaldaid"
				},
				{
					"name": "Filterldadedcd3"
				},
				{
					"name": "joinMaxLdaldaid"
				},
				{
					"name": "joinMinLdaldaid"
				},
				{
					"name": "ldaMax"
				},
				{
					"name": "ldaMin"
				},
				{
					"name": "icaaga"
				},
				{
					"name": "icalca"
				},
				{
					"name": "lcalab"
				},
				{
					"name": "icaina"
				},
				{
					"name": "labcar"
				},
				{
					"name": "lablaa"
				},
				{
					"name": "lcaldaMax"
				},
				{
					"name": "lcaldaMin"
				},
				{
					"name": "xRefCurrencyMinLdaCurr"
				},
				{
					"name": "xRefCurrencyMaxLdaCurr"
				},
				{
					"name": "minLdaMinLdaCurr"
				},
				{
					"name": "maxLdaMaxLdaCurr"
				},
				{
					"name": "lcasig"
				},
				{
					"name": "lcalcr"
				},
				{
					"name": "lcaobb"
				},
				{
					"name": "lcalcf"
				},
				{
					"name": "lcalcc"
				},
				{
					"name": "SelectParisColumns"
				},
				{
					"name": "DerivedColumns",
					"description": "Updating/creating columns:\n'lcatlotype, lcacategorytype, lcawrkplccod, agabusndiv, agabusnsec, clm_team_sign"
				},
				{
					"name": "claimcategory801"
				},
				{
					"name": "xRefClaimCategory"
				},
				{
					"name": "tlotype800"
				},
				{
					"name": "xRefTloType"
				},
				{
					"name": "complexity466"
				},
				{
					"name": "xRefComplexity"
				},
				{
					"name": "employee329"
				},
				{
					"name": "xRefClmHandler"
				},
				{
					"name": "mainevent772"
				},
				{
					"name": "xRefMainevent"
				},
				{
					"name": "mainClaimType774"
				},
				{
					"name": "xRefMainClmType"
				},
				{
					"name": "eventdetail773"
				},
				{
					"name": "xRefEventDetail"
				},
				{
					"name": "claimAdjuster329"
				},
				{
					"name": "xRefClaimAdjuster"
				},
				{
					"name": "businessArea106"
				},
				{
					"name": "xRefBusinessArea"
				},
				{
					"name": "coverage122"
				},
				{
					"name": "xRefCoverage"
				},
				{
					"name": "agreementType113"
				},
				{
					"name": "xRefAgreementType"
				},
				{
					"name": "clmProcess816"
				},
				{
					"name": "xRefClmProcess"
				},
				{
					"name": "FilterQtbfieldn"
				},
				{
					"name": "qtbtable"
				},
				{
					"name": "LookupIncStatus"
				},
				{
					"name": "LookupClaimCategory"
				},
				{
					"name": "LookupTloType"
				},
				{
					"name": "LookupComplexity"
				},
				{
					"name": "LookupClmHndlr"
				},
				{
					"name": "LookupMainEvent"
				},
				{
					"name": "LookupMainClmType"
				},
				{
					"name": "LookupMainClmDetail"
				},
				{
					"name": "mainClmDetail775"
				},
				{
					"name": "xRefMainClmDetail"
				},
				{
					"name": "LookupEventDetail"
				},
				{
					"name": "LookupClmAdjuster"
				},
				{
					"name": "LookupBusinessArea"
				},
				{
					"name": "LookupCoverage"
				},
				{
					"name": "LookupAgreementType"
				},
				{
					"name": "LookupImmediateCause"
				},
				{
					"name": "immediateCause161"
				},
				{
					"name": "xRefImmediateCause"
				},
				{
					"name": "LookupClmProcess"
				},
				{
					"name": "LookupStaParisClmLead"
				},
				{
					"name": "DerivedTempKeyTemDescription"
				},
				{
					"name": "DerivedColumns2"
				},
				{
					"name": "Deduplicate"
				},
				{
					"name": "unlPlcOfIncident"
				},
				{
					"name": "LookupUnlVoyTo"
				},
				{
					"name": "LookupUnlVoyFrom"
				},
				{
					"name": "unlVoyageTo"
				},
				{
					"name": "unlVoyageFrom"
				},
				{
					"name": "LookupUnlPlcOfIncident"
				},
				{
					"name": "ChangeUnlColumns"
				},
				{
					"name": "riskGroup"
				},
				{
					"name": "LookupRiskGroup"
				},
				{
					"name": "LookupExchrateMax"
				},
				{
					"name": "exchrateUSDmin"
				},
				{
					"name": "exchrateUSDmax"
				},
				{
					"name": "LookupExchrateMin"
				},
				{
					"name": "DeriveColumns",
					"description": "Creating/updating columns:\nldadedcurr_max, ldatext_max, ldadedamt_max, ldadays_max, min_amount_usd, inc:complexity:desc, inc_geotag_reference"
				},
				{
					"name": "incDedAmountUsd"
				},
				{
					"name": "xRefRegisteredBy"
				},
				{
					"name": "LookupRegisteredBy"
				},
				{
					"name": "dimTimeYeardOfInc"
				},
				{
					"name": "dimTimeYearMonthOfReg"
				},
				{
					"name": "LookupYearOfInc"
				},
				{
					"name": "LookupYearMonthOfReg"
				},
				{
					"name": "Deduplicator2"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "incRsvGroupMe"
				},
				{
					"name": "MutualFixedAndSpecialCases"
				},
				{
					"name": "LookupIncRsvGroupMe"
				}
			],
			"script": "source(output(\n\t\texchange_rate as decimal(28,10),\n\t\texchange_from_date as date,\n\t\tfrom_currency_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select exchange_rate,exchange_from_date,from_currency_code\\nfrom dwh_stage.hlp_exchange_rate_to_usd',\n\tformat: 'query') ~> hlpExchangeRateToUsd\nsource(output(\n\t\tfilfilid as string,\n\t\tfilvaldate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select filfilid, filvaldate\\nfrom dwh_stage.p_filtable',\n\tformat: 'query') ~> fil\nsource(output(\n\t\tfallccid as string,\n\t\tfalfilid as string,\n\t\tfalcurr as string,\n\t\tfalinout as string,\n\t\tfaloutcode as integer,\n\t\tfaloutstanding as decimal(28,10),\n\t\tfalsettled as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select fallccid,falfilid,falcurr,falinout,faloutcode,faloutstanding,falsettled\\nfrom dwh_stage.p_faltable',\n\tformat: 'query') ~> fal\nsource(output(\n\t\tlcclcaid as string,\n\t\tlcclccid as string,\n\t\tlccvoyagefr as string,\n\t\tlccvoyageto as string,\n\t\tlccclmtype as string,\n\t\tlccuwsign as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \\nlcclcaid, lcclccid, lccvoyagefr, lccvoyageto, lccclmtype, lccuwsign\\nfrom dwh_stage.p_lcctable',\n\tformat: 'query') ~> lcc\nsource(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select *\\nfrom dwh_stage.t_crossreference',\n\tformat: 'query') ~> tCrossReference\nsource(output(\n\t\tlcfchngtime as string,\n\t\tlcflcaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lcfchngtime, lcflcaid\\nfrom dwh_stage.p_lcftable\\nwhere lcftrtmco in (2,4)',\n\tformat: 'query') ~> lcf\nsource(output(\n\t\tlcalabid as string,\n\t\tlcatrtmco as integer,\n\t\tlcalcaid as string,\n\t\tlcaicaid as string,\n\t\tlcauwsign as string,\n\t\tlcaclmdate as date,\n\t\tlcacrsign as string,\n\t\tlcawrkplccod as integer,\n\t\tlcacrdate as date,\n\t\tlcaclodate as date,\n\t\tlcaltdate as date,\n\t\tlcaadjsign as string,\n\t\tlcacefocc as string,\n\t\tlcaclmcac as string,\n\t\tlcacefocm as string,\n\t\tlcabirtno as string,\n\t\tlcaextclmid as string,\n\t\tlcalossco as string,\n\t\tlcatlotype as integer,\n\t\tlcacategorytype as string,\n\t\tlcaobno as integer,\n\t\tlcaldescr as string,\n\t\tlcaportunlid as string,\n\t\tlcamfkey as string,\n\t\tlcaprocess as string,\n\t\tlcaclmid as integer,\n\t\tlcaacstat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \\nlcalabid,lcatrtmco,lcalcaid,lcaicaid,lcauwsign,lcaclmdate,lcacrsign,lcawrkplccod,lcacrdate,lcaclodate,lcaltdate,lcaadjsign,lcacefocc,lcaclmcac,lcacefocm,lcabirtno,lcaextclmid,lcalossco,lcatlotype,lcacategorytype,lcaobno,lcaldescr,lcaportunlid,lcamfkey,lcaprocess,lcaclmid, lcaacstat\\nfrom dwh_stage.p_lcatable',\n\tformat: 'query') ~> lca\nsource(output(\n\t\tobbobno as integer,\n\t\tobbstdate as date,\n\t\tobbendate as date,\n\t\tobbname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select\\nobbobno, obbstdate, obbendate, obbname\\nfrom dwh_stage.p_obbtable',\n\tformat: 'query') ~> obb\nsource(output(\n\t\tobaobno as integer,\n\t\tobaimono as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obaobno,obaimono\\nfrom dwh_stage.p_obatable',\n\tformat: 'query') ~> oba\nsource(output(\n\t\ticaicaid as string,\n\t\ticaobno as integer,\n\t\ticainaid as string,\n\t\ticaagaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaicaid, icaobno, icainaid, icaagaid\\nfrom dwh_stage.p_icatable',\n\tformat: 'query') ~> ica\nsource(output(\n\t\tlcrlcaid as string,\n\t\tlcrrefnam as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lcrlcaid, lcrrefnam\\nfrom dwh_stage.p_lcrtable\\nwhere lower(lcrctrid) = \\'source\\'',\n\tformat: 'query') ~> lcr\nsource(output(\n\t\tcariso3ch as string,\n\t\tcarmdescr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select cariso3ch, carmdescr\\nfrom dwh_stage.p_cartable',\n\tformat: 'query') ~> car\nsource(output(\n\t\tlaalaaid as string,\n\t\tlaasupevnt as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select laalaaid, laasupevnt\\nfrom dwh_stage.p_laatable',\n\tformat: 'query') ~> laa\nsource(output(\n\t\tagaadjsign as string,\n\t\tagaadmcode as string,\n\t\tagaagaid as string,\n\t\tagaagname as string,\n\t\tagaagno as decimal(38,18),\n\t\tagaagnorf as decimal(38,18),\n\t\tagaagtype as decimal(38,18),\n\t\tagaalgid as string,\n\t\tagaareacd as string,\n\t\tagaassetno as decimal(38,18),\n\t\tagaassetsubno as decimal(38,18),\n\t\tagaausign as string,\n\t\tagaautoconpol as string,\n\t\tagaavttrkeep as string,\n\t\tagaavttrnote as string,\n\t\tagaavttrpeaid as decimal(38,18),\n\t\tagaavttrpros as decimal(38,18),\n\t\tagaavttrstatus as string,\n\t\tagaavttrynsw as string,\n\t\tagabusnbranch as decimal(38,18),\n\t\tagabusncla as decimal(38,18),\n\t\tagabusndiv as decimal(38,18),\n\t\tagabusnregion as decimal(38,18),\n\t\tagabusnsec as decimal(38,18),\n\t\tagacantxt as string,\n\t\tagacashbefcovdate as timestamp,\n\t\tagacashbeforecover as string,\n\t\tagaccpid as string,\n\t\tagachartradeteam as string,\n\t\tagaclasstype as string,\n\t\tagaclmsign as string,\n\t\tagaclmuat as string,\n\t\tagaclosedate as timestamp,\n\t\tagaclosesign as string,\n\t\tagacloseynsw as string,\n\t\tagacomfacnote as string,\n\t\tagacomfacpeaid as decimal(38,18),\n\t\tagacomfacynsw as string,\n\t\tagacomp2 as decimal(38,18),\n\t\tagacompdisckeep as string,\n\t\tagacompdiscnote as string,\n\t\tagacompdiscpeaid as decimal(38,18),\n\t\tagacompdiscpros as decimal(38,18),\n\t\tagacompdiscynsw as string,\n\t\tagacomtarnote as string,\n\t\tagacomtarpeaid as decimal(38,18),\n\t\tagacomtarstknote as string,\n\t\tagacomtarstkpeaid as decimal(38,18),\n\t\tagacomtarstkynsw as string,\n\t\tagacomtarynsw as string,\n\t\tagaconcern as decimal(38,18),\n\t\tagaconnectsw as string,\n\t\tagaconsrnote as string,\n\t\tagaconsrynsw as string,\n\t\tagacontinsagaid as string,\n\t\tagacontinsagno as decimal(38,18),\n\t\tagacontinsynsw as string,\n\t\tagacrdate as timestamp,\n\t\tagacrsign as string,\n\t\tagacumul as string,\n\t\tagadatcan as timestamp,\n\t\tagadatest as timestamp,\n\t\tagadatora as timestamp,\n\t\tagadatore as timestamp,\n\t\tagadatpca as timestamp,\n\t\tagadecltyp as string,\n\t\tagadwbs as string,\n\t\tagaeldocynsw as string,\n\t\tagaelinvynsw as string,\n\t\tagaendate as timestamp,\n\t\tagaenhour as decimal(38,18),\n\t\tagaentrytype as string,\n\t\tagaeosign as string,\n\t\tagafileref as decimal(38,18),\n\t\tagafixprnote as string,\n\t\tagafixprpeaid as decimal(38,18),\n\t\tagafixprynsw as string,\n\t\tagafromcomp as decimal(38,18),\n\t\tagagday as decimal(38,18),\n\t\tagagen1keep as string,\n\t\tagagen1note as string,\n\t\tagagen1peaid as decimal(38,18),\n\t\tagagen1prov as decimal(38,18),\n\t\tagagen1ynsw as string,\n\t\tagagen2keep as string,\n\t\tagagen2note as string,\n\t\tagagen2peaid as decimal(38,18),\n\t\tagagen2prov as decimal(38,18),\n\t\tagagen2ynsw as string,\n\t\tagagen3keep as string,\n\t\tagagen3note as string,\n\t\tagagen3peaid as decimal(38,18),\n\t\tagagen3prov as decimal(38,18),\n\t\tagagen3ynsw as string,\n\t\tagagident as string,\n\t\tagagmonth as decimal(38,18),\n\t\tagagtype as string,\n\t\tagahealthdate as timestamp,\n\t\tagahealthynsw as string,\n\t\tagaincprovkeep as string,\n\t\tagaincprovnote as string,\n\t\tagaincprovpeaid as decimal(38,18),\n\t\tagaincprovpros as decimal(38,18),\n\t\tagaincprovynsw as string,\n\t\tagaincrebkeep as string,\n\t\tagaincrebnote as string,\n\t\tagaincrebpeaid as decimal(38,18),\n\t\tagaincrebpros as decimal(38,18),\n\t\tagaincrebynsw as string,\n\t\tagaindustrytxt as string,\n\t\tagainstti as string,\n\t\tagaintnote as string,\n\t\tagaisic as string,\n\t\tagaiyear as decimal(38,18),\n\t\tagaknvmark as string,\n\t\tagaktocred as decimal(38,18),\n\t\tagaktocust as decimal(38,18),\n\t\tagaktodeb as decimal(38,18),\n\t\tagaliabendate as timestamp,\n\t\tagalocpolissued as string,\n\t\tagalongname as string,\n\t\tagalostcode as string,\n\t\tagalosttxt35 as string,\n\t\tagaludate as timestamp,\n\t\tagalusign as string,\n\t\tagamaiper as decimal(38,18),\n\t\tagamgrpnote as string,\n\t\tagamgrpynsw as string,\n\t\tagamincurr as string,\n\t\tagaminpre as decimal(38,18),\n\t\taganoterm as decimal(38,18),\n\t\tagansalecom as decimal(38,18),\n\t\taganscomynsw as string,\n\t\taganumpers as decimal(38,18),\n\t\tagaoffice as decimal(38,18),\n\t\tagaoiltyp as decimal(38,18),\n\t\tagaopencover as string,\n\t\tagaordercode as string,\n\t\tagaordertxt35 as string,\n\t\tagaorgcrdate as timestamp,\n\t\tagaorgins as decimal(38,18),\n\t\tagaoxno as decimal(38,18),\n\t\tagaoxrefid as string,\n\t\tagaoyrno as decimal(38,18),\n\t\tagaoyrnote as string,\n\t\tagaoyrto as decimal(38,18),\n\t\tagapeoid as string,\n\t\tagapictype as string,\n\t\tagapwcode as decimal(38,18),\n\t\tagapwfrdate as timestamp,\n\t\tagaratcod as string,\n\t\tagaratemodel as decimal(38,18),\n\t\tagarefcod as string,\n\t\tagareftxt as string,\n\t\tagaremove as decimal(38,18),\n\t\tagarenbatchid as decimal(38,18),\n\t\tagarencod as decimal(38,18),\n\t\tagarentxt as string,\n\t\tagasalesdiv as decimal(38,18),\n\t\tagasetfreq as decimal(38,18),\n\t\tagasettldetprt as string,\n\t\tagashut as string,\n\t\tagasitid as string,\n\t\tagaskipinstadynsw as string,\n\t\tagasource as decimal(38,18),\n\t\tagastat1 as string,\n\t\tagastat2 as string,\n\t\tagastateareacd as string,\n\t\tagastdate as timestamp,\n\t\tagasthour as decimal(38,18),\n\t\tagaswo as string,\n\t\tagatocomp as decimal(38,18),\n\t\tagatrackit as string,\n\t\tagatrackit1 as string,\n\t\tagatrackit2 as string,\n\t\tagatrackit3 as string,\n\t\tagatreatas as string,\n\t\tagaturnover as decimal(38,18),\n\t\tagatzone as string,\n\t\tagauat as string,\n\t\tagaufafpynsw as string,\n\t\tagausage as string,\n\t\tagausecod as string,\n\t\tagauwsign as string,\n\t\tagawbs as string,\n\t\tagawbscust as string,\n\t\tagawntnocperiod as decimal(38,18),\n\t\tagawnttext35 as string,\n\t\tagawntynsw as string,\n\t\tagaxmednote as string,\n\t\tagaxmedpeaid as decimal(38,18),\n\t\tagaxmedynsw as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> aga\nsource(output(\n\t\tsigaacynsw as string,\n\t\tsigaccoaccg as decimal(38,18),\n\t\tsigaccosref as string,\n\t\tsigaccosubref as string,\n\t\tsigaccoswitches as string,\n\t\tsigaccynsw as string,\n\t\tsigaclynsw as string,\n\t\tsigagaln2 as decimal(38,18),\n\t\tsigauwynsw as string,\n\t\tsigbprtpl as string,\n\t\tsigbusnbranch as decimal(38,18),\n\t\tsigbusncla as decimal(38,18),\n\t\tsigbusndiv as decimal(38,18),\n\t\tsigbusnregion as decimal(38,18),\n\t\tsigbusnsec as decimal(38,18),\n\t\tsigbusntyp as decimal(38,18),\n\t\tsigcfax as string,\n\t\tsigclaaccess as decimal(38,18),\n\t\tsigclaaie as string,\n\t\tsigclaclmaccess as decimal(38,18),\n\t\tsigclacovaccess as decimal(38,18),\n\t\tsigclaimfunc as string,\n\t\tsigclaselection as string,\n\t\tsigclmdefupdate as string,\n\t\tsigclmswitches as string,\n\t\tsigclmynsw as string,\n\t\tsigclosefunc as string,\n\t\tsigcmail as string,\n\t\tsigcomp2 as decimal(38,18),\n\t\tsigcondcoaie as string,\n\t\tsigcondcoclmaccess as decimal(38,18),\n\t\tsigcondcocovaccess as decimal(38,18),\n\t\tsigcondcoselection as string,\n\t\tsigconnbusnbranch as decimal(38,18),\n\t\tsigconoffice as decimal(38,18),\n\t\tsigcphone as string,\n\t\tsigcrdate as timestamp,\n\t\tsigcreatefunc as string,\n\t\tsigcreateswitches as string,\n\t\tsigcrsign as string,\n\t\tsigcurr as string,\n\t\tsigdebugidentify as string,\n\t\tsigdebugmacro as string,\n\t\tsigdefagtype as decimal(38,18),\n\t\tsigdefccode as decimal(38,18),\n\t\tsigdeflanguage as string,\n\t\tsigdefobrt as decimal(38,18),\n\t\tsigdivaccess as decimal(38,18),\n\t\tsigdivaie as string,\n\t\tsigdivclmaccess as decimal(38,18),\n\t\tsigdivcovaccess as decimal(38,18),\n\t\tsigdivselection as string,\n\t\tsigdocsecacc as decimal(38,18),\n\t\tsigdocsecclm as decimal(38,18),\n\t\tsigdocsecoth as decimal(38,18),\n\t\tsigdocsecuw as decimal(38,18),\n\t\tsigefiledomain as string,\n\t\tsigefilelibrary as string,\n\t\tsigefilepassword as string,\n\t\tsigefileplace as string,\n\t\tsigefileuserid as string,\n\t\tsigelremitfunc as string,\n\t\tsigemploymentid as string,\n\t\tsigfirstname as string,\n\t\tsigfltipacondco as decimal(38,18),\n\t\tsigfltipacrsign as string,\n\t\tsigfltipaintrst as string,\n\t\tsigfltipaitemno as string,\n\t\tsigfltipalegalclm as string,\n\t\tsigfltipapcod2 as string,\n\t\tsigfltipapcode as string,\n\t\tsigfltipashowcancl as string,\n\t\tsigfltipashowsold as string,\n\t\tsigfltipashowvalid as string,\n\t\tsigfltlcadelclms as string,\n\t\tsigfltlcafilter as decimal(38,18),\n\t\tsigfltlcaonlyclmins as string,\n\t\tsigformsecurity as decimal(38,18),\n\t\tsigfryear as decimal(38,18),\n\t\tsigfunc as string,\n\t\tsiggensec as decimal(38,18),\n\t\tsiggroupid as string,\n\t\tsighierarc as string,\n\t\tsiginqaie as string,\n\t\tsiginqselection as string,\n\t\tsigintaie as string,\n\t\tsigintclmaccess as decimal(38,18),\n\t\tsigintcovaccess as decimal(38,18),\n\t\tsigintselection as string,\n\t\tsigipaln2 as decimal(38,18),\n\t\tsigisaln2 as decimal(38,18),\n\t\tsigitemnoaie as string,\n\t\tsigitemnoclmaccess as decimal(38,18),\n\t\tsigitemnocovaccess as decimal(38,18),\n\t\tsigitemnoselection as string,\n\t\tsigiyear as decimal(38,18),\n\t\tsigiyearynsw as string,\n\t\tsiglang2 as string,\n\t\tsiglastlogin as decimal(38,18),\n\t\tsiglastname as string,\n\t\tsiglcaln2 as decimal(38,18),\n\t\tsigldescr as string,\n\t\tsigletterprlabel as string,\n\t\tsiglocaie as string,\n\t\tsiglocdeftab as decimal(38,18),\n\t\tsiglocselection as string,\n\t\tsiglocswitches as string,\n\t\tsigludate as timestamp,\n\t\tsiglusign as string,\n\t\tsigmaildisclaimer as string,\n\t\tsigmaildisclaimfrom as string,\n\t\tsigmailfromaddress as string,\n\t\tsigmailpassword as string,\n\t\tsigmailsentitems as string,\n\t\tsigmailuser as string,\n\t\tsigmainsign as string,\n\t\tsigmaisec as decimal(38,18),\n\t\tsigmdescr as string,\n\t\tsigmiscprlabel as string,\n\t\tsignameid as string,\n\t\tsignoteprlabel as string,\n\t\tsigobaln2 as decimal(38,18),\n\t\tsigoffice as decimal(38,18),\n\t\tsigofficeaccess as decimal(38,18),\n\t\tsigofficeaie as string,\n\t\tsigofficeclmaccess as decimal(38,18),\n\t\tsigofficecovaccess as decimal(38,18),\n\t\tsigofficeselection as string,\n\t\tsigonlinemaster as string,\n\t\tsigorgplace as string,\n\t\tsigpayswitches as string,\n\t\tsigpeaid as decimal(38,18),\n\t\tsigpeoplesecur as string,\n\t\tsigperssecur as string,\n\t\tsigplinterimynsw as string,\n\t\tsigpltransfunc as string,\n\t\tsigpolprlabel as string,\n\t\tsigposition as string,\n\t\tsigpositioncode as string,\n\t\tsigpremswitches as string,\n\t\tsigpwdate as timestamp,\n\t\tsigsecaccess as decimal(38,18),\n\t\tsigsecaie as string,\n\t\tsigsecclmaccess as decimal(38,18),\n\t\tsigseccovaccess as decimal(38,18),\n\t\tsigsecselection as string,\n\t\tsigsettpolynsw as string,\n\t\tsigsign as string,\n\t\tsigsitid as string,\n\t\tsigspecialversion as string,\n\t\tsigsqlseq as decimal(38,18),\n\t\tsigstopuse as string,\n\t\tsigtffautouser as string,\n\t\tsigtitle as string,\n\t\tsigtitlecode as string,\n\t\tsigtoyear as decimal(38,18),\n\t\tsiguwaynsw as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> sig\nsource(output(\n\t\tinaaccadrpeaid as decimal(38,18),\n\t\tinaag100e as string,\n\t\tinaagaid as string,\n\t\tinaareacd as string,\n\t\tinaassetno as decimal(38,18),\n\t\tinaassetsubno as decimal(38,18),\n\t\tinaborind as string,\n\t\tinabusnsubcla as decimal(38,18),\n\t\tinabusntyp as decimal(38,18),\n\t\tinacapoty as decimal(38,18),\n\t\tinacedent as decimal(38,18),\n\t\tinaclmadrpeaid as decimal(38,18),\n\t\tinaclmlead as decimal(38,18),\n\t\tinacondco as decimal(38,18),\n\t\tinacondset as string,\n\t\tinacooroccynsw as string,\n\t\tinacrdate as timestamp,\n\t\tinacrobbid as string,\n\t\tinacroynsw as string,\n\t\tinacrsign as string,\n\t\tinacshind as decimal(38,18),\n\t\tinacurr as string,\n\t\tinadescr6 as string,\n\t\tinadescr7 as string,\n\t\tinadwbsname as string,\n\t\tinaebusnsubcla as decimal(38,18),\n\t\tinaetcdone as string,\n\t\tinaetcdonedate as timestamp,\n\t\tinaetcpremium as string,\n\t\tinafileref as decimal(38,18),\n\t\tinafortcode as decimal(38,18),\n\t\tinagroup as decimal(38,18),\n\t\tinaimpexp as decimal(38,18),\n\t\tinainaid as string,\n\t\tinaindex as decimal(38,18),\n\t\tinainktp as string,\n\t\tinainno as decimal(38,18),\n\t\tinaintnote as string,\n\t\tinaintrst as string,\n\t\tinainttype as string,\n\t\tinaintyp as decimal(38,18),\n\t\tinaisaid as string,\n\t\tinaitaid as string,\n\t\tinaitemno as string,\n\t\tinaiyear as decimal(38,18),\n\t\tinaknvmark as string,\n\t\tinalocpolissued as string,\n\t\tinalosstxt35 as string,\n\t\tinalostcode as string,\n\t\tinalosttxt35 as string,\n\t\tinaludate as timestamp,\n\t\tinalusign as string,\n\t\tinamainin as string,\n\t\tinamutual as string,\n\t\tinanatsw as string,\n\t\tinanopers as decimal(38,18),\n\t\tinaob100e as string,\n\t\tinaobno as decimal(38,18),\n\t\tinaoperatingname as string,\n\t\tinaoperator as decimal(38,18),\n\t\tinaordercode as string,\n\t\tinaordertxt35 as string,\n\t\tinaoxno as decimal(38,18),\n\t\tinaoxrefid as string,\n\t\tinapayer as decimal(38,18),\n\t\tinapiffotype as decimal(38,18),\n\t\tinapintsh as decimal(38,18),\n\t\tinapirdctype as decimal(38,18),\n\t\tinapnote as string,\n\t\tinapofid as string,\n\t\tinaratema as string,\n\t\tinaratind as decimal(38,18),\n\t\tinareinnoof as decimal(38,18),\n\t\tinareinshare as decimal(38,18),\n\t\tinareinynsw as string,\n\t\tinarencod as decimal(38,18),\n\t\tinarenewswitches as string,\n\t\tinarenfieldsman as string,\n\t\tinarentxt as string,\n\t\tinaretyp as decimal(38,18),\n\t\tinariscod as decimal(38,18),\n\t\tinartlead as decimal(38,18),\n\t\tinaseasonmonthp as decimal(38,18),\n\t\tinaseasonnote as string,\n\t\tinaseasonynsw as string,\n\t\tinaslipref as string,\n\t\tinasmallcraft as string,\n\t\tinastat1 as string,\n\t\tinastopsettlement as string,\n\t\tinasufix1 as string,\n\t\tinataxcod as string,\n\t\tinataxexternal as string,\n\t\tinatocefo as string,\n\t\tinatotind as decimal(38,18),\n\t\tinatrdescr as string,\n\t\tinatzone as string,\n\t\tinausecod as string,\n\t\tinauwradrpeaid as decimal(38,18),\n\t\tinavoyagededynsw as string,\n\t\tinawarranty2 as decimal(38,18),\n\t\tinawarrenty as decimal(38,18),\n\t\tinawarrsw as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> ina\nsource(output(\n\t\tlabacarea as string,\n\t\tlabagtype as decimal(38,18),\n\t\tlabareacd as string,\n\t\tlabbigevent as string,\n\t\tlabclmdate as timestamp,\n\t\tlabclmsta as string,\n\t\tlabevno as decimal(38,18),\n\t\tlabknvmark as string,\n\t\tlablaaid as string,\n\t\tlablabid as string,\n\t\tlablodescr as string,\n\t\tlabmainev as string,\n\t\tlabomclmtype as string,\n\t\tlabportcccid as string,\n\t\tlabportunlid as string,\n\t\tlabtime as decimal(38,18),\n\t\tlabtzone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lab\nsource(output(\n\t\tldaage as decimal(38,18),\n\t\tldaclmcat as string,\n\t\tldacrdate as timestamp,\n\t\tldacrsign as string,\n\t\tldadays as decimal(38,18),\n\t\tldadedamt as decimal(38,18),\n\t\tldadedamtp as decimal(38,18),\n\t\tldadedcd3 as string,\n\t\tldadedcurr as string,\n\t\tldadedkey as string,\n\t\tldadedperc as decimal(38,18),\n\t\tldagrlamt as decimal(38,18),\n\t\tldalcaid as string,\n\t\tldaldaid as string,\n\t\tldaln2 as decimal(38,18),\n\t\tldatext as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> lda\nsource(output(\n\t\tqtbdispynsw as string,\n\t\tqtbfieldn as string,\n\t\tqtbmdescr as string,\n\t\tqtbsdescr as string,\n\t\tqtbvalue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> qtb\nsource(output(\n\t\tname as string,\n\t\tpeapeaid as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> staParisClmLead\nsource(output(\n\t\tunlairport as string,\n\t\tunlaltname as string,\n\t\tunlaltwodiacritics as string,\n\t\tunlbordercrossing as string,\n\t\tunlchangeindicator as string,\n\t\tunlcoordinates as string,\n\t\tunlcustom as string,\n\t\tunlcustomdim as string,\n\t\tunlfixedtransp as string,\n\t\tunliata as string,\n\t\tunliso2ch as string,\n\t\tunlloccode as string,\n\t\tunllocname as string,\n\t\tunllocwodiacritics as string,\n\t\tunlludate as timestamp,\n\t\tunllusign as string,\n\t\tunlmdescr as string,\n\t\tunlmulifunc as string,\n\t\tunlname as string,\n\t\tunlport as string,\n\t\tunlpostalexoff as string,\n\t\tunlrailterminal as string,\n\t\tunlremarks as string,\n\t\tunlroadterminal as string,\n\t\tunlstopuse as string,\n\t\tunlsubdiv as string,\n\t\tunlunlid as string,\n\t\tunlunlludate as timestamp,\n\t\tunlunlstatus as string,\n\t\tunlwodiacritics as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> unl\nsource(output(\n\t\tagreement_type as string,\n\t\tbusiness_area as string,\n\t\tcoverage_code as string,\n\t\tcoverage_desc as string,\n\t\tinserted_date as timestamp,\n\t\tmutual_fixed as string,\n\t\tpk_risk_group as double,\n\t\treinsurance_pgm_code as string,\n\t\treinsurance_pgm_desc as string,\n\t\trisk_group_code as string,\n\t\trisk_group_desc as string,\n\t\trisk_group_sort as double,\n\t\tsegment_code as string,\n\t\tsegment_desc as string,\n\t\tupdated_date as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> staRiskGroup\nsource(output(\n\t\taccounting_month_end_date as timestamp,\n\t\taccounting_month_id as double,\n\t\taccounting_month_key as decimal(38,18),\n\t\taccounting_month_of_quarter as double,\n\t\taccounting_month_of_year as double,\n\t\taccounting_month_start_date as timestamp,\n\t\taccounting_month_time_span as double,\n\t\taccounting_qtr_end_date as timestamp,\n\t\taccounting_qtr_of_year as double,\n\t\taccounting_qtr_start_date as timestamp,\n\t\taccounting_qtr_time_span as double,\n\t\taccounting_quarter_id as double,\n\t\taccounting_quarter_key as decimal(38,18),\n\t\taccounting_year_end_date as timestamp,\n\t\taccounting_year_id as double,\n\t\taccounting_year_key as decimal(38,18),\n\t\taccounting_year_number as double,\n\t\taccounting_year_start_date as timestamp,\n\t\taccounting_year_time_span as double,\n\t\tall_years as string,\n\t\tcalendar_date_id as double,\n\t\tcalendar_date_key as timestamp,\n\t\tday as timestamp,\n\t\tday_name as string,\n\t\tday_of_accounting_month as double,\n\t\tday_of_accounting_quarter as double,\n\t\tday_of_accounting_year as double,\n\t\tday_of_policy_month as double,\n\t\tday_of_policy_quarter as double,\n\t\tday_of_policy_year as double,\n\t\tday_of_underwriting_month as double,\n\t\tday_of_underwriting_quarter as double,\n\t\tday_of_underwriting_year as double,\n\t\tdimension_key as double,\n\t\tpolicy_month_end_date as timestamp,\n\t\tpolicy_month_id as double,\n\t\tpolicy_month_key as decimal(38,18),\n\t\tpolicy_month_name as string,\n\t\tpolicy_month_of_quarter as double,\n\t\tpolicy_month_of_year as double,\n\t\tpolicy_month_start_date as timestamp,\n\t\tpolicy_month_time_span as double,\n\t\tpolicy_qtr_end_date as timestamp,\n\t\tpolicy_qtr_of_year as double,\n\t\tpolicy_qtr_start_date as timestamp,\n\t\tpolicy_qtr_time_span as double,\n\t\tpolicy_quarter_id as double,\n\t\tpolicy_quarter_key as decimal(38,18),\n\t\tpolicy_year_end_date as timestamp,\n\t\tpolicy_year_id as double,\n\t\tpolicy_year_key as decimal(38,18),\n\t\tpolicy_year_number as double,\n\t\tpolicy_year_start_date as timestamp,\n\t\tpolicy_year_time_span as double,\n\t\ttop_id as double,\n\t\ttop_key as decimal(38,18),\n\t\tunderwriting_month_end_date as timestamp,\n\t\tunderwriting_month_id as double,\n\t\tunderwriting_month_key as decimal(38,18),\n\t\tunderwriting_month_of_quarter as double,\n\t\tunderwriting_month_of_year as double,\n\t\tunderwriting_month_start_date as timestamp,\n\t\tunderwriting_month_time_span as double,\n\t\tunderwriting_qtr_end_date as timestamp,\n\t\tunderwriting_qtr_of_year as double,\n\t\tunderwriting_qtr_start_date as timestamp,\n\t\tunderwriting_qtr_time_span as double,\n\t\tunderwriting_quarter_id as double,\n\t\tunderwriting_quarter_key as decimal(38,18),\n\t\tunderwriting_year_end_date as timestamp,\n\t\tunderwriting_year_id as double,\n\t\tunderwriting_year_key as decimal(38,18),\n\t\tunderwriting_year_number as double,\n\t\tunderwriting_year_start_date as timestamp,\n\t\tunderwriting_year_time_span as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> dimTime\nsource(output(\n\t\tbusiness_area as string,\n\t\tdate_inserted as timestamp,\n\t\tdate_updated as timestamp,\n\t\tinserted_by as string,\n\t\tmutual_fixed as string,\n\t\tpk_incident_rsv_group_me as double,\n\t\trob_risk_group_code as string,\n\t\trob_risk_group_desc as string,\n\t\trob_segment_code as string,\n\t\trob_segment_desc as string,\n\t\trsv_group_code as string,\n\t\trsv_group_desc as string,\n\t\tspecial_cases as string,\n\t\tupdated_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> staIncidentRsvGroupMe\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 124) ~> currency\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSD\nlcc select(mapColumn(\n\t\teach(match(in(['lcclcaid','lcclccid'],name)),\n\t\t\t$$+'_maxIncurred' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lccmaxincurred\ncurrency select(mapColumn(\n\t\teach(match(in(['target_code'],name)),\n\t\t\t$$+'_currency' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrency\nlcf filter(contains([2,4], #item == lcftrtmco)) ~> lcftrtmco\nselectLcf derive(lcfchngtime = toDate(left(lcfchngtime,8),'yyyyMMdd')) ~> lfcchngtime\nlcftrtmco select(mapColumn(\n\t\tlcfchngtime,\n\t\tlcflcaid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectLcf\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaicaid','lcaclmdate','lcaobno','lcaclodate','lcalabid','lcatrtmco','lcauwsign','lcaacstat','lcacrsign','lcawrkplccod','lcacrdate','lcaltdate','lcaadjsign','lcacefocc','lcaclmcac','lcacefocm','lcabirtno','lcaextclmid','lcalossco','lcatlotype','lcacategorytype','lcaobno','lcaldescr','lcaportunlid','lcamfkey','lcaprocess'],name)),\n\t\t\t$$+'_lcfInput' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaLcfInput\nlcaLcfInput filter(!isNull(lcaclodate_lcfInput)) ~> lcatableLcfInput\nlfcchngtime, lcatableLcfInput join(lcflcaid == lcalcaid_lcfInput,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcflca\nfal, xRefCurrency lookup(falcurr == target_code_currency,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> falCurr\nlccmaxincurred, faltable join(lcclccid_maxIncurred == fallccid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lccmaxincurredfal\nlccmaxincurredfal, fil join(falfilid == filfilid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falfil\nfalfil, exchrateUSD join(coalesce(falcurr,'USD') == FROM_CURRENCY_CODE\n\t&& filvaldate == EXCHANGE_FROM_DATE,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinExchrate\nfalCurr select(mapColumn(\n\t\tfalfilid,\n\t\tfalinout,\n\t\tfallccid,\n\t\tfaloutcode,\n\t\tfaloutstanding,\n\t\tfalsettled,\n\t\tfalcurr = target_code_currency\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> faltable\njoinExchrate derive(claim_incurred_usd = case((falinout=='I') || (falinout=='O' && faloutcode==2), coalesce(faloutstanding/EXCHANGE_RATE,0),toDecimal(0)) +\ncase((falinout=='I') || (falinout=='O' && faloutcode==2), coalesce(falsettled/EXCHANGE_RATE,0),toDecimal(0))) ~> claimIncurredUsd\nclaimIncurredUsd aggregate(groupBy(lcclcaid_maxIncurred,\n\t\tlcclccid_maxIncurred),\n\tsum_claim_incurred_usd = sum(claim_incurred_usd)) ~> sumClaimIncurredUsd\nsumClaimIncurredUsd aggregate(groupBy(lcclcaid_maxIncurred,\n\t\tsum_claim_incurred_usd),\n\tmin_lccid_maxIncurred = min(lcclccid_maxIncurred)) ~> minLccid\nminLccid aggregate(groupBy(lcclcaid_maxIncurred),\n\tmax_sum_claim_incurred_usd = max(sum_claim_incurred_usd)) ~> maxSumClaimIncurredUsd\nlcc select(mapColumn(\n\t\teach(match(in(['lcclcaid','lcclccid','lccvoyagefr','lccvoyageto','lccclmtype','lccuwsign'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lccColumns\nminLccid select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_tmp_lcc_claim' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tmpLccClaim\nmaxSumClaimIncurredUsd, tmpLccClaim join(lcclcaid_maxIncurred == lcclcaid_maxIncurred_tmp_lcc_claim\n\t&& max_sum_claim_incurred_usd == sum_claim_incurred_usd_tmp_lcc_claim,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> maxSumClaimTmpClaim\nmaxSumClaimTmpClaim, lccColumns join(lcclcaid_maxIncurred == lcclcaid\n\t&& min_lccid_maxIncurred_tmp_lcc_claim == lcclccid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> maxSumClaimLccTable\nlcflca filter(lcfchngtime <toDate(lcaclodate_lcfInput)) ~> filterDates\nmaxSumClaimLccTable select(mapColumn(\n\t\tlcclcaid,\n\t\tlcclccid,\n\t\tlccuwsign,\n\t\tlccvoyagefr,\n\t\tlccvoyageto\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcctable\nfilterDates aggregate(groupBy(lcflcaid),\n\tlcfchngtime = max(lcfchngtime)) ~> lcftable\nobb select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_clm' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbClaim\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaclmdate','lcaobno'],name)),\n\t\t\t$$+'_claim_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaClaimObject\nlca select(mapColumn(\n\t\teach(match(in(['lcalcaid','lcaclmdate','lcaicaid'],name)),\n\t\t\t$$+'_risk_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcaRiskObject\nica select(mapColumn(\n\t\teach(match(in(['icaicaid','icaobno'],name)),\n\t\t\t$$+'_risk_object' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> icaRiskObject\nlcaClaimObject, oba join(lcaobno_claim_object == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcaoba\nlcaoba, obbClaim join(obaobno == obbobno_clm,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter((coalesce(lcaclmdate_claim_object,currentTimestamp()) > coalesce(obbstdate_clm, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(lcaclmdate_claim_object,currentTimestamp()) < coalesce(obbendate_clm, addDays(currentTimestamp(), 36500)))) ~> claimObject\nlcaRiskObject, icaRiskObject join(lcaicaid_risk_object == icaicaid_risk_object,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcaica\nlcaica, oba join(icaobno_risk_object == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaoba\nicaoba, obbRisk join(obaobno == obbobno_risk,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obboba\nobboba filter((coalesce(lcaclmdate_risk_object,currentTimestamp()) > coalesce(obbstdate_risk, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(lcaclmdate_risk_object,currentTimestamp()) < coalesce(obbendate_risk, addDays(currentTimestamp(), 36500)))) ~> riskObject\nriskObject, claimObject union(byName: true)~> UnionRiskAndClaimObject\nUnionRiskAndClaimObject derive(obj_null = 1+null()) ~> objNull\nobjNull aggregate(groupBy(lcalcaid_risk_object),\n\tobbname_risk = max(obbname_risk),\n\t\tobbname_clm = max(obbname_clm),\n\t\tobaimono = max(obaimono)) ~> AggregateClmRiskObjects\nobb select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_risk' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbRisk\nAggregateClmRiskObjects derive(obbname = case(isNull(trim(obbname_risk)), trim(obbname_clm), trim(obbname_risk))) ~> obbname\nobbname select(mapColumn(\n\t\tlcalcaid_obbtable = lcalcaid_risk_object,\n\t\tobaimono,\n\t\tobbname\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> obbtable\nlcr filter(lower(lcrctrid) == 'source') ~> filterLcrctrid\nfilterLcrctrid select(mapColumn(\n\t\teach(match(in(['lcrlcaid','lcrrefnam'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> selectLcr\nselectLcr aggregate(groupBy(lcrlcaid),\n\tmax_lcrrefname = max(lcrrefnam)) ~> lcrtable\nlca select(mapColumn(\n\t\teach(match(in(['lcalabid','lcatrtmco','lcalcaid','lcaicaid','lcauwsign','lcaclmdate','lcacrsign','lcawrkplccod','lcacrdate','lcaclodate','lcaltdate','lcaadjsign','lcacefocc','lcaclmcac','lcacefocm','lcabirtno','lcaextclmid','lcalossco','lcatlotype','lcacategorytype','lcaobno','lcaldescr','lcaportunlid','lcamfkey','lcaprocess','lcaclmid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lcatable\naga select(mapColumn(\n\t\teach(match(in(['agaagaid','agabusndiv','agabusncla','agabusnsec'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> agatable\nsig select(mapColumn(\n\t\teach(match(in(['sigsign','sigoffice'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sigtable\nina select(mapColumn(\n\t\teach(match(in(['inainaid','inaclmlead','inaintrst','inamutual'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> inatable\nlab select(mapColumn(\n\t\teach(match(in(['lablabid','labclmdate','labmainev','lablodescr','labagtype','lablaaid','labareacd','labportunlid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> labtable\nlda select(mapColumn(\n\t\teach(match(in(['ldalcaid','ldadedcurr','ldadedamt','ldatext','ldadays','ldaldaid'],name)),\n\t\t\t$$+'_max' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMaxColumns\nlda select(mapColumn(\n\t\teach(match(in(['ldadedcurr','ldadedamt','ldatext','ldadays','ldaldaid','ldalcaid'],name)),\n\t\t\t$$+'_min' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMinColumns\nFilterldadedcd3 aggregate(groupBy(ldalcaid),\n\tmax_ldaldaid = max(ldaldaid),\n\t\tmin_ldaldaid = min(ldaldaid)) ~> Aggregateldaldaid\nlda filter(!in(['990','999'], ldadedcd3)) ~> Filterldadedcd3\nldaMaxColumns, Aggregateldaldaid join(ldaldaid_max == max_ldaldaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinMaxLdaldaid\nldaMinColumns, Aggregateldaldaid join(ldaldaid_min == min_ldaldaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinMinLdaldaid\njoinMaxLdaldaid select(mapColumn(\n\t\tldadays_max,\n\t\tldadedamt_max,\n\t\tldadedcurr_max,\n\t\tldalcaid_max,\n\t\tldaldaid_max,\n\t\tldatext_max\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMax\njoinMinLdaldaid select(mapColumn(\n\t\tldadays_min,\n\t\tldadedamt_min,\n\t\tldadedcurr_min,\n\t\tldalcaid_min,\n\t\tldaldaid_min,\n\t\tldatext_min\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ldaMin\nica, agatable join(icaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaaga\nicaaga, lcatable join(icaicaid == lcaicaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icalca\nicalca, labtable join(lcalabid == lablabid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> lcalab\nlcalab, inatable join(icainaid == inainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaina\nicaina, car join(labareacd == cariso3ch,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> labcar\nlabcar, laa join(lablaaid == laalaaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lablaa\nlablaa, ldaMax join(lcalcaid == ldalcaid_max,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaldaMax\nlcaldaMax, ldaMin join(lcalcaid == ldalcaid_min,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaldaMin\ncurrency select(mapColumn(\n\t\teach(match(in(['source_code_key'],name)),\n\t\t\t$$+'_currency_min' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrencyMinLdaCurr\ncurrency select(mapColumn(\n\t\teach(match(in(['source_code_key'],name)),\n\t\t\t$$+'_currency_max' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCurrencyMaxLdaCurr\nlcaldaMin, xRefCurrencyMinLdaCurr lookup(ldadedcurr_min == source_code_key_currency_min,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> minLdaMinLdaCurr\nminLdaMinLdaCurr, xRefCurrencyMaxLdaCurr lookup(ldadedcurr_max == source_code_key_currency_max,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> maxLdaMaxLdaCurr\nmaxLdaMaxLdaCurr, sigtable join(upper(trim(lcacrsign)) == upper(trim(sigsign)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcasig\nlcasig, lcrtable join(lcalcaid == lcrlcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcr\nlcalcr, obbtable join(lcalcaid == lcalcaid_obbtable,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcaobb\nlcaobb, lcftable join(lcalcaid == lcflcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcf\nlcalcf, lcctable join(lcalcaid == lcclcaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> lcalcc\nlcalcc select(mapColumn(\n\t\teach(match(in(['lablabid','labclmdate','labmainev','lablodescr','lcatrtmco','labagtype','inaclmlead','lcalcaid','lcauwsign','lcaclmdate','lcacrsign','agabusndiv','lcawrkplccod','lcacrdate','lcaclodate','lcaltdate','lcaadjsign','ldadedcurr_min','ldaldaid_min','ldadedamt_min','ldatext_min','ldadays_min','ldadedcurr_max','ldadedamt_max','ldatext_max','ldadays_max','ldaldaid_max','laasupevnt','lcacefocc','lcaclmcac','lcacefocm','inaintrst','agabusncla','lcaclmid','lcaextclmid','max_lcrrefname','carmdescr','lcalossco','lcatlotype','lcacategorytype','obaimono','obbname','lcaldescr','lcfchngtime','agabusnsec','source_code_key_currency_min','source_code_key_currency_max','lccvoyagefr','lccvoyageto','lcaportunlid','inamutual','labportunlid','lccuwsign','lcamfkey','lcaprocess'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectParisColumns\nSelectParisColumns derive(lcatlotype = 0,\n\t\tlcacategorytype = coalesce(lcacategorytype,'Z'),\n\t\tlcawrkplccod = toString(lcawrkplccod),\n\t\tagabusndiv = case(left(toString(agabusndiv),1)=='4',toString(agabusndiv)+'-'+inamutual,toString(agabusndiv)),\n\t\tagabusnsec = toString(agabusnsec),\n\t\tclm_team_sign = case(agabusndiv==4, lccuwsign, lcauwsign)) ~> DerivedColumns\ntCrossReference filter(code_type_id ==801 &&\r\nsource_system == 'PARIS') ~> claimcategory801\nclaimcategory801 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description'],name)),\n\t\t\t$$+'_claimCategory' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClaimCategory\ntCrossReference filter(code_type_id ==800 &&\r\nsource_system == 'PARIS') ~> tlotype800\ntlotype800 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description'],name)),\n\t\t\t$$+'_tloType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefTloType\ntCrossReference filter(code_type_id == 466 &&\r\nsource_system == 'PARIS') ~> complexity466\ncomplexity466 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_description','target_code'],name)),\n\t\t\t$$+'_complexity' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefComplexity\ntCrossReference filter(code_type_id == 329 &&\r\nsource_system == 'PARIS') ~> employee329\nemployee329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_clmHandler' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClmHandler\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 772) ~> mainevent772\nmainevent772 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainEvent' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainevent\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 774) ~> mainClaimType774\nmainClaimType774 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainClmType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainClmType\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 773) ~> eventdetail773\neventdetail773 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_eventDetail' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefEventDetail\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 329) ~> claimAdjuster329\nclaimAdjuster329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_claimAdjuster' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClaimAdjuster\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 106) ~> businessArea106\nbusinessArea106 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_businessArea' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefBusinessArea\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 122) ~> coverage122\ncoverage122 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_coverage' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefCoverage\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 113) ~> agreementType113\nagreementType113 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code'],name)),\n\t\t\t$$+'_agreementType' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefAgreementType\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 816) ~> clmProcess816\nclmProcess816 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_clmProcess' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefClmProcess\nqtb filter(qtbfieldn == 'lcatrtmco') ~> FilterQtbfieldn\nFilterQtbfieldn select(mapColumn(\n\t\teach(match(in(['qtbvalue','qtbmdescr'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> qtbtable\nDerivedColumns, qtbtable lookup(toString(lcatrtmco) == qtbvalue,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIncStatus\nLookupIncStatus, xRefClaimCategory lookup(lcacategorytype == source_code_key_claimCategory,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClaimCategory\nLookupClaimCategory, xRefTloType lookup(toString(lcatlotype) == source_code_key_tloType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTloType\nLookupTloType, xRefComplexity lookup(lcawrkplccod == source_code_key_complexity,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupComplexity\nLookupComplexity, xRefClmHandler lookup(lcauwsign == source_code_key_clmHandler,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmHndlr\nLookupClmHndlr, xRefMainevent lookup(laasupevnt == source_code_key_mainEvent,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainEvent\nLookupMainEvent, xRefMainClmType lookup(lcacefocc == source_code_key_mainClmType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainClmType\nLookupMainClmType, xRefMainClmDetail lookup(lcacefocm == source_code_key_mainClmDetail,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupMainClmDetail\ntCrossReference filter(source_system == 'PARIS' &&\r\ncode_type_id == 775) ~> mainClmDetail775\nmainClmDetail775 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_mainClmDetail' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefMainClmDetail\nLookupMainClmDetail, xRefEventDetail lookup(labmainev == source_code_key_eventDetail,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupEventDetail\nLookupEventDetail, xRefClaimAdjuster lookup(lcaadjsign == source_code_key_claimAdjuster,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmAdjuster\nLookupClmAdjuster, xRefBusinessArea lookup(agabusndiv == source_code_key_businessArea,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupBusinessArea\nLookupBusinessArea, xRefCoverage lookup(inaintrst == source_code_key_coverage,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCoverage\nLookupCoverage, xRefAgreementType lookup(agabusnsec == source_code_key_agreementType,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupAgreementType\nLookupAgreementType, xRefImmediateCause lookup(lcaclmcac == source_code_key_immediateCause,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupImmediateCause\ntCrossReference filter(source_system == 'PARIS' && code_type_id == 161) ~> immediateCause161\nimmediateCause161 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_immediateCause' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefImmediateCause\nLookupImmediateCause, xRefClmProcess lookup(lcaprocess == source_code_key_clmProcess,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClmProcess\nLookupClmProcess, staParisClmLead lookup(inaclmlead == peapeaid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupStaParisClmLead\nLookupStaParisClmLead derive(tem_key = 'N/A',\n\t\ttem_description = 'Not Applicable') ~> DerivedTempKeyTemDescription\nDerivedTempKeyTemDescription derive(inc_team_description = case(agabusndiv=='2', 'Offshore ENergy Claims (Oslo)', \r\ncase(in(['1','3'],agabusndiv) && tem_key=='25', 'Marine Claims (Oslo)', tem_description)),\n\t\tclmlead = case(isNull(peapeaid),'N','Y'),\n\t\tpk_key_inc = 'P'+lcalcaid,\n\t\tinc_ind_open = case(in([1,3],coalesce(toInteger(lcatrtmco),9)), 'Y', 'N'),\n\t\tinc_vessel_name = case(labagtype==2 && obbname == 'UNKNOWN' , 'ENERGY OBJECT' , upper(obbname)),\n\t\tgrp_key = 'P' + lablabid,\n\t\tclm_date = lcaclmdate,\n\t\tarchive_date = case(lcatrtmco == 9 && isNull(lcaclodate), toDate('01.01.1800', 'dd.MM.yyyy') , toDate(lcaclodate)),\n\t\tlcaclmcac = toInteger(lcaclmcac),\n\t\tdeleted_ind = case(lcatrtmco == 9, 'Y', 'N'),\n\t\tinc_year_of_incident_calyear = toInteger(left(lablabid, 4)),\n\t\tbusiness_area = case(in(['PF','PM'],target_code_businessArea), 'PI', target_code_businessArea),\n\t\tagreement_type = target_code_agreementType,\n\t\tcoverage_code = target_code_coverage,\n\t\tmutual_fixed = case(inamutual == 'Y', 'Mutual', 'Fixed'),\n\t\tlast_renewed_date = null()+1,\n\t\tincident_id = null()+1,\n\t\tinc_file_number = '0') ~> DerivedColumns2\nDerivedColumns2 aggregate(groupBy(pk_key_inc,\n\t\tlablodescr,\n\t\tinc_ind_open,\n\t\tarchive_date,\n\t\tlast_renewed_date,\n\t\ttarget_code_clmHandler,\n\t\ttarget_description_clmHandler,\n\t\tinc_team_description,\n\t\tobbname,\n\t\tobaimono,\n\t\tinc_file_number,\n\t\tincident_id,\n\t\ttarget_code_clmProcess,\n\t\ttarget_description_clmProcess,\n\t\tgrp_key,\n\t\tlcalcaid,\n\t\ttarget_code_complexity,\n\t\ttarget_description_complexity,\n\t\tlcacrdate,\n\t\tlcaclodate,\n\t\tlcaltdate,\n\t\ttarget_code_claimAdjuster,\n\t\ttarget_description_claimAdjuster,\n\t\tldaldaid_min,\n\t\tldadedcurr_min,\n\t\tldadedamt_min,\n\t\tldatext_min,\n\t\tldadays_min,\n\t\tldaldaid_max,\n\t\tldadedcurr_max,\n\t\tldadedamt_max,\n\t\tldatext_max,\n\t\tldadays_max,\n\t\ttarget_code_mainEvent,\n\t\ttarget_description_mainEvent,\n\t\ttarget_code_eventDetail,\n\t\ttarget_description_eventDetail,\n\t\ttarget_code_mainClmType,\n\t\ttarget_description_mainClmType,\n\t\ttarget_code_mainClmDetail,\n\t\ttarget_description_mainClmDetail,\n\t\tbusiness_area,\n\t\tagreement_type,\n\t\tcoverage_code,\n\t\tmutual_fixed,\n\t\ttarget_code_immediateCause,\n\t\ttarget_description_immediateCause,\n\t\tlcaclmid,\n\t\tlcacrsign,\n\t\tdeleted_ind,\n\t\tlcaextclmid,\n\t\tqtbmdescr,\n\t\tmax_lcrrefname,\n\t\tcarmdescr,\n\t\tlcalossco,\n\t\ttarget_description_tloType,\n\t\ttarget_description_claimCategory,\n\t\tinc_year_of_incident_calyear,\n\t\tlcaldescr,\n\t\tlcfchngtime,\n\t\tsource_code_key_currency_min,\n\t\tsource_code_key_currency_max,\n\t\tlccvoyagefr,\n\t\tlccvoyageto,\n\t\tlcaportunlid,\n\t\tlabportunlid,\n\t\tlcamfkey),\n\tlabclmdate = max(labclmdate)) ~> Deduplicate\nunl select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_plc_of_incident' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlPlcOfIncident\nDeduplicate, unlVoyageTo lookup(lccvoyageto == unlname_voyageTo,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlVoyTo\nLookupUnlVoyTo, unlVoyageFrom lookup(lccvoyagefr == unlunlid_voyageFrom,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlVoyFrom\nunl select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_voyageTo' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlVoyageTo\nunl select(mapColumn(\n\t\teach(match(in(['unlunlid','unlname'],name)),\n\t\t\t$$+'_voyageFrom' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> unlVoyageFrom\nLookupUnlVoyFrom, unlPlcOfIncident lookup(labportunlid == unlunlid_plc_of_incident,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupUnlPlcOfIncident\nLookupUnlPlcOfIncident derive(unlname_voyageTo = left(unlname_voyageTo, 50),\n\t\tunlname_voyageFrom = left(unlname_voyageFrom, 50),\n\t\tunlname_plc_of_incident = left(unlname_plc_of_incident, 50)) ~> ChangeUnlColumns\nstaRiskGroup select(mapColumn(\n\t\teach(match(in(['mutual_fixed','coverage_code','agreement_type','business_area','risk_group_code','segment_code'],name)),\n\t\t\t$$+'_riskGroup' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> riskGroup\nChangeUnlColumns, riskGroup lookup(business_area == business_area_riskGroup\n\t&& coverage_code == coverage_code_riskGroup\n\t&& agreement_type == agreement_type_riskGroup\n\t&& mutual_fixed == mutual_fixed_riskGroup,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRiskGroup\nLookupRiskGroup, exchrateUSDmax lookup(labclmdate == EXCHANGE_FROM_DATE_maxExchRate\n\t&& source_code_key_currency_max == FROM_CURRENCY_CODE_maxExchRate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExchrateMax\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_minExchRate' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSDmin\nhlpExchangeRateToUsd select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_maxExchRate' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateUSDmax\nLookupExchrateMax, exchrateUSDmin lookup(source_code_key_currency_min == FROM_CURRENCY_CODE_minExchRate\n\t&& labclmdate == EXCHANGE_FROM_DATE_minExchRate,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExchrateMin\nLookupExchrateMin derive(ldadedcurr_max = case(ldaldaid_min != ldaldaid_max,ldadedcurr_max, null()+'.'),\n\t\tldatext_max = case(ldaldaid_min != ldaldaid_max, ldatext_max, null()+'.'),\n\t\tldadedamt_max = case(ldaldaid_min != ldaldaid_max, ldadedamt_max, toDecimal(null()+1)),\n\t\tldadays_max = case(ldaldaid_min != ldaldaid_max, ldadays_max, toDecimal(null()+1)),\n\t\tmin_amount_usd = ldadedamt_min/EXCHANGE_RATE_minExchRate,\n\t\tinc_complexity_desc = left(target_description_complexity, 25),\n\t\tinc_geotag_reference = left(lcalcaid, 4)+replace(left(lcalcaid,6),' ', '')) ~> DeriveColumns\nDeriveColumns derive(inc_ded_amount_usd = ldadedamt_max/EXCHANGE_RATE_maxExchRate) ~> incDedAmountUsd\nemployee329 select(mapColumn(\n\t\teach(match(in(['source_code_key','target_code','target_description'],name)),\n\t\t\t$$+'_registeredBy' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xRefRegisteredBy\nincDedAmountUsd, xRefRegisteredBy lookup(lcacrsign == source_code_key_registeredBy,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegisteredBy\ndimTime select(mapColumn(\n\t\teach(match(in(['day','accounting_month_key','underwriting_year_number'],name)),\n\t\t\t$$+'_yearOfInc' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimTimeYeardOfInc\ndimTime select(mapColumn(\n\t\teach(match(in(['day','accounting_month_key','accounting_year_number'],name)),\n\t\t\t$$+'_YearMonthOfReg' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimTimeYearMonthOfReg\nLookupRegisteredBy, dimTimeYeardOfInc lookup(labclmdate == day_yearOfInc,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYearOfInc\nLookupYearOfInc, dimTimeYearMonthOfReg lookup(lcacrdate == day_YearMonthOfReg,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupYearMonthOfReg\nLookupYearMonthOfReg aggregate(groupBy(risk_group_code_riskGroup,\n\t\taccounting_month_key_yearOfInc,\n\t\taccounting_month_key_YearMonthOfReg,\n\t\tinc_complexity_desc,\n\t\tinc_ded_amount_usd,\n\t\tldadedamt_max,\n\t\tldadedcurr_max,\n\t\tldatext_max,\n\t\tldadays_max,\n\t\tmin_amount_usd,\n\t\tlcacrdate,\n\t\tlcaltdate,\n\t\tunderwriting_year_number_yearOfInc,\n\t\taccounting_year_number_YearMonthOfReg,\n\t\tarchive_date,\n\t\tlabclmdate,\n\t\tlablodescr,\n\t\tinc_ind_open,\n\t\tlast_renewed_date,\n\t\ttarget_code_clmHandler,\n\t\ttarget_description_clmHandler,\n\t\tinc_team_description,\n\t\tobbname,\n\t\tobaimono,\n\t\tinc_file_number,\n\t\tincident_id,\n\t\ttarget_code_clmProcess,\n\t\ttarget_description_clmProcess,\n\t\tgrp_key,\n\t\tlcalcaid,\n\t\ttarget_code_complexity,\n\t\ttarget_description_complexity,\n\t\tlcaclodate,\n\t\ttarget_code_claimAdjuster,\n\t\ttarget_description_claimAdjuster,\n\t\tldadedcurr_min,\n\t\tldadedamt_min,\n\t\tldatext_min,\n\t\tldadays_min,\n\t\ttarget_code_mainEvent,\n\t\ttarget_description_mainEvent,\n\t\ttarget_code_eventDetail,\n\t\ttarget_description_eventDetail,\n\t\ttarget_code_mainClmType,\n\t\ttarget_description_mainClmType,\n\t\ttarget_code_mainClmDetail,\n\t\ttarget_description_mainClmDetail,\n\t\tbusiness_area,\n\t\tagreement_type,\n\t\tcoverage_code,\n\t\tmutual_fixed,\n\t\ttarget_code_immediateCause,\n\t\ttarget_description_immediateCause,\n\t\tsegment_code_riskGroup,\n\t\ttarget_code_registeredBy,\n\t\ttarget_description_registeredBy,\n\t\tlcaextclmid,\n\t\tdeleted_ind,\n\t\tqtbmdescr,\n\t\tmax_lcrrefname,\n\t\tcarmdescr,\n\t\tlcalossco,\n\t\ttarget_description_tloType,\n\t\ttarget_description_claimCategory,\n\t\tinc_geotag_reference,\n\t\tinc_year_of_incident_calyear,\n\t\tlcaldescr,\n\t\tlcfchngtime,\n\t\tunlname_voyageFrom,\n\t\tunlname_voyageTo,\n\t\tunlname_plc_of_incident,\n\t\tlcamfkey),\n\tpk_key_inc = first(pk_key_inc)) ~> Deduplicator2\nDeduplicator2 derive(segment_code_riskGroup = case(isNull(segment_code_riskGroup), 'N/A', segment_code_riskGroup),\n\t\trisk_group_code_riskGroup = case(isNull(risk_group_code_riskGroup), 'N/A', risk_group_code_riskGroup),\n\t\tint_text_restricted = case(in(['CREW','PASS','PERS'], target_code_mainClmType),  'Restricted due to privacy regulations' , lablodescr),\n\t\tinc_my_guard_claim_id = case(lcaextclmid == '0', null()+'.', lcaextclmid),\n\t\tinc_om_claim_rule_code = 'N/A',\n\t\tinc_om_claim_rule_desc = 'Not Applicable',\n\t\tinc_paris_pool_ind = 'N',\n\t\tlast_updated_by = 'm_pre_dim_incident_pa',\n\t\tinc_longitude = 0,\n\t\tinc_latitude = 0) ~> DerivedColumn1\nMutualFixedAndSpecialCases select(mapColumn(\n\t\teach(match(in(['rsv_group_code','rsv_group_desc','business_area','rob_segment_code','rob_risk_group_code'],name)),\n\t\t\t$$+'_incRsvGroupMe' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> incRsvGroupMe\nstaIncidentRsvGroupMe filter(mutual_fixed == 'Fixed' &&\r\nspecial_cases == 'N/A') ~> MutualFixedAndSpecialCases\nDerivedColumn1, incRsvGroupMe lookup(risk_group_code_riskGroup == rob_risk_group_code_incRsvGroupMe\n\t&& business_area == business_area_incRsvGroupMe\n\t&& segment_code_riskGroup == rob_segment_code_incRsvGroupMe,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupIncRsvGroupMe\nLookupIncRsvGroupMe sink(partitionFileNames:['pre_dim_incident_pa.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> preDimIncidentPa"
		}
	}
}