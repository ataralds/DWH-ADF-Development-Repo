{
	"name": "m_pre_dim_object",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "lloydsvesselhistory"
				},
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "lloydscompany"
				},
				{
					"dataset": {
						"referenceName": "Other",
						"type": "DatasetReference"
					},
					"name": "tcrossreference"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "companyMgr"
				},
				{
					"name": "benificialOwner"
				},
				{
					"name": "commercialOperator"
				},
				{
					"name": "regOwner"
				},
				{
					"name": "technicalMgr"
				},
				{
					"name": "companyGBowner"
				},
				{
					"name": "companyOperator"
				},
				{
					"name": "companyRegOwner"
				},
				{
					"name": "companyGBOwnerCnty"
				},
				{
					"name": "companyMgrCnty"
				},
				{
					"name": "companyOperatorCnty"
				},
				{
					"name": "tmptabell"
				},
				{
					"name": "derivedColumns"
				},
				{
					"name": "marketArea"
				},
				{
					"name": "country"
				},
				{
					"name": "objectTypeDesc"
				},
				{
					"name": "falgDesc"
				},
				{
					"name": "expression"
				}
			],
			"script": "source(output(\n\t\tVESSELID as decimal(38,18),\n\t\tBUILTPLACEID as decimal(38,18),\n\t\tYARDNUMBER as string,\n\t\tVESSELBUILDERID as decimal(38,18),\n\t\tORDERDATE as timestamp,\n\t\tORDERQUAL as string,\n\t\tORDERVALUE as decimal(38,18),\n\t\tORDERCANCELLED as timestamp,\n\t\tORDERCANCELLEDQUAL as string,\n\t\tSCHEDULEDCONEND as timestamp,\n\t\tSCHEDULEDCONENDQUAL as string,\n\t\tORIGINALSCHEDCONSEND as timestamp,\n\t\tORIGINALSCHEDCONSENDQUAL as string,\n\t\tCONSSTART as timestamp,\n\t\tCONSSTARTQUAL as string,\n\t\tLAUNCHDATE as timestamp,\n\t\tLAUNCHQUAL as string,\n\t\tCONSEND as timestamp,\n\t\tCONSENDQUAL as string,\n\t\tDEADDATE as timestamp,\n\t\tDEADQUAL as string,\n\t\tLOSSDATE as timestamp,\n\t\tLOSSQUAL as string,\n\t\tBROKENENDDATE as timestamp,\n\t\tBROKENENDQUAL as string,\n\t\tBREAKERCOMPANYID as decimal(38,18),\n\t\tBROKENPLACEID as decimal(38,18),\n\t\tLTTONNES as decimal(38,18),\n\t\tRECORDLASTUPDATED as timestamp,\n\t\tCREATED as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Other/lloyds_vessel_history.parquet']) ~> lloydsvesselhistory\nsource(output(\n\t\tFROM_CURRENCY_ID as double,\n\t\tTO_CURRENCY_ID as double,\n\t\tEXCHANGE_FROM_DATE as timestamp,\n\t\tEXCHANGE_RATE as decimal(38,18),\n\t\tEXCHANGE_TO_DATE as timestamp,\n\t\tFROM_CURRENCY_CODE as string,\n\t\tTO_CURRENCY_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Other/lloyds_company.parquet']) ~> lloydscompany\nsource(output(\n\t\tFROM_CURRENCY_ID as double,\n\t\tTO_CURRENCY_ID as double,\n\t\tEXCHANGE_FROM_DATE as timestamp,\n\t\tEXCHANGE_RATE as decimal(38,18),\n\t\tEXCHANGE_TO_DATE as timestamp,\n\t\tFROM_CURRENCY_CODE as string,\n\t\tTO_CURRENCY_CODE as string,\n\t\tSNAPSHOT_DATE as timestamp,\n\t\tCOMPANY_ID as decimal(38,18),\n\t\tCOMPANY_NAME as string,\n\t\tCOMPANY_FIRST_YEAR as decimal(38,18),\n\t\tCOMPANY_FIRST_YEAR_QUALIFIER as string,\n\t\tCOMPANY_STATUS as string,\n\t\tOFFICE_STATUS as string,\n\t\tADDRESS_LINE_1 as string,\n\t\tADDRESS_LINE_2 as string,\n\t\tADDRESS_LINE_3 as string,\n\t\tADDRESS_LINE_4 as string,\n\t\tTOWN_CITY as string,\n\t\tCOUNTY_STATE as string,\n\t\tPOST_CODE_1 as string,\n\t\tPOST_CODE_2 as string,\n\t\tCOUNTRY as string,\n\t\tTELEPHONE as string,\n\t\tFAX as string,\n\t\tEMAIL as string,\n\t\tWEBSITE as string,\n\t\tISO3 as string,\n\t\tRECORD_LAST_UPDATED as timestamp,\n\t\tAUDIT_CREATED as timestamp,\n\t\tAUDIT_UPDATED as timestamp,\n\t\tVESSELID as decimal(38,18),\n\t\tBUILTPLACEID as decimal(38,18),\n\t\tYARDNUMBER as string,\n\t\tVESSELBUILDERID as decimal(38,18),\n\t\tORDERDATE as timestamp,\n\t\tORDERQUAL as string,\n\t\tORDERVALUE as decimal(38,18),\n\t\tORDERCANCELLED as timestamp,\n\t\tORDERCANCELLEDQUAL as string,\n\t\tSCHEDULEDCONEND as timestamp,\n\t\tSCHEDULEDCONENDQUAL as string,\n\t\tORIGINALSCHEDCONSEND as timestamp,\n\t\tORIGINALSCHEDCONSENDQUAL as string,\n\t\tCONSSTART as timestamp,\n\t\tCONSSTARTQUAL as string,\n\t\tLAUNCHDATE as timestamp,\n\t\tLAUNCHQUAL as string,\n\t\tCONSEND as timestamp,\n\t\tCONSENDQUAL as string,\n\t\tDEADDATE as timestamp,\n\t\tDEADQUAL as string,\n\t\tLOSSDATE as timestamp,\n\t\tLOSSQUAL as string,\n\t\tBROKENENDDATE as timestamp,\n\t\tBROKENENDQUAL as string,\n\t\tBREAKERCOMPANYID as decimal(38,18),\n\t\tBROKENPLACEID as decimal(38,18),\n\t\tLTTONNES as decimal(38,18),\n\t\tRECORDLASTUPDATED as timestamp,\n\t\tCREATED as timestamp,\n\t\tSOURCE_CODE_KEY as string,\n\t\tSOURCE_SYSTEM as string,\n\t\tTARGET_CODE as string,\n\t\tTARGET_DESCRIPTION as string,\n\t\tCODE_TYPE as string,\n\t\tCODE_TYPE_ID as double,\n\t\tCODE2 as string,\n\t\tOM_X_REF as string,\n\t\tID as string,\n\t\tPRG_PRODUCT_GROUP_ID as string,\n\t\tPRG_PRODUCT_GROUP_NAME as string,\n\t\tPRG_PRODUCT_GROUP_SHORT_NAME as string,\n\t\tPRO_PRODUCT_ID as string,\n\t\tPRO_PRODUCT_NAME as string,\n\t\tPRO_PRODUCT_SHORT_NAME as string,\n\t\tPRO_SOURCE_INDICATOR as string,\n\t\tPRO_PRODUCT_TYPE as string,\n\t\tsource_code_key as string,\n\t\tsource_system as string,\n\t\ttarget_code as string,\n\t\ttarget_description as string,\n\t\tcode_type_id as double,\n\t\tcode2 as string,\n\t\tom_x_ref as string,\n\t\tcode_type as string,\n\t\tPARENT_CODE_TYPE_ID as double,\n\t\tPARENT_TARGET_CODE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\twildcardPaths:['Other']) ~> tcrossreference\nlloydsvesselhistory, technicalMgr lookup(ERROR_FUNCTION('') == company_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> companyMgr\nlloydscompany select(mapColumn(\n\t\taddress_line_1,\n\t\taddress_line_2,\n\t\taddress_line_3,\n\t\taddress_line_4,\n\t\taudit_created,\n\t\taudit_updated,\n\t\tcompany_first_year,\n\t\tcompany_first_year_qualifier,\n\t\tcompany_id,\n\t\tcompany_name,\n\t\tcompany_status,\n\t\tcountry,\n\t\tcounty_state,\n\t\temail,\n\t\tfax,\n\t\tiso3,\n\t\toffice_status,\n\t\tpost_code_1,\n\t\tpost_code_2,\n\t\trecord_last_updated,\n\t\tsnapshot_date,\n\t\ttelephone,\n\t\ttown_city,\n\t\twebsite\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> benificialOwner\nlloydscompany select(mapColumn(\n\t\taddress_line_1,\n\t\taddress_line_2,\n\t\taddress_line_3,\n\t\taddress_line_4,\n\t\taudit_created,\n\t\taudit_updated,\n\t\tcompany_first_year,\n\t\tcompany_first_year_qualifier,\n\t\tcompany_id,\n\t\tcompany_name,\n\t\tcompany_status,\n\t\tcountry,\n\t\tcounty_state,\n\t\temail,\n\t\tfax,\n\t\tiso3,\n\t\toffice_status,\n\t\tpost_code_1,\n\t\tpost_code_2,\n\t\trecord_last_updated,\n\t\tsnapshot_date,\n\t\ttelephone,\n\t\ttown_city,\n\t\twebsite\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> commercialOperator\nlloydscompany select(mapColumn(\n\t\taddress_line_1,\n\t\taddress_line_2,\n\t\taddress_line_3,\n\t\taddress_line_4,\n\t\taudit_created,\n\t\taudit_updated,\n\t\tcompany_first_year,\n\t\tcompany_first_year_qualifier,\n\t\tcompany_id,\n\t\tcompany_name,\n\t\tcompany_status,\n\t\tcountry,\n\t\tcounty_state,\n\t\temail,\n\t\tfax,\n\t\tiso3,\n\t\toffice_status,\n\t\tpost_code_1,\n\t\tpost_code_2,\n\t\trecord_last_updated,\n\t\tsnapshot_date,\n\t\ttelephone,\n\t\ttown_city,\n\t\twebsite\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> regOwner\nlloydscompany select(mapColumn(\n\t\taddress_line_1,\n\t\taddress_line_2,\n\t\taddress_line_3,\n\t\taddress_line_4,\n\t\taudit_created,\n\t\taudit_updated,\n\t\tcompany_first_year,\n\t\tcompany_first_year_qualifier,\n\t\tcompany_id,\n\t\tcompany_name,\n\t\tcompany_status,\n\t\tcountry,\n\t\tcounty_state,\n\t\temail,\n\t\tfax,\n\t\tiso3,\n\t\toffice_status,\n\t\tpost_code_1,\n\t\tpost_code_2,\n\t\trecord_last_updated,\n\t\tsnapshot_date,\n\t\ttelephone,\n\t\ttown_city,\n\t\twebsite\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> technicalMgr\ncompanyMgr, benificialOwner lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> companyGBowner\ncompanyGBowner, commercialOperator lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> companyOperator\ncompanyOperator, regOwner lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> companyRegOwner\ncompanyRegOwner, benificialOwner lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> companyGBOwnerCnty\ncompanyGBOwnerCnty, technicalMgr lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> companyMgrCnty\ncompanyMgrCnty, commercialOperator lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> companyOperatorCnty\ncompanyOperatorCnty select(mapColumn(\n\t\teach(match(true()),\n\t\t\t'obj_'+$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tmptabell\ntmptabell derive(code_type_id_market = 806,\n\t\tcode_type_id_object_type = 45,\n\t\tsource_system = 'LLOYDS',\n\t\tcode_type_id_country = 50,\n\t\tcode_type_id_flac = 100) ~> derivedColumns\nderivedColumns, tcrossreference lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> marketArea\nmarketArea, tcrossreference lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> country\ncountry, tcrossreference lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> objectTypeDesc\nobjectTypeDesc, tcrossreference lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> falgDesc\nfalgDesc derive(tobereplaced_obj_object_type = case(isNull(target_description_object_type), obj_object_type, target_description_object_type),\n\t\ttobefound_obj_falg_iso3 = case(isNull(target_description_flag), obj_flag_iso3, target_description_flag)) ~> expression"
		}
	}
}