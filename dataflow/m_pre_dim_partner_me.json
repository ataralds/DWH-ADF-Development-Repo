{
	"name": "m_pre_dim_partner_me",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "paatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "peatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "pebtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "peztable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "qtbtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "crctable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tcrossreference"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "pectable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "cbsttable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "cbstable2"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "SfCompany"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "sfcompanytop"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ExternalLeiCode"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "RespPI"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "RespME"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_partner",
						"type": "DatasetReference"
					},
					"name": "PreDimPartner"
				}
			],
			"transformations": [
				{
					"name": "maxpeb"
				},
				{
					"name": "pebmaxpeb"
				},
				{
					"name": "pebqtb"
				},
				{
					"name": "Prtstatus"
				},
				{
					"name": "prtpea"
				},
				{
					"name": "peacrc"
				},
				{
					"name": "paatable1"
				},
				{
					"name": "Paafiltered"
				},
				{
					"name": "crcpaa"
				},
				{
					"name": "paapez"
				},
				{
					"name": "lookupState"
				},
				{
					"name": "Expressions"
				},
				{
					"name": "lookupCapital"
				},
				{
					"name": "lookupCompSubtype"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "lookupContractType"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "RatingCompany"
				},
				{
					"name": "StreamPartner"
				},
				{
					"name": "DerivedColumn3"
				},
				{
					"name": "constantBroker"
				},
				{
					"name": "DerivedColumn4"
				},
				{
					"name": "constantcontract"
				},
				{
					"name": "Union1"
				},
				{
					"name": "deduplicate"
				},
				{
					"name": "state"
				},
				{
					"name": "capital"
				},
				{
					"name": "country"
				},
				{
					"name": "Partner"
				},
				{
					"name": "compsubtype"
				},
				{
					"name": "pebpeoopeaid"
				},
				{
					"name": "XrefState"
				},
				{
					"name": "XrefCapital"
				},
				{
					"name": "XrefCountry"
				},
				{
					"name": "XrefCompSubType"
				},
				{
					"name": "LookupRatingComp"
				},
				{
					"name": "CompTopJoin"
				},
				{
					"name": "SFCompanyFlow"
				},
				{
					"name": "PartnerCompany"
				},
				{
					"name": "CompLei"
				},
				{
					"name": "LeiPI"
				},
				{
					"name": "LeiME"
				},
				{
					"name": "AccResPI"
				},
				{
					"name": "AccResME"
				},
				{
					"name": "DerivedColumn5"
				},
				{
					"name": "SfCompanyTopFinal"
				},
				{
					"name": "Select1"
				},
				{
					"name": "PartnerRole"
				},
				{
					"name": "XrefPartnerRole"
				},
				{
					"name": "PartRole"
				}
			],
			"script": "source(output(\n\t\tpaapeaid as long,\n\t\tpaafunct as integer,\n\t\tpaacaddress3 as string,\n\t\tpaalongname as string,\n\t\tpaacname as string,\n\t\tpaacaddress4 as string,\n\t\tpaacaddress2 as string,\n\t\tpaacaddress1 as string,\n\t\tpaactelex as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \t\t\\n                paapeaid,\\n\t\tpaafunct ,\\n\t\tpaacaddress3 ,\\n\t\tpaalongname ,\\n\t\tpaacname ,\\n\t\tpaacaddress4 ,\\n\t\tpaacaddress2 ,\\n\t\tpaacaddress1 ,\\n\t\tpaactelex \\n from dwh_stage.p_paatable\\n where ISNULL(paafunct,0) = 0',\n\tformat: 'query') ~> paatable\nsource(output(\n\t\tpeapeaid as long,\n\t\tpeamdescr as string,\n\t\tpeaccode as integer,\n\t\tpealeicode as string,\n\t\tpeasubtype as short,\n\t\tpeaextid2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \\n\t\tpeapeaid,\\n\t\tpeamdescr,\\n\t\tpeaccode,\\n\t\tpealeicode,\\n\t\tpeasubtype,\\n\t\tpeaextid2\\nfrom dwh_stage.p_peatable',\n\tformat: 'query') ~> peatable\nsource(output(\n\t\tpebpebid as string,\n\t\tpebpeaid as long,\n\t\tpebpeoopeaid as long,\n\t\tpebratcod as string,\n\t\tpebratedate as date,\n\t\tpebisolan as string,\n\t\tpebratcomp as long,\n\t\tpebtaxno as string,\n\t\tpebpever as short,\n\t\tpebdunco as integer,\n\t\tpebvaldate as date,\n\t\tpebetcbroker as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \\n\t\tpebpebid,\\n\t\tpebpeaid,\\n\t\tpebpeoopeaid,\\n\t\tpebratcod,\\n\t\tpebratedate,\\n\t\tpebisolan,\\n\t\tpebratcomp,\\n\t\tpebtaxno,\\n\t\tpebpever,\\n                pebdunco,\\n                pebvaldate,\\n                pebetcbroker\\nfrom   dwh_stage.p_pebtable',\n\tformat: 'query') ~> pebtable\nsource(output(\n\t\tpezpezid as long,\n\t\tpezdefbusnbranch as integer,\n\t\tpezdefcurr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select pezpezid,\\n         pezdefbusnbranch,\\n         pezdefcurr\\n from dwh_stage.p_peztable',\n\tformat: 'query') ~> peztable\nsource(output(\n\t\tqtbfieldn as string,\n\t\tqtbdispynsw as string,\n\t\tqtbmdescr as string,\n\t\tqtbvalue as string,\n\t\tqtbsdescr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.p_qtbtable\\nwhere qtbfieldn = \\'pebdunco\\'',\n\tformat: 'query') ~> qtbtable\nsource(output(\n\t\tcrcratcod as string,\n\t\tcrcmdescr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select crcratcod,crcmdescr from dwh_stage.p_crctable',\n\tformat: 'query') ~> crctable\nsource(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.t_crossreference\\nwhere source_system = \\'PARIS\\'',\n\tformat: 'query') ~> tcrossreference\nsource(output(\n\t\tpecpecid as long,\n\t\tpeccontyp as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select pecpecid,peccontyp from dwh_stage.p_pectable',\n\tformat: 'query') ~> pectable\nsource(output(\n\t\tcbsbusnsec as integer,\n\t\tcbsmdescr as string,\n\t\tcbslang2 as string,\n\t\tcbssw10 as string,\n\t\tcbsbusnbranch as integer,\n\t\tcbssdescr as string,\n\t\tcbsdefcondco as short,\n\t\tcbsrefcod as string,\n\t\tcbsagform as string,\n\t\tcbsdnform as string,\n\t\tcbspitype as string,\n\t\tcbstarynsw as string,\n\t\tcbsetcpremium as string,\n\t\tcbsmutual as string,\n\t\tcbsaddper as integer,\n\t\tcbsaowreb as decimal(28,10),\n\t\tcbsautocl as integer,\n\t\tcbsdefpayer as string,\n\t\tcbsrenew as integer,\n\t\tcbscnform as string,\n\t\tcbsrenewperiod as integer,\n\t\tcbsstopuse as string,\n\t\tcbsrenewendrule as integer,\n\t\tcbssiidef as string,\n\t\tcbstaxappl as integer,\n\t\tcbscrewform as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.p_cbstable',\n\tformat: 'query') ~> cbsttable\nsource(output(\n\t\tcbsbusnsec as integer,\n\t\tcbsmdescr as string,\n\t\tcbslang2 as string,\n\t\tcbssw10 as string,\n\t\tcbsbusnbranch as integer,\n\t\tcbssdescr as string,\n\t\tcbsdefcondco as short,\n\t\tcbsrefcod as string,\n\t\tcbsagform as string,\n\t\tcbsdnform as string,\n\t\tcbspitype as string,\n\t\tcbstarynsw as string,\n\t\tcbsetcpremium as string,\n\t\tcbsmutual as string,\n\t\tcbsaddper as integer,\n\t\tcbsaowreb as decimal(28,10),\n\t\tcbsautocl as integer,\n\t\tcbsdefpayer as string,\n\t\tcbsrenew as integer,\n\t\tcbscnform as string,\n\t\tcbsrenewperiod as integer,\n\t\tcbsstopuse as string,\n\t\tcbsrenewendrule as integer,\n\t\tcbssiidef as string,\n\t\tcbstaxappl as integer,\n\t\tcbscrewform as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.p_cbstable',\n\tformat: 'query') ~> cbstable2\nsource(output(\n\t\tprimary_contact_name as string,\n\t\taccount_resp_me as string,\n\t\tgard_market_area_code as string,\n\t\tsource_system as string,\n\t\taccount_resp_pi as string,\n\t\tgard_market_area_desc as string,\n\t\taccount_status as string,\n\t\tprimary_contact_email as string,\n\t\tclient_lost_reason as string,\n\t\tgard_contact_id as string,\n\t\tsource_system_id as long,\n\t\tcompany_email as string,\n\t\tcompany_owner_full_name as string,\n\t\tcompany_id as long,\n\t\tparent_company_id as long,\n\t\tcompany_name as string,\n\t\tparent_company_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select\tdistinct\tprimary_contact_name,\\n\t\taccount_resp_me,\\n\t\tgard_market_area_code,\\n\t\tsource_system,\\n\t\taccount_resp_pi,\\n\t\tgard_market_area_desc ,\\n\t\taccount_status ,\\n\t\tprimary_contact_email ,\\n\t\tclient_lost_reason ,\\n\t\tgard_contact_id ,\\n\t\tsource_system_id ,\\n\t\tcompany_email ,\\n\t\tcompany_owner_full_name ,\\n\t\tcompany_id ,\\n\t\tparent_company_id,\\n\t\tcompany_name ,\\n\t\tparent_company_name \\nfrom dwh_stage.sf_company\\nwhere source_system = \\'PARIS\\'',\n\tformat: 'query') ~> SfCompany\nsource(output(\n\t\tcompany_name_top_group as string,\n\t\tcompany_id_top_group as long,\n\t\tcompany_name as string,\n\t\tcompany_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.sf_company_top_group',\n\tformat: 'query') ~> sfcompanytop\nsource(output(\n\t\tlei_code as string,\n\t\tlegal_name as string,\n\t\tother_entity_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lei_code,legal_name,other_entity_name from dwh_stage.sta_extern_lei_code_register',\n\tformat: 'query') ~> ExternalLeiCode\nsource(output(\n\t\ttarget_code as string,\n\t\ttarget_description as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select distinct  target_code, target_description from dwh_stage.t_crossreference\\nwhere code_type_id = \\'329\\'\\nand source_system=\\'GIC\\'',\n\tformat: 'query') ~> RespPI\nsource(output(\n\t\ttarget_code as string,\n\t\ttarget_description as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select distinct  target_code, target_description from dwh_stage.t_crossreference\\nwhere code_type_id = \\'329\\'\\nand source_system=\\'PARIS\\'',\n\tformat: 'query') ~> RespME\npebtable aggregate(groupBy(pebpeaid),\n\tmaxpebpever = max(pebpever)) ~> maxpeb\npebtable, maxpeb join(pebtable@pebpeaid == maxpeb@pebpeaid\n\t&& pebpever == maxpebpever,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> pebmaxpeb\npebmaxpeb, qtbtable join(pebdunco == toInteger(qtbvalue),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> pebqtb\npebqtb select(mapColumn(\n\t\tpebpebid,\n\t\tpebpeaid = pebtable@pebpeaid,\n\t\tpebpeoopeaid,\n\t\tpebratcod,\n\t\tpebratedate,\n\t\tpebisolan,\n\t\tpebratcomp,\n\t\tpebtaxno,\n\t\tPebpever = pebpever,\n\t\tpebdunco,\n\t\tpebpeaid = maxpeb@pebpeaid,\n\t\tqtbmdescr,\n\t\tpebvaldate,\n\t\tpebetcbroker\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Prtstatus\npebpeoopeaid, peatable join(pebpeaid == peapeaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> prtpea\nprtpea, crctable join(pebratcod == crcratcod,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> peacrc\npaatable select(mapColumn(\n\t\tpaapeaid,\n\t\tpaafunct,\n\t\tpaalongname,\n\t\tpaacaddress1,\n\t\tpaacaddress4,\n\t\tpaacaddress2,\n\t\tpaacname,\n\t\tpaacaddress3,\n\t\tpaactelex\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> paatable1\npaatable1 filter(iifNull(paafunct,0) ==0) ~> Paafiltered\npeacrc, paatable join(peapeaid == paapeaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> crcpaa\ncrcpaa, peztable join(peapeaid == pezpezid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> paapez\nExpressions, XrefState lookup(pebtaxno == source_code_key_State,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupState\npaapez derive(Key = concat('P',toString(peapeaid)),\n\t\t{Partner Name} = iifNull(trim(paalongname),iifNull(trim(paacname, peamdescr))),\n\t\tAddress = concat(trim(paacaddress1),iif(isNull((concat(trim(paacaddress2),concat(trim(paacaddress3), trim(paacaddress4))))),' ',paacaddress2)),\n\t\t{Rating Code} = case(isNull(pebratcod),'N/A',pebratcod),\n\t\t{Rating Code desc} = case(isNull(crcmdescr),'N/A',crcmdescr),\n\t\t{Partner Short Name} = peamdescr,\n\t\tpezdefbusnbranch = toString(pezdefbusnbranch),\n\t\tpeasubtype = toString(peasubtype),\n\t\t{Source System} = 'PARIS',\n\t\t{Code Type State} = 368,\n\t\t{Code Type Capital} = 116,\n\t\t{Code Type Comp Sub} = 795,\n\t\t{Code Type Country} = 50) ~> Expressions\nlookupState, XrefCapital lookup(pezdefbusnbranch == source_code_key_Capital,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupCapital\nlookupCapital, XrefCompSubType lookup(peasubtype == source_code_key_CompSubtype,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupCompSubtype\nlookupCompSubtype, XrefCountry lookup(pebisolan == source_code_key_Country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupCountry\nlookupCountry, pectable lookup(peapeaid == pecpecid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lookupContractType\nlookupContractType derive({Contract Type} = case(peccontyp == '0' , 'NORMAL',case(peccontyp == '1','WAR',case(peccontyp == '9','XL','OTHER')))) ~> DerivedColumn1\nDerivedColumn1, LookupRatingComp lookup(pebratcomp == LookupRatingComp@paapeaid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> RatingCompany\nRatingCompany select(mapColumn(\n\t\tkey = Key,\n\t\t{Partner Name},\n\t\tAddress,\n\t\tpebdunco,\n\t\tQtbmdescr = qtbmdescr,\n\t\tAddress1 = paacaddress1,\n\t\tAddress2 = paacaddress2,\n\t\tAddress3 = paacaddress3,\n\t\tAddress4 = paacaddress4,\n\t\t{Rating Company} = paacname_RatingComp,\n\t\tPebratcod = pebratcod,\n\t\t{Rating Code desc},\n\t\tPebratedate = pebratedate,\n\t\t{Partner Short Name},\n\t\t{Domicile Code} = target_code_Country,\n\t\t{Domicile Description} = target_description_Country,\n\t\tPeaccode = peaccode,\n\t\tpealeicode,\n\t\t{Capital Code} = target_code_Capital,\n\t\t{Capital Description} = target_description_Capital,\n\t\t{Company Sub code} = target_code_Compsubtype,\n\t\t{Company Sub Description} = target_description_Compsubtype,\n\t\tState = target_code_State,\n\t\tPeaextid2 = peaextid2,\n\t\t{Contract Type},\n\t\tpebvaldate,\n\t\tpebetcbroker,\n\t\tpezdefcurr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StreamPartner\ncbsttable derive(Key = 'PDIR99',\n\t\t{Partner Name} = 'Direct Placed',\n\t\t{Partner Short Name} = 'Direct Placed',\n\t\tAddress = 'Not Applicable',\n\t\tpebdunco = toDecimal(null()),\n\t\tDuncodesc = 'Not Applicable',\n\t\tAddress1 = 'Not Applicable',\n\t\tAddress2 = 'Not Applicable',\n\t\tAddress3 = 'Not Applicable',\n\t\tAddress4 = 'Not Applicable',\n\t\t{Rating Company} = 'Not Applicable',\n\t\t{Rating Code} = 'N/A',\n\t\t{Rating Code Description} = 'Not Applicable',\n\t\t{Rating Date} = toDate(case(1!=1,1)),\n\t\t{Val Date} = toDate(case(1!=1,1)),\n\t\t{Domicile Code} = 'N/A',\n\t\t{Domicile Description} = 'Not Applicable',\n\t\tPeacode = toDecimal(null()),\n\t\t{Capital Code} = toString(null()),\n\t\t{Capital Description} = toString(null()),\n\t\t{Company Sub code} = toString(null()),\n\t\t{Company Sub Desc} = toString(null()),\n\t\tState = 'N/A',\n\t\tPeaextid2 = toString(null()),\n\t\t{Contract Type} = toString(null()),\n\t\t{Pea Lei Code} = toString(null()),\n\t\tpebetcbroker = toString(null()),\n\t\tpezdefcurr = toString(null())) ~> DerivedColumn3\nDerivedColumn3 select(mapColumn(\n\t\tkey = Key,\n\t\t{Partner Name},\n\t\tAddress,\n\t\tpebdunco,\n\t\tQtbmdescr = Duncodesc,\n\t\tAddress1,\n\t\tAddress2,\n\t\tAddress3,\n\t\tAddress4,\n\t\t{Rating Company},\n\t\tPebratcod = {Rating Code},\n\t\t{Rating Code desc} = {Rating Code Description},\n\t\tPebratedate = {Rating Date},\n\t\t{Partner Short Name},\n\t\t{Domicile Code},\n\t\t{Domicile Description},\n\t\tPeaccode = Peacode,\n\t\tpealeicode = {Pea Lei Code},\n\t\t{Capital Code},\n\t\t{Capital Description},\n\t\t{Company Sub code},\n\t\t{Company Sub Description} = {Company Sub Desc},\n\t\tState,\n\t\tPeaextid2,\n\t\t{Contract Type},\n\t\tpebvaldate = {Val Date},\n\t\tpebetcbroker,\n\t\tpezdefcurr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> constantBroker\ncbstable2 derive({Partner Name} = 'Facultativ',\n\t\t{Pk Key} = 'PFACULTATIV',\n\t\tAddress = 'Not Applicable',\n\t\tAddress1 = 'Not Applicable',\n\t\tAddress2 = 'Not Applicable',\n\t\tAddress3 = 'Not Applicable',\n\t\tAddress4 = 'Not Applicable',\n\t\t{Rating Company} = 'Not Applicable',\n\t\t{Rating Code} = 'N/A',\n\t\t{Rating Code desc} = 'Not Applicable',\n\t\t{Domicile Description} = 'Not Applicable',\n\t\tPebratedate = toDate(case(1!=1,1)),\n\t\tpebvaldate = toDate(case(1!=1,1)),\n\t\tCity = 'N/A',\n\t\tState = 'N/A',\n\t\tPebdunco = toDecimal(null()),\n\t\tDuncodesc = 'Not Applicable',\n\t\t{Pea Lei Code} = toString(null()),\n\t\tPeaextid2 = toString(null()),\n\t\tpezdefcurr = toString(null()),\n\t\t{Capital Description} = toString(null()),\n\t\t{Company Sub code} = toString(null()),\n\t\t{Company Sub Description} = toString(null()),\n\t\tpealeicode = toString(null()),\n\t\tPeaccode = toDecimal(null()),\n\t\t{Contract Type} = 'OTHER',\n\t\t{Partner Short Name} = 'Direct Placed',\n\t\tpebetcbroker = 'N') ~> DerivedColumn4\nDerivedColumn4 select(mapColumn(\n\t\tkey = {Pk Key},\n\t\t{Partner Name},\n\t\tAddress,\n\t\tpebdunco = Pebdunco,\n\t\tQtbmdescr = Duncodesc,\n\t\tAddress1,\n\t\tAddress2,\n\t\tAddress3,\n\t\tAddress4,\n\t\t{Rating Company},\n\t\tPebratcod = {Rating Code},\n\t\t{Rating Code desc},\n\t\tPebratedate,\n\t\t{Partner Short Name},\n\t\t{Domicile Code} = City,\n\t\t{Domicile Description},\n\t\tPeaccode,\n\t\tpealeicode,\n\t\t{Capital Code} = {Pea Lei Code},\n\t\t{Capital Description},\n\t\t{Company Sub code},\n\t\t{Company Sub Description},\n\t\tState,\n\t\t{Contract Type},\n\t\tPeaextid2,\n\t\tpebvaldate,\n\t\tpebetcbroker,\n\t\tpezdefcurr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> constantcontract\nStreamPartner, constantBroker, constantcontract union(byName: true)~> Union1\nUnion1 aggregate(groupBy(Key = key),\n\teach(match(name!='key'), $$ = first($$))) ~> deduplicate\ntcrossreference filter(code_type_id == 368) ~> state\ntcrossreference filter(code_type_id == 116) ~> capital\ntcrossreference filter(code_type_id == 50) ~> country\ndeduplicate select(mapColumn(\n\t\tKey,\n\t\t{Partner Name},\n\t\tAddress,\n\t\tpebdunco,\n\t\tQtbmdescr,\n\t\tAddress1,\n\t\tAddress2,\n\t\tAddress3,\n\t\tAddress4,\n\t\t{Rating Company},\n\t\tPebratcod,\n\t\t{Rating Code desc},\n\t\tPebratedate,\n\t\t{Partner Short Name},\n\t\t{Domicile Code},\n\t\t{Domicile Description},\n\t\tPeaccode,\n\t\tpealeicode,\n\t\t{Capital Code},\n\t\t{Capital Description},\n\t\t{Company Sub code},\n\t\t{Company Sub Description},\n\t\tState,\n\t\tPeaextid2,\n\t\t{Contract Type},\n\t\tpebvaldate,\n\t\tpebetcbroker,\n\t\tpezdefcurr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Partner\ntcrossreference filter(code_type_id == 795) ~> compsubtype\nPrtstatus derive(pebpeoopeaid = case(pebpeoopeaid == 0,toInteger(null()),toInteger(pebpeoopeaid))) ~> pebpeoopeaid\nstate select(mapColumn(\n\t\ttarget_description_State = target_description,\n\t\ttarget_code_State = target_code,\n\t\tsource_code_key_State = source_code_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefState\ncapital select(mapColumn(\n\t\ttarget_description_Capital = target_description,\n\t\ttarget_code_Capital = target_code,\n\t\tsource_code_key_Capital = source_code_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefCapital\ncountry select(mapColumn(\n\t\ttarget_description_Country = target_description,\n\t\ttarget_code_Country = target_code,\n\t\tsource_code_key_Country = source_code_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefCountry\ncompsubtype select(mapColumn(\n\t\ttarget_description_Compsubtype = target_description,\n\t\ttarget_code_Compsubtype = target_code,\n\t\tsource_code_key_CompSubtype = source_code_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefCompSubType\npaatable select(mapColumn(\n\t\tpaacname_RatingComp = paacname,\n\t\tpaapeaid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LookupRatingComp\nSelect1, SfCompanyTopFinal join(company_id_sfcomp == company_id_top,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> CompTopJoin\nCompTopJoin derive(Key = concat('P', toString(source_system_id_sfcomp))) ~> SFCompanyFlow\nPartner, SFCompanyFlow join(Partner@Key == SFCompanyFlow@Key,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> PartnerCompany\nPartnerCompany, ExternalLeiCode join(pealeicode == lei_code,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> CompLei\nCompLei, AccResPI join(account_resp_pi_sfcomp == target_code_account_Resp_PI,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeiPI\nLeiPI, AccResME join(account_resp_me_sfcomp == target_code_account_Resp_ME,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LeiME\nRespPI select(mapColumn(\n\t\ttarget_code_account_Resp_PI = target_code,\n\t\ttarget_description_account_Resp_PI = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AccResPI\nRespME select(mapColumn(\n\t\ttarget_code_account_Resp_ME = target_code,\n\t\ttarget_description_account_Resp_ME = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AccResME\nLeiME derive(prt_sf_client_lost_reason = client_lost_reason_sfcomp,\n\t\tprt_sf_company_id = iifNull(company_id_sfcomp,-1),\n\t\tprt_sf_company_name = iifNull(company_name_sfcomp,'Not Applicable'),\n\t\tprt_sf_company_owner = iifNull(company_owner_full_name_sfcomp,'Not Applicable'),\n\t\tprt_sf_market_area_code = iifNull(gard_market_area_code_sfcomp,'N/A'),\n\t\tprt_sf_market_area_desc = iifNull(gard_market_area_desc_sfcomp,'Not Applicable'),\n\t\tprt_sf_top_company = iifNull(company_name_top_group,iifNull(parent_company_name_sfcomp,'Not Applicable')),\n\t\tprt_sf_top_company_id = iifNull(company_id_top_group,iifNull(parent_company_id_sfcomp,-1)),\n\t\tprt_sf_account_resp_pi_init = account_resp_pi_sfcomp,\n\t\tprt_sf_account_resp_pi_desc = target_description_account_Resp_PI,\n\t\tprt_sf_account_resp_me_init = account_resp_me_sfcomp,\n\t\tprt_sf_account_resp_me_desc = target_description_account_Resp_ME,\n\t\tprt_sf_account_status = account_status_sfcomp,\n\t\tprt_currency_code = iifNull(pezdefcurr,'USD'),\n\t\tprt_comm_on_etc_basis_year = toInteger(year(pebvaldate))\r\n,\n\t\tprt_legal_name = case(iifNull(legal_name,'LGN')!='LGN', substring(legal_name, 1, 500), other_entity_name),\n\t\tpeaccode = toString(Peaccode)) ~> DerivedColumn5\nsfcompanytop select(mapColumn(\n\t\tcompany_name_top_group,\n\t\tcompany_id_top_group,\n\t\tcompany_name_top = company_name,\n\t\tcompany_id_top = company_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SfCompanyTopFinal\nSfCompany select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_sfcomp' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\ntcrossreference filter(code_type_id==109) ~> PartnerRole\nPartnerRole select(mapColumn(\n\t\ttarget_description_PartRole = target_description,\n\t\ttarget_code_PartRole = target_code,\n\t\tsource_code_key_PartRole = source_code_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefPartnerRole\nDerivedColumn5, XrefPartnerRole join(DerivedColumn5@peaccode == source_code_key_PartRole,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> PartRole\nPartRole sink(input(\n\t\tpk_key as string,\n\t\tprt_intercompany_code as string,\n\t\tprt_intercompany_desc as string,\n\t\tprt_company_sub_code as string,\n\t\tprt_company_sub_desc as string,\n\t\tprt_reporting_area_code as string,\n\t\tprt_reporting_area_desc as string,\n\t\tprt_member_since as date,\n\t\tprt_legal_name as string,\n\t\tprt_state as string,\n\t\tprt_sf_account_resp_pi_init as string,\n\t\tprt_sf_account_resp_pi_desc as string,\n\t\tprt_sf_account_resp_me_init as string,\n\t\tprt_sf_account_resp_me_desc as string,\n\t\tprt_sf_account_status as string,\n\t\tprt_comm_on_etc_basis as string,\n\t\tprt_comm_on_etc_basis_year as decimal(28,10),\n\t\tprt_gard_contact_id as string,\n\t\tprt_sf_gard_contact_id as string,\n\t\tprt_contract_type as string,\n\t\tprt_sf_company_email as string,\n\t\tprt_sf_primary_contact_email as string,\n\t\tprt_sf_primary_contact_name as string,\n\t\tprt_default_etc_broker_ind as string,\n\t\tprt_default_etc_broker_strdate as date,\n\t\tprt_partner_number as decimal(28,10),\n\t\tprt_office_key as string,\n\t\tprt_sf_client_lost_reason as string,\n\t\tprt_sf_company_id as decimal(28,10),\n\t\tprt_sf_company_name as string,\n\t\tprt_sf_company_owner as string,\n\t\tprt_sf_key as string,\n\t\tprt_sf_market_area_code as string,\n\t\tprt_sf_market_area_desc as string,\n\t\tprt_sf_top_company as string,\n\t\tprt_sf_top_company_id as decimal(28,10),\n\t\tprt_account_responsible as string,\n\t\tprt_currency_code as string,\n\t\tprt_currency_desc as string,\n\t\tprt_primary_underwriter as string,\n\t\tprt_lei_code as string,\n\t\tname as string,\n\t\tinserted_by as string,\n\t\tdate_inserted as timestamp,\n\t\tlast_updated_by as string,\n\t\tdate_last_updated as timestamp,\n\t\tprt_address_1 as string,\n\t\tprt_address_2 as string,\n\t\tprt_address_3 as string,\n\t\tprt_address_4 as string,\n\t\tprt_full_address as string,\n\t\tprt_status_code as string,\n\t\tprt_status_desc as string,\n\t\tprt_partner_group as string,\n\t\tprt_broker_code as decimal(28,10),\n\t\tprt_hedge_pct as decimal(28,10),\n\t\tprt_rating_company as string,\n\t\tprt_rating_code as string,\n\t\tprt_rating_code_desc as string,\n\t\tprt_rating_date as date,\n\t\tprt_partner_group_desc as string,\n\t\tprt_partner_short_name as string,\n\t\tprt_domicile_code as string,\n\t\tprt_domicile_name as string,\n\t\tprt_partner_role_code as string,\n\t\tprt_partner_role_desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tpk_key = Partner@Key,\n\t\tprt_legal_name,\n\t\tprt_sf_account_resp_pi_init,\n\t\tprt_sf_account_resp_pi_desc,\n\t\tprt_sf_account_resp_me_init,\n\t\tprt_sf_account_resp_me_desc,\n\t\tprt_sf_account_status,\n\t\tprt_comm_on_etc_basis_year,\n\t\tprt_partner_number = source_system_id_sfcomp,\n\t\tprt_office_key = Partner@Key,\n\t\tprt_sf_client_lost_reason,\n\t\tprt_sf_company_id,\n\t\tprt_sf_company_name,\n\t\tprt_sf_company_owner,\n\t\tprt_sf_market_area_code,\n\t\tprt_sf_market_area_desc,\n\t\tprt_sf_top_company,\n\t\tprt_sf_top_company_id,\n\t\tprt_currency_code,\n\t\tprt_lei_code = pealeicode,\n\t\tname = {Partner Name},\n\t\tprt_address_1 = Address1,\n\t\tprt_address_2 = Address2,\n\t\tprt_address_3 = Address3,\n\t\tprt_address_4 = Address4,\n\t\tprt_full_address = Address,\n\t\tprt_status_code = pebdunco,\n\t\tprt_status_desc = Qtbmdescr,\n\t\tprt_rating_company = {Rating Company},\n\t\tprt_rating_code = Pebratcod,\n\t\tprt_rating_code_desc = {Rating Code desc},\n\t\tprt_rating_date = Pebratedate,\n\t\tprt_partner_short_name = {Partner Short Name},\n\t\tprt_domicile_code = {Domicile Code},\n\t\tprt_domicile_name = {Domicile Description},\n\t\tprt_partner_role_code = target_code_PartRole,\n\t\tprt_partner_role_desc = target_description_PartRole\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimPartner"
		}
	}
}