{
	"name": "m_pre_dim_premium_line_pa",
	"properties": {
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "Ipa"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "Rob"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "Tcross"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_premium_line",
						"type": "DatasetReference"
					},
					"name": "PreDimPremiumLine"
				}
			],
			"transformations": [
				{
					"name": "PrlType802"
				},
				{
					"name": "RobRateInd"
				},
				{
					"name": "Reason391"
				},
				{
					"name": "XrefReason"
				},
				{
					"name": "XrefPremType"
				},
				{
					"name": "IpaRob"
				},
				{
					"name": "IpaXrefReason"
				},
				{
					"name": "IpaXrefPremType"
				},
				{
					"name": "NoMatchCols"
				},
				{
					"name": "Constants"
				},
				{
					"name": "PreDimPremiumLineCols"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "source(output(\n\t\tipaipaid as string,\n\t\tipainaid as string,\n\t\tipaicaid as string,\n\t\tiparistor as decimal(28,10),\n\t\tipapcod2 as string,\n\t\tipaendate as date,\n\t\tipapcode as string,\n\t\tipapdays as decimal(28,10),\n\t\tipastdate as date,\n\t\tipapcdtxt as string,\n\t\tipamarketripercentage as decimal(28,10),\n\t\tipaabatementpercentage as decimal(28,10),\n\t\tipapoolpercentage as decimal(28,10)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \tipaipaid,\\n\t\tipainaid,\\n\t\tipaicaid,\\n\t\tiparistor,\\n\t\tipapcod2,\\n\t\tipaendate,\\n\t\tipapcode,\\n\t\tipapdays,\\n\t\tipastdate,\\n\t\tipapcdtxt,\\n\t\tipamarketripercentage,\\n\t\tipaabatementpercentage,\\n\t\tipapoolpercentage\\n\tfrom dwh_stage .p_ipatable',\n\tformat: 'query') ~> Ipa\nsource(output(\n\t\trob_count_risk_days as decimal(28,10),\n\t\tpk_key as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select rob_count_risk_days,\\n\t\tpk_key\\n  from dwh_prepare.pre_dim_risk_object',\n\tformat: 'query') ~> Rob\nsource(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.t_crossreference',\n\tformat: 'query') ~> Tcross\nTcross filter(source_system =='PARIS' && code_type_id == 802) ~> PrlType802\nRob derive(rob_count_risk_days = case(coalesce(rob_count_risk_days,0) <= 21,0,1)) ~> RobRateInd\nTcross filter(source_system=='PARIS' && code_type_id == 391) ~> Reason391\nReason391 select(mapColumn(\n\t\tsource_code_key_reason = source_code_key,\n\t\ttarget_code_reason = target_code,\n\t\ttarget_description_reason = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefReason\nPrlType802 select(mapColumn(\n\t\tsource_code_key_premtype = source_code_key,\n\t\ttarget_code_premtype = target_code,\n\t\ttarget_description_premtype = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> XrefPremType\nIpa, RobRateInd join(concat('P',ipaicaid) == pk_key,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> IpaRob\nIpaRob, XrefReason join(ipapcod2 == source_code_key_reason,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> IpaXrefReason\nIpaXrefReason, XrefPremType join(ipapcode == source_code_key_premtype,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> IpaXrefPremType\nIpaXrefPremType derive(target_code_reason = coalesce(target_code_reason, 'N/A'),\n\t\ttarget_description_reason = coalesce(target_description_reason, 'Not Applicable'),\n\t\ttarget_code_premtype = coalesce(target_code_premtype, 'N/A'),\n\t\ttarget_description_premtype = coalesce(target_description_premtype, 'Not Applicable')) ~> NoMatchCols\nNoMatchCols derive(last_updated_by = 'm_pre_dim_premium_line_pa',\n\t\tprl_ri_vessel_type = 'N/A',\n\t\tprl_sub_limit_ind = 'N',\n\t\tprl_main_cover_limit_usd = 0,\n\t\tprl_add_cover_limit_usd = 0) ~> Constants\nConstants select(mapColumn(\n\t\tpk_key = ipaipaid,\n\t\tprl_premium_basis = iparistor,\n\t\tprl_period_to = ipaendate,\n\t\tparis_ipapcode = ipapcode,\n\t\tprl_premium_days = ipapdays,\n\t\tprl_period_from = ipastdate,\n\t\tprl_text = ipapcdtxt,\n\t\tprl_pro_rata_ind = rob_count_risk_days,\n\t\tprl_reason = target_code_reason,\n\t\tprl_reason = target_description_reason,\n\t\tprl_type_code = target_code_premtype,\n\t\tprl_type_code_desc = target_description_premtype,\n\t\tlast_updated_by,\n\t\tprl_ri_vessel_type,\n\t\tprl_sub_limit_ind,\n\t\tprl_main_cover_limit_usd,\n\t\tprl_add_cover_limit_usd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimPremiumLineCols\nPreDimPremiumLineCols alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tpk_key as string,\n\t\tprl_type_code_desc as string,\n\t\tprl_ri_vessel_type as string,\n\t\tparis_ipapcode as string,\n\t\tprl_text as string,\n\t\tprl_main_cover_limit_usd as decimal(28,10),\n\t\tdate_last_updated as timestamp,\n\t\tlast_updated_by as string,\n\t\tprl_period_from as date,\n\t\tdate_inserted as timestamp,\n\t\tprl_reason as string,\n\t\tprl_sub_limit_ind as string,\n\t\tprl_period_to as date,\n\t\tprl_premium_days as decimal(28,10),\n\t\tprl_pro_rata_ind as string,\n\t\tprl_add_cover_limit_usd as decimal(28,10),\n\t\tprl_premium_basis as decimal(28,10),\n\t\tprl_type_code as string,\n\t\tinserted_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['pk_key'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimPremiumLine"
		}
	}
}