{
	"name": "m_pre_dim_risk_object_ins",
	"properties": {
		"description": "Insurance mapping from pre dim risk object",
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_dwh_stage",
						"type": "DatasetReference"
					},
					"name": "icatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_dwh_stage",
						"type": "DatasetReference"
					},
					"name": "inatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_dwh_stage",
						"type": "DatasetReference"
					},
					"name": "paa"
				},
				{
					"dataset": {
						"referenceName": "Paris",
						"type": "DatasetReference"
					},
					"name": "peb"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_dwh_stage",
						"type": "DatasetReference"
					},
					"name": "tcross"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_dwh_stage",
						"type": "DatasetReference"
					},
					"name": "isztable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_dwh_stage",
						"type": "DatasetReference"
					},
					"name": "isatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_dwh_stage",
						"type": "DatasetReference"
					},
					"name": "ipatable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_risk_object_insurance",
						"type": "DatasetReference"
					},
					"name": "PreDimRiskObjectInsurance"
				}
			],
			"transformations": [
				{
					"name": "pebtable"
				},
				{
					"name": "pebtable1"
				},
				{
					"name": "maxpebver"
				},
				{
					"name": "pebmaxpeb"
				},
				{
					"name": "icaina"
				},
				{
					"name": "inapaa"
				},
				{
					"name": "pebtablejoin"
				},
				{
					"name": "inapeb"
				},
				{
					"name": "Lkpcountry"
				},
				{
					"name": "sourcecode"
				},
				{
					"name": "xrefcountry"
				},
				{
					"name": "xrefSectionType"
				},
				{
					"name": "inaisa"
				},
				{
					"name": "isaisz"
				},
				{
					"name": "lkpsectiontype"
				},
				{
					"name": "predimriskobject"
				},
				{
					"name": "icaipa"
				},
				{
					"name": "RathingMethod"
				},
				{
					"name": "Paris"
				},
				{
					"name": "Paris2"
				}
			],
			"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaicaid,\\n\t\ticaprwdate,\\n\t\ticainaid\\nfrom dwh_stage.p_icatable',\n\tformat: 'query') ~> icatable\nsource(output(\n\t\tinainaid as string,\n\t\tinacedent as long,\n\t\tinawarrenty as short,\n\t\tinaisaid as string,\n\t\tinabusnsubcla as integer,\n\t\tinareinnoof as integer,\n\t\tinareinshare as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select inainaid,\\n\t\tinacedent,\\n\t\tinawarrenty,\\n\t\tinaisaid,\\n\t\tinabusnsubcla,\\n\t\tinareinnoof,\\n\t\tinareinshare\\nfrom dwh_stage.p_inatable',\n\tformat: 'query') ~> inatable\nsource(output(\n\t\tpaapeaid as long,\n\t\tpaacname as string,\n\t\tpaafunct as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \tpaapeaid,\\n\t\tpaacname,\\n                paafunct\\nfrom dwh_stage.p_paatable\\n where paafunct = 0',\n\tformat: 'query') ~> paa\nsource(output(\n\t\tpebbrdate as timestamp,\n\t\tpebcivilstatus as decimal(38,18),\n\t\tpebconbusncla as decimal(38,18),\n\t\tpebconbusndiv as decimal(38,18),\n\t\tpebconbusnsec as decimal(38,18),\n\t\tpebconcomp2 as decimal(38,18),\n\t\tpebconoffice as decimal(38,18),\n\t\tpebdistrict as string,\n\t\tpebdunco as decimal(38,18),\n\t\tpebemlcurr as string,\n\t\tpebemlmdescr as string,\n\t\tpebetcbroker as string,\n\t\tpebfortsector as decimal(38,18),\n\t\tpebforttrade as string,\n\t\tpebgeneml as decimal(38,18),\n\t\tpebgroup as decimal(38,18),\n\t\tpebhourprice as decimal(38,18),\n\t\tpebinstadynz as string,\n\t\tpebisolan as string,\n\t\tpebkycapprdate as timestamp,\n\t\tpebkycapproved as string,\n\t\tpebkyccompany as decimal(38,18),\n\t\tpebkyccompdescr as string,\n\t\tpebkycid as string,\n\t\tpebludate as timestamp,\n\t\tpeblusign as string,\n\t\tpebmacheml as decimal(38,18),\n\t\tpebmansanctdescr as string,\n\t\tpebmansanction as string,\n\t\tpebmdescr as string,\n\t\tpebmvaynsw as string,\n\t\tpebnmisic as string,\n\t\tpebnmnyk as string,\n\t\tpeboffsanctdescr as string,\n\t\tpeboffsanction as string,\n\t\tpebonrisk as string,\n\t\tpebonriskdate as timestamp,\n\t\tpebpaylevel as decimal(38,18),\n\t\tpebpeaid as decimal(38,18),\n\t\tpebpebid as string,\n\t\tpebpeoid as string,\n\t\tpebpeoopeaid as decimal(38,18),\n\t\tpebpersacc as decimal(38,18),\n\t\tpebpever as decimal(38,18),\n\t\tpebpibregdate as timestamp,\n\t\tpebpibregsign as string,\n\t\tpebpidcname as string,\n\t\tpebpidid as decimal(38,18),\n\t\tpebpricecurr as string,\n\t\tpebqadate as timestamp,\n\t\tpebqasign as string,\n\t\tpebqastatus as string,\n\t\tpebratcod as string,\n\t\tpebratcomp as decimal(38,18),\n\t\tpebratedate as timestamp,\n\t\tpebratludate as timestamp,\n\t\tpebratsign as string,\n\t\tpebreason as string,\n\t\tpebressign as string,\n\t\tpebsitid as string,\n\t\tpebsupporter as string,\n\t\tpebtaxno as string,\n\t\tpebtypelevel as decimal(38,18),\n\t\tpebusstate as string,\n\t\tpebvaldate as timestamp,\n\t\tpebverstat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> peb\nsource(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.t_crossreference\\nwhere source_system = \"PARIS\"',\n\tformat: 'query') ~> tcross\nsource(output(\n\t\tiszcshind as decimal(28,10),\n\t\tisztotind as decimal(28,10),\n\t\tisziszid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select iszcshind,\\n\t\tisztotind,\\n\t\tisziszid\\nfrom dwh_stage.p_isztable',\n\tformat: 'query') ~> isztable\nsource(output(\n\t\tisasecnam as string,\n\t\tisaisaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select isasecnam,isaisaid from dwh_stage.p_isatable',\n\tformat: 'query') ~> isatable\nsource(output(\n\t\tipaiusdgt as decimal(28,10),\n\t\tipairatecrew as decimal(28,10),\n\t\tiparate as decimal(28,10),\n\t\tipaicaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select ipaiusdgt,\\n\t\tipairatecrew,\\n\t\tiparate,\\n\t\tipaicaid\\nfrom dwh_stage.p_ipatable',\n\tformat: 'query') ~> ipatable\npeb select(mapColumn(\n\t\tpebpeaid,\n\t\tpebpever\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> pebtable\npeb select(mapColumn(\n\t\tpebpeaid,\n\t\tpebpever,\n\t\tpebisolan\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> pebtable1\npebtable aggregate(groupBy(pebpeaid),\n\tmax_pebver = max(pebpever)) ~> maxpebver\nmaxpebver, pebtable1 join(maxpebver@pebpeaid == pebtable1@pebpeaid\n\t&& max_pebver == pebpever,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> pebmaxpeb\nicatable, inatable join(icainaid == inainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaina\nicaina, paa join(inacedent == paapeaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> inapaa\npebmaxpeb select(mapColumn(\n\t\tpebpeaid = maxpebver@pebpeaid,\n\t\tpebisolan\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> pebtablejoin\ninapaa, pebtablejoin join(paapeaid == pebpeaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> inapeb\nsourcecode, xrefcountry lookup(source_system == source_system_country\n\t&& pebisolan == source_code_key_country\n\t&& sourcecode@code_type_id_country == xrefcountry@code_type_id_country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lkpcountry\ninapeb derive(source_system = 'PARIS',\n\t\tcode_type_id_country = 50,\n\t\tcode_type_id_157_section_type = 157) ~> sourcecode\nParis2 select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'||name=='code_type_id'||name=='source_system'),\n\t\t\t$$+'_country' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefcountry\nParis select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'||name=='code_type_id'||name=='source_system'||name=='code_type'),\n\t\t\t$$+'_section_type' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefSectionType\nLkpcountry, isatable join(inaisaid == isaisaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> inaisa\ninaisa, isztable join(isaisaid == isziszid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> isaisz\nicaipa, xrefSectionType lookup(source_system == source_system_section_type\n\t&& toString(inabusnsubcla) == code_type_section_type\n\t&& code_type_id_157_section_type == code_type_id_section_type,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lkpsectiontype\nRathingMethod select(mapColumn(\n\t\trob_ceding_comp_country_code = target_code_country,\n\t\trob_ceding_comp_country_desc = target_description_country,\n\t\trob_ceding_company_code = paapeaid,\n\t\trob_ceding_company_name = paacname,\n\t\trob_total_index = isztotind,\n\t\trob_rating_method,\n\t\trob_cash_index = iszcshind,\n\t\trob_reinstatement_counts = inareinnoof,\n\t\trob_reinstatement_rate = inareinshare,\n\t\trob_section_name = isasecnam,\n\t\trob_section_type_code = target_code_section_type,\n\t\trob_section_type_desc = target_description_section_type,\n\t\trob_warranty_days = inawarrenty\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> predimriskobject\nisaisz, ipatable join(icaicaid == ipaicaid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> icaipa\nlkpsectiontype derive(rob_rating_method = case(coalesce(toDecimal(ipaiusdgt),toDecimal(0))>toDecimal(0),'RPT',\r\ncase(coalesce(toDecimal(ipairatecrew),toDecimal(0))>toDecimal(0),'RPC',\r\ncase(coalesce(toDecimal(iparate),toDecimal(0))>toDecimal(0),'POC'\r\n,'LMP')))) ~> RathingMethod\ntcross filter(source_system == 'PARIS') ~> Paris\ntcross filter(source_system == 'PARIS') ~> Paris2\npredimriskobject sink(input(\n\t\tpk_key as string,\n\t\treg_code as string,\n\t\treg_description as string,\n\t\tar1_code as string,\n\t\tar1_description as string,\n\t\tar2_code as string,\n\t\tar2_description as string,\n\t\tlast_updated_by as string,\n\t\tcon_2ltr_code as string,\n\t\tcon_country_name as string,\n\t\tcon_oecd as string,\n\t\tcon_currency_code as string,\n\t\tcon_eu as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PreDimRiskObjectInsurance"
		}
	}
}