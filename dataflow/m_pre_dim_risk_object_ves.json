{
	"name": "m_pre_dim_risk_object_ves",
	"properties": {
		"description": "Start testing how to make the risk_object. Starting on PA",
		"folder": {
			"name": "dwh_prepare/pre_dim"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tcross"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ica"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obbtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "stariskgroup"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lloydsevessel"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "vesseltype"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "unltable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_dim_risk_object_vessel",
						"type": "DatasetReference"
					},
					"name": "sinkpredimobjectvessel"
				}
			],
			"transformations": [
				{
					"name": "AgreementType",
					"description": "code_type_id == 113"
				},
				{
					"name": "xrefAgreementType"
				},
				{
					"name": "BusinessArea",
					"description": " code_type_id== 106"
				},
				{
					"name": "xrefBusinessArea"
				},
				{
					"name": "VesselSubType",
					"description": "source_system== 'PARIS' && code_type_id == 45"
				},
				{
					"name": "xrefVesselSubType",
					"description": "With columns 'source_code_key_sub_type, target_code_sub_type, target_description_sub_type'"
				},
				{
					"name": "icastdateExchange",
					"description": "Creating Icastdate_exchange"
				},
				{
					"name": "obaobb"
				},
				{
					"name": "icaendateobb"
				},
				{
					"name": "icaaga"
				},
				{
					"name": "ExpressionRob"
				},
				{
					"name": "agaAgtype"
				},
				{
					"name": "LkpStaRiskGroup"
				},
				{
					"name": "obbsubtype"
				},
				{
					"name": "ExpressionVslgrp"
				},
				{
					"name": "LkpLoydsVessel"
				},
				{
					"name": "ExpressionBuiltYearCalc"
				},
				{
					"name": "ExpVesselAge"
				},
				{
					"name": "icaoba"
				},
				{
					"name": "subtypevesseltype"
				},
				{
					"name": "dimvesseltype"
				},
				{
					"name": "tmp"
				},
				{
					"name": "xrefFlag"
				},
				{
					"name": "xrefclass"
				},
				{
					"name": "flag"
				},
				{
					"name": "constant"
				},
				{
					"name": "class"
				},
				{
					"name": "lkpunl"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "source(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.t_crossreference',\n\tformat: 'query') ~> tcross\nsource(output(\n\t\ticaobno as integer,\n\t\ticastdate as date,\n\t\ticaendate as date,\n\t\ticatotamt as long,\n\t\ticaourshare as decimal(28,10),\n\t\ticacadate as date,\n\t\ticaicaid as string,\n\t\ticachdate as date,\n\t\ticainaid as string,\n\t\ticaagaid as string,\n\t\ticapmlcurr as string,\n\t\ticapmlamt as long,\n\t\ticaeoamt as long,\n\t\ticaprovst as integer,\n\t\ticastat3 as string,\n\t\ticaintrate as decimal(28,10),\n\t\ticaintosprem as decimal(28,10),\n\t\ticaintcurr as string,\n\t\ticacrdate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaobno,\\n\t\ticastdate,\\n\t\ticaendate,\\n\t\ticatotamt,\\n\t\ticaourshare,\\n\t\ticacadate,\\n\t\ticaicaid,\\n\t\ticachdate,\\n\t\ticainaid,\\n\t\ticaagaid,\\n\t\ticapmlcurr,\\n\t\ticapmlamt,\\n\t\ticaeoamt,\\n\t\ticaprovst,\\n\t\ticastat3,\\n\t\ticaintrate,\\n\t\ticaintosprem,\\n\t\ticaintcurr,\\n\t\ticacrdate\\nfrom dwh_stage.p_icatable\\nwhere icaicaid = \\'1998O 109936 GA\\'',\n\tformat: 'query') ~> ica\nsource(output(\n\t\tagaagaid as string,\n\t\tagastdate as date,\n\t\tagabusnsec as integer,\n\t\tagabusndiv as integer,\n\t\tagabusncla as integer,\n\t\tagastat2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \tagaagaid,\\n\t\tagastdate,\\n\t\tagabusnsec,\\n\t\tagabusndiv,\\n\t\tagabusncla,\\n\t\tagastat2\\nfrom dwh_stage.p_agatable',\n\tformat: 'query') ~> agatable\nsource(output(\n\t\tobbobno as integer,\n\t\tobbstdate as date,\n\t\tobbendate as date,\n\t\tobbcefoty as string,\n\t\tobbgrt as integer,\n\t\tobbname as string,\n\t\tobbclass as string,\n\t\tobbbuiltyear as short,\n\t\tobbdwt as integer,\n\t\tobbformt as integer,\n\t\tobbvesisolan as string,\n\t\tobbadr1 as string,\n\t\tobbsocity as string,\n\t\tobbnoofpax as integer,\n\t\tobbportunlid as string,\n\t\tobbvescod as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select obbobno,\\n\t\tobbstdate,\\n\t\tobbendate,\\n\t\tobbcefoty,\\n\t\tobbgrt,\\n\t\tobbname,\\n\t\tobbclass,\\n\t\tobbbuiltyear,\\n\t\tobbdwt,\\n\t\tobbformt,\\n\t\tobbvesisolan,\\n\t\tobbadr1,\\n\t\tobbsocity,\\n\t\tobbnoofpax,\\n\t\tobbportunlid,\\n\t\tobbvescod\\nfrom dwh_stage.p_obbtable',\n\tformat: 'query') ~> obbtable\nsource(output(\n\t\tobaobno as integer,\n\t\tobaimono as integer,\n\t\tobacallno as string,\n\t\tobaorgbui as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obaobno,\\n\t\tobaimono,\\n\t\tobacallno,\\n\t\tobaorgbui\\nfrom dwh_stage.p_obatable',\n\tformat: 'query') ~> obatable\nsource(output(\n\t\tagreement_type as string,\n\t\trisk_group_code as string,\n\t\trisk_group_desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agreement_type, risk_group_code,\\nrisk_group_desc from dwh_stage.sta_risk_group',\n\tformat: 'query') ~> stariskgroup\nsource(output(\n\t\timo as integer,\n\t\tyear_of_build as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \timo,\\n\t\tyear_of_build \\nfrom dwh_stage.lloyds_vessel',\n\tformat: 'query') ~> lloydsevessel\nsource(output(\n\t\tvtg_key as string,\n\t\tvtg_main_group_level_1_sort as string,\n\t\tvtg_main_group_level_2_code as short,\n\t\tvtg_description as string,\n\t\tvtg_main_group_level_2_desc as string,\n\t\tvtg_main_group_level_1_desc as string,\n\t\tvtg_main_group_level_1_code as short,\n\t\tvtg_main_group_level_2_sort as string,\n\t\tdate_last_updated as timestamp,\n\t\tdate_inserted as timestamp,\n\t\tlast_updated_by as string,\n\t\tinserted_by as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_prepare.pre_dim_vessel_type_group',\n\tformat: 'query') ~> vesseltype\nsource(output(\n\t\tunlname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select unlname from dwh_stage.p_unltable',\n\tformat: 'query') ~> unltable\ntcross filter(source_system == 'PARIS' && \ncode_type_id == 113) ~> AgreementType\nAgreementType select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_agt' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefAgreementType\ntcross filter(source_system=='PARIS' && \n code_type_id== 106) ~> BusinessArea\nBusinessArea select(mapColumn(\n\t\teach(match(name=='target_code'||name=='source_code_key'),\n\t\t\t$$+'_bua' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefBusinessArea\ntcross filter(source_system== 'PARIS'  \n&& code_type_id  == 45) ~> VesselSubType\nVesselSubType select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_sub_type' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefVesselSubType\nica derive(icastdate_exchange = case(icastdate  > currentDate(),currentDate(),\r\ncase(icastdate < (toDate('01011978','dd/MM/yyyy')),toDate('01011978','dd/MM/yyyy'),icastdate))) ~> icastdateExchange\nicaoba, obbtable join(obaobno == obbobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter((coalesce(icaendate,currentTimestamp()) > coalesce(obbstdate, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(icaendate,currentTimestamp()) < coalesce(obbendate, addDays(currentTimestamp(), 36500)))) ~> icaendateobb\nsubtypevesseltype, agatable join(icaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaaga\nagaAgtype derive(rob_vessel_type_3ltr = coalesce(target_code_sub_type,'N/A'),\n\t\trob_vessel_type_desc = coalesce(target_description_sub_type,'Not Applicable'),\n\t\trob_object_key = case(obaobno == toDecimal(null()),toString(null()),concat('P',toString(obaobno))),\n\t\trob_vessel_name = case(trim(obbname)==toString(null()), 'NOT APPLICABLE',upper(obbname)),\n\t\tggp_gard_group = case(trim(vtg_description) == toString(null()),'Not Applicable',substring(vtg_description,1,30)),\n\t\trob_imono = obaimono,\n\t\tagreement_type = target_code_agt,\n\t\tagreement_type_desc = target_description_agt,\n\t\trob_non_vessel_ind = case(trim(obbvescod)=='900'||trim(obbvescod)=='999' ||trim(obbvescod)=='910' && iifNull(obaimono,0)==0, 'Y','N')) ~> ExpressionRob\nicaaga, xrefAgreementType join(toString(agabusndiv) == source_code_key_agt,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> agaAgtype\nExpressionRob, stariskgroup lookup(ExpressionRob@agreement_type == stariskgroup@agreement_type,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpStaRiskGroup\nicaendateobb, xrefVesselSubType join(trim(upper(obbcefoty)) == trim(upper(source_code_key_sub_type)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> obbsubtype\nLkpStaRiskGroup derive(gard_vsl_type_grp_code = case(in(['CHA','SQS'],ExpressionRob@agreement_type),ExpressionRob@agreement_type, \r\ncase(in(['BU', 'OP', 'CO'],risk_group_code),risk_group_code, toString(null()))),\n\t\tgard_vsl_type_group_desc = case(in(['CHA','SQS'],ExpressionRob@agreement_type),agreement_type_desc, \r\ncase(in(['BU', 'OP', 'CO'],risk_group_code),risk_group_code, toString(null())))) ~> ExpressionVslgrp\nExpressionVslgrp, lloydsevessel lookup(obaimono == imo,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpLoydsVessel\nLkpLoydsVessel derive(built_year_calc = case(greatest(toInteger(coalesce(obbbuiltyear,0)),toInteger(coalesce(obaorgbui,0)))==0,case(isNull(year_of_build)==true(),\r\ntoInteger(toString(currentTimestamp(),'yyyy'))-10,toInteger(year_of_build)),\r\ngreatest(toInteger(obbbuiltyear),toInteger(obaorgbui)))) ~> ExpressionBuiltYearCalc\nExpressionBuiltYearCalc derive(vessel_age = ((toInteger(toString(currentTimestamp(),'yyyy'))-built_year_calc)\r\n- (6 - (toInteger(toString(currentTimestamp(),'MM'))/12)))) ~> ExpVesselAge\nicastdateExchange, obatable join(icaobno == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaoba\nobbsubtype, dimvesseltype join(target_code_sub_type == vtg_key,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> subtypevesseltype\nvesseltype select(mapColumn(\n\t\tvtg_key,\n\t\tvtg_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimvesseltype\nDerivedColumn1 select(mapColumn(\n\t\trob_object_key,\n\t\trob_vessel_type_3ltr,\n\t\trob_vessel_type_desc,\n\t\trob_vessel_name,\n\t\tggp_gard_group,\n\t\trob_imono,\n\t\trob_vessel_age = vessel_age,\n\t\trob_tonnage_dw = obbdwt,\n\t\trob_tonnage_gross = obbgrt,\n\t\trob_signal_letters = obacallno,\n\t\trob_no_of_passengers = obbnoofpax,\n\t\trob_built_year = obbbuiltyear,\n\t\trob_built_year_calc = built_year_calc,\n\t\tgard_vsl_type_grp_2_int_code = gard_vsl_type_grp_code,\n\t\tgard_vsl_type_grp_2_int_desc = gard_vsl_type_group_desc,\n\t\tgard_vsl_type_grp_2_ext_code = gard_vsl_type_grp_code,\n\t\tgard_vsl_type_grp_2_ext_desc = gard_vsl_type_group_desc,\n\t\trob_port_of_registry,\n\t\trob_class = target_code_class,\n\t\trob_class_desc = target_description_class,\n\t\trob_flag_code = target_code_flag,\n\t\trob_flag_desc = target_description_flag,\n\t\trob_mou_type,\n\t\trob_pk_key = icaicaid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> tmp\ntcross select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'||name=='source_system'||name=='code_type_id'),\n\t\t\t$$+'_flag' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefFlag\ntcross select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'||name=='source_system'||name=='code_type_id'),\n\t\t\t$$+'_class' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefclass\nconstant, xrefFlag lookup(source_system == source_system_flag\n\t&& obbvesisolan == source_code_key_flag\n\t&& code_type_id_100_flag == code_type_id_flag,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> flag\nExpVesselAge derive(code_type_id_100_flag = 100,\n\t\tcode_type_id_108_class = 108,\n\t\tsource_system = 'Paris',\n\t\trob_mou_type = 'Not Applicable') ~> constant\nflag, xrefclass lookup(source_system == source_system_class\n\t&& obbsocity == source_code_key_class\n\t&& code_type_id_108_class == toDecimal(source_code_key_class),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> class\nclass, unltable lookup(obbportunlid == unlname,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lkpunl\nlkpunl derive(rob_port_of_registry = substring(unlname,1,60),\n\t\tobbbuiltyear = toInteger(obbbuiltyear),\n\t\trob_object_group = \r\ncase(\r\n    in(['CHA','SQS'],gard_vsl_type_grp_code) && in(['BU','OP','CO'],risk_group_code),\r\ncase(\r\n    rob_non_vessel_ind=='Y','Non Vessel Coverage'),\r\n in(['N/A','ZZZ'],rob_vessel_type_3ltr) && coalesce(obbgrt,0)==0,\r\n    'Non Vessel Coverage',gard_vsl_type_grp_code),\n\t\trob_object_category = \r\ncase(\r\n    in(['CHA','SQS'],gard_vsl_type_grp_code), 'Other',\r\n    in(['BU','OP','CO'],risk_group_code), 'Other',\r\n    rob_non_vessel_ind=='Y','Other',\r\n    in(['N/A','ZZZ'],rob_vessel_type_3ltr) && coalesce(obbgrt,0)==0,'Other',\r\n    'Vessels')\r\n) ~> DerivedColumn1\ntmp alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tpk_key as string,\n\t\trob_vessel_age as integer,\n\t\trob_vessel_name as string,\n\t\trob_imono as string,\n\t\tgard_vsl_type_grp_3_int_code as string,\n\t\tdeleted_ind as string,\n\t\tgard_vsl_type_grp_2_int_desc as string,\n\t\trob_port_of_registry as string,\n\t\trob_flag_desc as string,\n\t\tggp_gard_group as string,\n\t\tgard_vsl_type_grp_2_ext_desc as string,\n\t\tgard_vsl_type_grp_3_ext_code as string,\n\t\tgard_vsl_type_grp_6_int_code as string,\n\t\tdate_last_updated as timestamp,\n\t\trob_built_year_calc as integer,\n\t\trob_no_of_passengers as integer,\n\t\tgard_vsl_type_grp_3_ext_desc as string,\n\t\trob_object_category as string,\n\t\trob_flag_code as string,\n\t\trob_class as string,\n\t\tdate_inserted as timestamp,\n\t\trob_class_desc as string,\n\t\tgard_vsl_type_grp_6_ext_desc as string,\n\t\tggp_key as string,\n\t\trob_built_year as integer,\n\t\trob_vessel_type_3ltr as string,\n\t\trob_vessel_type_desc as string,\n\t\tgard_vsl_type_grp_2_ext_code as string,\n\t\tgard_vsl_type_grp_6_ext_code as string,\n\t\tgard_vsl_type_grp_3_int_desc as string,\n\t\trob_tonnage_gross as integer,\n\t\trob_tonnage_dw as integer,\n\t\trob_mou_type as string,\n\t\trob_class2_desc as string,\n\t\trob_mou_location as string,\n\t\tgard_vsl_type_grp_2_int_code as string,\n\t\trob_reg_owner_name as string,\n\t\trob_class2 as string,\n\t\trob_signal_letters as string,\n\t\tinserted_by as string,\n\t\trob_object_group as string,\n\t\tlast_updated_by as string,\n\t\tgard_vsl_type_grp_6_int_desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['pk_key'],\n\tformat: 'table',\n\tmapColumn(\n\t\tpk_key = rob_pk_key,\n\t\trob_vessel_age,\n\t\trob_vessel_name,\n\t\tgard_vsl_type_grp_2_int_desc,\n\t\trob_port_of_registry,\n\t\trob_flag_desc,\n\t\tggp_gard_group,\n\t\trob_built_year_calc,\n\t\trob_no_of_passengers,\n\t\trob_flag_code,\n\t\trob_class,\n\t\trob_class_desc,\n\t\trob_built_year,\n\t\trob_vessel_type_3ltr,\n\t\trob_vessel_type_desc,\n\t\tgard_vsl_type_grp_2_ext_code,\n\t\trob_tonnage_gross,\n\t\trob_tonnage_dw,\n\t\trob_mou_type,\n\t\tgard_vsl_type_grp_2_int_code,\n\t\trob_signal_letters\n\t)) ~> sinkpredimobjectvessel"
		}
	}
}