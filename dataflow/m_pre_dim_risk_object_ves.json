{
	"name": "m_pre_dim_risk_object_ves",
	"properties": {
		"description": "Start testing how to make the risk_object. Starting on PA",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tcross"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ica"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obbtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "stariskgroup"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lloydsevessel"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "vesseltype"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "unltable"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "AgreementType",
					"description": "code_type_id == 113"
				},
				{
					"name": "xrefAgreementType"
				},
				{
					"name": "BusinessArea",
					"description": " code_type_id== 106"
				},
				{
					"name": "xrefBusinessArea"
				},
				{
					"name": "VesselSubType",
					"description": "source_system== 'PARIS' && code_type_id == 45"
				},
				{
					"name": "xrefVesselSubType",
					"description": "With columns 'source_code_key_sub_type, target_code_sub_type, target_description_sub_type'"
				},
				{
					"name": "icastdateExchange",
					"description": "Creating Icastdate_exchange"
				},
				{
					"name": "obaobb"
				},
				{
					"name": "icaendateobb"
				},
				{
					"name": "icaaga"
				},
				{
					"name": "ExpressionRob"
				},
				{
					"name": "agaAgtype"
				},
				{
					"name": "ExAgreement4"
				},
				{
					"name": "LkpStaRiskGroup"
				},
				{
					"name": "obbsubtype"
				},
				{
					"name": "ExpressionVslgrp"
				},
				{
					"name": "LkpLoydsVessel"
				},
				{
					"name": "ExpressionBuiltYearCalc"
				},
				{
					"name": "ExpVesselAge"
				},
				{
					"name": "icaoba"
				},
				{
					"name": "subtypevesseltype"
				},
				{
					"name": "dimvesseltype"
				},
				{
					"name": "tmp"
				},
				{
					"name": "xrefFlag"
				},
				{
					"name": "xrefclass"
				},
				{
					"name": "flag"
				},
				{
					"name": "constant"
				},
				{
					"name": "class"
				},
				{
					"name": "lkpunl"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"script": "source(output(\n\t\tcode_type_id as long,\n\t\tcode2 as string,\n\t\ttarget_description as string,\n\t\tsource_system as string,\n\t\tom_x_ref as string,\n\t\ttarget_code as string,\n\t\tcode_type as string,\n\t\tsource_code_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.t_crossreference',\n\tformat: 'query') ~> tcross\nsource(output(\n\t\ticaobno as integer,\n\t\ticastdate as date,\n\t\ticaendate as date,\n\t\ticatotamt as long,\n\t\ticaourshare as decimal(28,10),\n\t\ticacadate as date,\n\t\ticaicaid as string,\n\t\ticachdate as date,\n\t\ticainaid as string,\n\t\ticaagaid as string,\n\t\ticapmlcurr as string,\n\t\ticapmlamt as long,\n\t\ticaeoamt as long,\n\t\ticaprovst as integer,\n\t\ticastat3 as string,\n\t\ticaintrate as decimal(28,10),\n\t\ticaintosprem as decimal(28,10),\n\t\ticaintcurr as string,\n\t\ticacrdate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaobno,\\n\t\ticastdate,\\n\t\ticaendate,\\n\t\ticatotamt,\\n\t\ticaourshare,\\n\t\ticacadate,\\n\t\ticaicaid,\\n\t\ticachdate,\\n\t\ticainaid,\\n\t\ticaagaid,\\n\t\ticapmlcurr,\\n\t\ticapmlamt,\\n\t\ticaeoamt,\\n\t\ticaprovst,\\n\t\ticastat3,\\n\t\ticaintrate,\\n\t\ticaintosprem,\\n\t\ticaintcurr,\\n\t\ticacrdate\\nfrom dwh_stage.p_icatable',\n\tformat: 'query') ~> ica\nsource(output(\n\t\tagaagaid as string,\n\t\tagastdate as date,\n\t\tagabusnsec as integer,\n\t\tagabusndiv as integer,\n\t\tagabusncla as integer,\n\t\tagastat2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \tagaagaid,\\n\t\tagastdate,\\n\t\tagabusnsec,\\n\t\tagabusndiv,\\n\t\tagabusncla,\\n\t\tagastat2\\nfrom dwh_stage.p_agatable',\n\tformat: 'query') ~> agatable\nsource(output(\n\t\tobbobno as integer,\n\t\tobbstdate as date,\n\t\tobbendate as date,\n\t\tobbcefoty as string,\n\t\tobbgrt as integer,\n\t\tobbname as string,\n\t\tobbclass as string,\n\t\tobbbuiltyear as short,\n\t\tobbdwt as integer,\n\t\tobbformt as integer,\n\t\tobbvesisolan as string,\n\t\tobbadr1 as string,\n\t\tobbsocity as string,\n\t\tobbnoofpax as integer,\n\t\tobbportunlid as string,\n\t\tobbvescod as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select obbobno,\\n\t\tobbstdate,\\n\t\tobbendate,\\n\t\tobbcefoty,\\n\t\tobbgrt,\\n\t\tobbname,\\n\t\tobbclass,\\n\t\tobbbuiltyear,\\n\t\tobbdwt,\\n\t\tobbformt,\\n\t\tobbvesisolan,\\n\t\tobbadr1,\\n\t\tobbsocity,\\n\t\tobbnoofpax,\\n\t\tobbportunlid,\\n\t\tobbvescod\\nfrom dwh_stage.p_obbtable',\n\tformat: 'query') ~> obbtable\nsource(output(\n\t\tobaobno as integer,\n\t\tobaimono as integer,\n\t\tobacallno as string,\n\t\tobaorgbui as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obaobno,\\n\t\tobaimono,\\n\t\tobacallno,\\n\t\tobaorgbui\\nfrom dwh_stage.p_obatable',\n\tformat: 'query') ~> obatable\nsource(output(\n\t\tinserted_date as date,\n\t\tupdated_date as date,\n\t\trisk_group_sort as long,\n\t\tcoverage_code as string,\n\t\tcoverage_desc as string,\n\t\trisk_group_code as string,\n\t\tsegment_code as string,\n\t\tagreement_type as string,\n\t\tbusiness_area as string,\n\t\treinsurance_pgm_code as string,\n\t\trisk_group_desc as string,\n\t\tpk_risk_group as long,\n\t\treinsurance_pgm_desc as string,\n\t\tsegment_desc as string,\n\t\tmutual_fixed as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select *from dwh_stage.sta_risk_group',\n\tformat: 'query') ~> stariskgroup\nsource(output(\n\t\timo as integer,\n\t\tyear_of_build as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \timo,\\n\t\tyear_of_build \\nfrom dwh_stage.lloyds_vessel',\n\tformat: 'query') ~> lloydsevessel\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: '\tfp_3_ltr_code,\\n\t\tvsl_gard_group,\\n\t\tpk_vessel_type_group\\nfrom dwh_stage.dim_vessel_type',\n\tformat: 'query') ~> vesseltype\nsource(output(\n\t\tunlname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select unlname from dwh_stage.p_unltable',\n\tformat: 'query') ~> unltable\ntcross filter(source_system == 'PARIS' && \ncode_type_id == 113) ~> AgreementType\nAgreementType select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_agt' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefAgreementType\ntcross filter(source_system=='PARIS' && \n code_type_id== 106) ~> BusinessArea\nBusinessArea select(mapColumn(\n\t\teach(match(name=='target_code'||name=='source_code_key'),\n\t\t\t$$+'_bua' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefBusinessArea\ntcross filter(source_system== 'PARIS'  \n&& code_type_id  == 45) ~> VesselSubType\nVesselSubType select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_sub_type' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefVesselSubType\nica derive(icastdate_exchange = case(icastdate  > currentTimestamp(),currentTimestamp(),\r\ncase(icastdate < toTimestamp('01011978','dd/mm/yyyy'),toTimestamp('01011978','dd/mm/yyyy'),icastdate))) ~> icastdateExchange\nicaoba, obbtable join(obaobno == obbobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter((coalesce(icaendate,currentTimestamp()) > coalesce(obbstdate, addDays(currentTimestamp(), -36500))) &&\r\n(coalesce(icaendate,currentTimestamp()) < coalesce(obbendate, addDays(currentTimestamp(), 36500)))) ~> icaendateobb\nsubtypevesseltype, agatable join(icaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaaga\nagaAgtype derive(rob_vessel_type_3ltr = coalesce(target_code_sub_type,'N/A'),\n\t\trob_vessel_type_desc = coalesce(target_description_sub_type,'Not Applicable'),\n\t\trob_object_key = case(obaobno == toDecimal(null()),toString(null()),concat('P',toString(obaobno))),\n\t\trob_vessel_name = case(trim(obbname)==toString(null()), 'NOT APPLICABLE',upper(obbname)),\n\t\tggp_gard_group = case(trim(vsl_gard_group) == toString(null()),'Not Applicable',substring(vsl_gard_group,1,30)),\n\t\tggp_key = case(trim(toString(pk_vessel_type_group)) == toString(null()), 'N/A' ,toString(pk_vessel_type_group)),\n\t\trob_imono = obaimono) ~> ExpressionRob\nicaaga, xrefAgreementType join(toString(agabusndiv) == source_code_key_agt,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> agaAgtype\nExpressionRob derive(agreement_type = target_code_agt,\n\t\tagreement_type_desc = target_description_agt) ~> ExAgreement4\nExAgreement4, stariskgroup lookup(ExAgreement4@agreement_type == stariskgroup@agreement_type,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpStaRiskGroup\nicaendateobb, xrefVesselSubType join(trim(upper(obbcefoty)) == trim(upper(source_code_key_sub_type)),\n\tjoinType:'left',\n\tbroadcast: 'auto')~> obbsubtype\nLkpStaRiskGroup derive(gard_vsl_type_grp_code = case(in(['CHA','SQS'],ExAgreement4@agreement_type),ExAgreement4@agreement_type, \r\ncase(in(['BU', 'OP', 'CO'],risk_group_code),risk_group_code, toString(null()))),\n\t\tgard_vsl_type_group_desc = case(in(['CHA','SQS'],ExAgreement4@agreement_type),agreement_type_desc, \r\ncase(in(['BU', 'OP', 'CO'],risk_group_code),risk_group_code, toString(null())))) ~> ExpressionVslgrp\nExpressionVslgrp, lloydsevessel lookup(obaimono == imo,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LkpLoydsVessel\nLkpLoydsVessel derive(built_year_calc = case(greatest(coalesce(toDecimal(obbbuiltyear),toDecimal(0)),coalesce(toDecimal(obaorgbui),toDecimal(0)))==0,\r\ncase(year_of_build == toDecimal(null()),toDecimal(toDate('yyyy')-10),\r\nyear_of_build)\r\n,greatest(obbbuiltyear,obaorgbui))) ~> ExpressionBuiltYearCalc\nExpressionBuiltYearCalc derive(vessel_age = (((toDecimal(toDate('yyyy')) - built_year_calc))\r\n- ((6 - toDecimal(toString(currentDate('mm')))/12)))) ~> ExpVesselAge\nicastdateExchange, obatable join(icaobno == obaobno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icaoba\nobbsubtype, dimvesseltype join(target_code_sub_type == fp_3_ltr_code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> subtypevesseltype\nvesseltype select(mapColumn(\n\t\tfp_3_ltr_code,\n\t\tvsl_gard_group,\n\t\tpk_vessel_type_group\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dimvesseltype\nDerivedColumn1 select(mapColumn(\n\t\trob_object_key,\n\t\trob_vessel_type_3ltr,\n\t\trob_vessel_type_desc,\n\t\trob_vessel_name,\n\t\tggp_key,\n\t\tggp_gard_group,\n\t\trob_imono,\n\t\trob_vessel_age = vessel_age,\n\t\trob_tonnage_dw = obbdwt,\n\t\trob_tonnage_gross = obbgrt,\n\t\trob_signal_letters = obacallno,\n\t\trob_no_of_passengers = obbnoofpax,\n\t\trob_built_year = obbbuiltyear,\n\t\trob_built_year_calc = built_year_calc,\n\t\tgard_vsl_type_grp_2_int_code = gard_vsl_type_grp_code,\n\t\tgard_vsl_type_grp_2_int_desc = gard_vsl_type_group_desc,\n\t\tgard_vsl_type_grp_2_ext_code = gard_vsl_type_grp_code,\n\t\trob_port_of_register = unlname,\n\t\trob_port_of_registry,\n\t\trob_class = target_code_class,\n\t\trob_class_desc = target_description_class,\n\t\trob_flag = target_code_flag,\n\t\trob_flag_desc = target_description_flag,\n\t\trob_mou_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tmp\ntcross select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'||name=='source_system'||name=='code_type_id'),\n\t\t\t$$+'_flag' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefFlag\ntcross select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'||name=='source_system'||name=='code_type_id'),\n\t\t\t$$+'_class' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefclass\nconstant, xrefFlag lookup(source_system == source_system_flag\n\t&& obbvesisolan == source_code_key_flag\n\t&& code_type_id_100_flag == code_type_id_flag,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> flag\nExpVesselAge derive(code_type_id_100_flag = 100,\n\t\tcode_type_id_108_class = 108,\n\t\tsource_system = 'Paris',\n\t\trob_mou_type = 'Not Applicable') ~> constant\nflag, xrefclass lookup(source_system == source_system_class\n\t&& obbsocity == source_code_key_class\n\t&& code_type_id_108_class == toDecimal(source_code_key_class),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> class\nclass, unltable lookup(obbportunlid == unlname,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> lkpunl\nlkpunl derive(rob_port_of_registry = substring(unlname,1,60)) ~> DerivedColumn1"
		}
	}
}