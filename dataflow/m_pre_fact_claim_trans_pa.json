{
	"name": "m_pre_fact_claim_trans_pa",
	"properties": {
		"description": "Pre fact mapping for claim transactions, excluding guarantees and advance payments.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "mapsys",
					"description": "source_system=='PARIS'"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "icatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obbtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agztable"
				},
				{
					"name": "faltable"
				},
				{
					"name": "Lcatable"
				},
				{
					"name": "lcctable"
				},
				{
					"name": "labtable"
				},
				{
					"name": "inatable"
				},
				{
					"name": "filtable"
				},
				{
					"name": "exchrate"
				},
				{
					"name": "lcctablesubclm"
				},
				{
					"name": "predimpartner"
				},
				{
					"name": "qtbtable"
				},
				{
					"name": "predimclaimtype"
				},
				{
					"name": "predimsubclaim"
				}
			],
			"sinks": [
				{
					"name": "prefactclaimtranspa"
				}
			],
			"transformations": [
				{
					"name": "xrefCoverage"
				},
				{
					"name": "xrefBusinessarea"
				},
				{
					"name": "xrefExpense"
				},
				{
					"name": "expense"
				},
				{
					"name": "bua"
				},
				{
					"name": "cov"
				},
				{
					"name": "clmcat"
				},
				{
					"name": "xrefClaimcategory"
				},
				{
					"name": "agttype"
				},
				{
					"name": "xrefAgreementtype"
				},
				{
					"name": "fapcurr"
				},
				{
					"name": "xrefCurrencyFAL"
				},
				{
					"name": "icaoba"
				},
				{
					"name": "obaobb"
				},
				{
					"name": "icaendateObb"
				},
				{
					"name": "icaexchangedate"
				},
				{
					"name": "riskobject"
				},
				{
					"name": "agaagz"
				},
				{
					"name": "againa"
				},
				{
					"name": "mutualfixedind"
				},
				{
					"name": "falfil"
				},
				{
					"name": "falLca"
				},
				{
					"name": "fallab"
				},
				{
					"name": "falica"
				},
				{
					"name": "falina"
				},
				{
					"name": "falcurr1"
				},
				{
					"name": "falcurr2"
				},
				{
					"name": "hlpexchangeratetousd"
				},
				{
					"name": "agrtype"
				},
				{
					"name": "agrcov"
				},
				{
					"name": "covexpense"
				},
				{
					"name": "expensebua"
				},
				{
					"name": "buaclmcat"
				},
				{
					"name": "lccsubclmtable"
				},
				{
					"name": "fallccmain"
				},
				{
					"name": "mainstream"
				},
				{
					"name": "businesskeys",
					"description": "business keys and some other columns needed for lookups or further expressions."
				},
				{
					"name": "claimamounts",
					"description": "calculating all amounts"
				},
				{
					"name": "claimamountsexchanged",
					"description": "exchanging all amounts to _stat or _usd"
				},
				{
					"name": "vesseltype"
				},
				{
					"name": "xrefVesseltype"
				},
				{
					"name": "employee"
				},
				{
					"name": "xrefUnderwriter"
				},
				{
					"name": "country"
				},
				{
					"name": "xrefCountry"
				},
				{
					"name": "xrefClaimhandler"
				},
				{
					"name": "underwriterlkp"
				},
				{
					"name": "claimhandlerlkp"
				},
				{
					"name": "vesseltyplkp"
				},
				{
					"name": "countrylkp"
				},
				{
					"name": "predimsubclaimlkp"
				},
				{
					"name": "brokerlkp"
				},
				{
					"name": "predimclaimtypelkp"
				},
				{
					"name": "notapplicable"
				}
			],
			"script": "source(output(\n\t\tsource_code_key as string,\n\t\tsource_system as string,\n\t\tcode_type_id as long,\n\t\ttarget_code as string,\n\t\ttarget_description as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select source_code_key,source_system, code_type_id, target_code, target_description from dwh_stage.t_crossreference where source_system=\\'PARIS\\'',\n\tformat: 'query') ~> mapsys\nsource(output(\n\t\ticaicaid as string,\n\t\ticainaid as string,\n\t\ticastdate as date,\n\t\ticaendate as date,\n\t\ticaagaid as string,\n\t\ticaobno as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaicaid, icainaid, icastdate, icaendate, icaagaid, icaobno from dwh_stage.p_icatable',\n\tformat: 'query') ~> icatable\nsource(output(\n\t\tobbobbid as string,\n\t\tobbobno as integer,\n\t\tobbstdate as date,\n\t\tobbendate as date,\n\t\tobbcefoty as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obbobbid, obbobno, obbstdate, obbendate, obbcefoty from dwh_stage.p_obbtable',\n\tformat: 'query') ~> obbtable\nsource(output(\n\t\tobaobno as integer,\n\t\tobaimono as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obaobno, obaimono from dwh_stage.p_obatable',\n\tformat: 'query') ~> obatable\nsource(output(\n\t\tagaagaid as string,\n\t\tagaiyear as short,\n\t\tagaagno as integer,\n\t\tagabusndiv as integer,\n\t\tagabusnsec as integer,\n\t\tagabusncla as integer,\n\t\tagasource as long,\n\t\tagaorgins as long,\n\t\tagastdate as date,\n\t\tagauwsign as string,\n\t\tagaareacd as string,\n\t\tagaisic as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agaagaid, agaiyear, agaagno, agabusndiv, agabusnsec, agabusncla, agasource, agaorgins, agastdate, agauwsign, agaareacd, agaisic from dwh_stage.p_agatable',\n\tformat: 'query') ~> agatable\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> agztable\nsource(output(\n\t\tfalfalid as string,\n\t\tfalclmadrpeaid as integer,\n\t\tfalcovshare as decimal(28,10),\n\t\tfallcaid as string,\n\t\tfalacstat as string,\n\t\tfalmark as string,\n\t\tfallccid as string,\n\t\tfalcathbtid as integer,\n\t\tfalpgqid as string,\n\t\tfaladvcod as integer,\n\t\tfalas as decimal(28,10),\n\t\tfalbillingno as integer,\n\t\tfalreccur as string,\n\t\tfalagno as integer,\n\t\tfaluwbid as string,\n\t\tfalicaid as string,\n\t\tfalolddocno as integer,\n\t\tfalsettled as decimal(28,10),\n\t\tfaluwndisc as decimal(28,10),\n\t\tfalaccsw1 as string,\n\t\tfalagaid as string,\n\t\tfalbroker as integer,\n\t\tfalcomcod as string,\n\t\tfaloutcode as integer,\n\t\tfalfilid as string,\n\t\tfalpglbaccno as integer,\n\t\tfalshare as decimal(28,10),\n\t\tfalpaycod as integer,\n\t\tfalmailaddress as string,\n\t\tfalcedsecurno as integer,\n\t\tfalaccdescr as string,\n\t\tfalgenamtp as decimal(28,10),\n\t\tfalelremitdescr as string,\n\t\tfalcedent as integer,\n\t\tfaldedtamtp as decimal(28,10),\n\t\tfaliyear as integer,\n\t\tfalplgroup as integer,\n\t\tfalobno as integer,\n\t\tfalclmcat as string,\n\t\tfalsource as integer,\n\t\tfalaclcode as string,\n\t\tfalfblid as string,\n\t\tfalownret as decimal(28,10),\n\t\tfalln5 as integer,\n\t\tfalaccamtp as decimal(28,10),\n\t\tfalduedate as date,\n\t\tfalcctid as string,\n\t\tfalclmreserve as decimal(28,10),\n\t\tfalnsci as decimal(28,10),\n\t\tfaloutform as string,\n\t\tfaloridas as date,\n\t\tfalgencurr as string,\n\t\tfalrectamtp as decimal(28,10),\n\t\tfalbordadr as integer,\n\t\tfalbalance as decimal(28,10),\n\t\tfalinaid as string,\n\t\tfalcedsecisolan as string,\n\t\tfalduest as integer,\n\t\tfalaccpara as string,\n\t\tfalcurr as string,\n\t\tfaldescr50 as string,\n\t\tfaloutstanding as decimal(28,10),\n\t\tfaliuwid as string,\n\t\tfalbaldescr as string,\n\t\tfaldedcur as string,\n\t\tfalreaccn as string,\n\t\tfalrecamtp as decimal(28,10),\n\t\tfaldedamtp as decimal(28,10),\n\t\tfalinout as string,\n\t\tfalbordref as string,\n\t\tfalcashco as integer,\n\t\tfalaccadrpeaid as integer,\n\t\tfalnreaccnynsw as string,\n\t\tfalpglb as decimal(28,10),\n\t\tfalorgins as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> faltable\nsource(output(\n\t\tlcacefocc as string,\n\t\tlcacrsign as string,\n\t\tlcaicaid as string,\n\t\tlcalabid as string,\n\t\tlcalcaid as string,\n\t\tlcatrtmnco as integer,\n\t\tlcauwsign as string,\n\t\t{} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Lcatable\nsource(output(\n\t\tlccpilotname as string,\n\t\tlccclmtype as string,\n\t\tlcccarriagemethod as string,\n\t\tlccmaffectarea as string,\n\t\tlcccausetxt as string,\n\t\tlccfduty as integer,\n\t\tlccembarkiso as string,\n\t\tlcclcaid as string,\n\t\tlccrecovyn as string,\n\t\tlccgrosssettle as decimal(28,10),\n\t\tlccclmdet as string,\n\t\tlccadddescrlev4 as string,\n\t\tlccdisembarkeddate as date,\n\t\tlccruleofcov as string,\n\t\tlccmafareatxt as string,\n\t\tlccrule as string,\n\t\tlccdecision as integer,\n\t\tlccalleged2 as string,\n\t\tlccmanos as string,\n\t\tlccvisiblcccid as string,\n\t\tlccvessdevi as string,\n\t\tlccrecovcom as string,\n\t\tlccembarkedat as string,\n\t\tlccadditionaltxt as string,\n\t\tlccclupcommenced as integer,\n\t\tlccallegedtxt as string,\n\t\tlccmanouver as string,\n\t\tlccembarkeddate as date,\n\t\tlcchandlebyclms as string,\n\t\tlcctrtmco as integer,\n\t\tlccrecovccvid as integer,\n\t\tlccrecovcurr as string,\n\t\tlccothshipname as string,\n\t\tlccadddescrlev3 as string,\n\t\tlccln6 as integer,\n\t\tlccclupcompleted as integer,\n\t\tlcccause as string,\n\t\tlccvoyagefr as string,\n\t\tlcctext as string,\n\t\tlccloconvess as string,\n\t\tlccrolecat as string,\n\t\tlccamtdispunknown as string,\n\t\tlcccargotype as string,\n\t\tlccpeaid as integer,\n\t\tlccadjuster as string,\n\t\tlccvoyfriso as string,\n\t\tlccpilotonboard as string,\n\t\tlccdisembarkedat as string,\n\t\tlccemergevac as string,\n\t\tlccgrossamount as decimal(28,10),\n\t\tlccloconvesstxt as string,\n\t\tlccinitcontpoas as string,\n\t\tlcccurr as string,\n\t\tlccjurisdiction as string,\n\t\tlccalleged1 as string,\n\t\tlccamount as decimal(28,10),\n\t\tlccadddescrlev1 as string,\n\t\tlccdisembarkiso as string,\n\t\tlccclmamtynsw as string,\n\t\tlccvoyageto as string,\n\t\tlccuwsign as string,\n\t\tlcclccid as string,\n\t\tlccladid as integer,\n\t\tlccpollutant as string,\n\t\tlccconseq as string,\n\t\tlccinlitigation as string,\n\t\tlccmfkey as string,\n\t\tlcclightcccid as string,\n\t\tlccnpersons as integer,\n\t\tlccadddescrlev2 as string,\n\t\tlccsettlement as decimal(28,10),\n\t\tlccvoytoiso as string,\n\t\tlccconseqos as string,\n\t\tlccrecovery as decimal(28,10),\n\t\tlccradnavynsw as string,\n\t\tlccremarks as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> lcctable\nsource(output(\n\t\tlablabid as string,\n\t\tlabtime as integer,\n\t\tlablodescr as string,\n\t\tlabmainev as string,\n\t\tlabomclmtype as string,\n\t\tlabagtype as integer,\n\t\tlablaaid as string,\n\t\tlabbigevent as string,\n\t\tlabknvmark as string,\n\t\tlabportcccid as string,\n\t\tlabevno as integer,\n\t\tlabclmsta as string,\n\t\tlabportunlid as string,\n\t\tlabareacd as string,\n\t\tlabtzone as string,\n\t\tlabclmdate as date,\n\t\tlabacarea as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> labtable\nsource(output(\n\t\tinaslipref as string,\n\t\tinaisaid as string,\n\t\tinaseasonynsw as string,\n\t\tinabusnsubcla as integer,\n\t\tinarentxt as string,\n\t\tinainaid as string,\n\t\tinavoyagededynsw as string,\n\t\tinamutual as string,\n\t\tinalostcode as string,\n\t\tinacedent as integer,\n\t\tinauwradrpeaid as integer,\n\t\tinalusign as string,\n\t\tinaas as string,\n\t\tinaetcpremium as string,\n\t\tinalosttxt35 as string,\n\t\tinanatsw as string,\n\t\tinacapoty as integer,\n\t\tinaretyp as integer,\n\t\tinaobno as integer,\n\t\tinawarranty2 as integer,\n\t\tinaas as integer,\n\t\tinacondset as string,\n\t\tinainno as integer,\n\t\tinaseasonnote as string,\n\t\tinalosstxt35 as string,\n\t\tinaoperatingname as string,\n\t\tinaoperator as integer,\n\t\tinaitemno as string,\n\t\tinaclmadrpeaid as integer,\n\t\tinaborind as string,\n\t\tinaas as string,\n\t\tinanopers as integer,\n\t\tinaebusnsubcla as integer,\n\t\tinainktp as string,\n\t\tinareinynsw as string,\n\t\tinafileref as integer,\n\t\tinaob100e as string,\n\t\tinarencod as integer,\n\t\tinagroup as integer,\n\t\tinaimpexp as integer,\n\t\tinawarrsw as string,\n\t\tinacondco as integer,\n\t\tinarenewswitches as string,\n\t\tinaordertxt35 as string,\n\t\tinaoxrefid as string,\n\t\tinausecod as string,\n\t\tinaindex as integer,\n\t\tinaknvmark as string,\n\t\tinaaccadrpeaid as integer,\n\t\tinapayer as integer,\n\t\tinaseasonmonthp as decimal(28,10),\n\t\tinafortcode as integer,\n\t\tinaagaid as string,\n\t\tinasmallcraft as string,\n\t\tinasufix1 as string,\n\t\tinaag100e as string,\n\t\tinareinnoof as integer,\n\t\tinaetcdonedate as date,\n\t\tinatzone as string,\n\t\tinaclmlead as integer,\n\t\tinacrsign as string,\n\t\tinacrobbid as string,\n\t\tinareinshare as decimal(28,10),\n\t\tinaoxno as integer,\n\t\tinataxcod as string,\n\t\tinapiffotype as integer,\n\t\tinastat1 as string,\n\t\tinatocefo as string,\n\t\tinalocpolissued as string,\n\t\tinastopsettlement as string,\n\t\tinabusntyp as integer,\n\t\tinadwbsname as string,\n\t\tinamainin as string,\n\t\tinatrdescr as string,\n\t\tinacurr as string,\n\t\tinapnote as string,\n\t\tinacrdate as date,\n\t\tinapofid as string,\n\t\tinacshind as decimal(28,10),\n\t\tinaareacd as string,\n\t\tinaassetno as integer,\n\t\tinacroynsw as string,\n\t\tinaratind as decimal(28,10),\n\t\tinaludate as date,\n\t\tinadescr6 as string,\n\t\tinartlead as integer,\n\t\tinaordercode as string,\n\t\tinaiyear as integer,\n\t\tinapirdctype as integer,\n\t\tinacooroccynsw as string,\n\t\tinaas as string,\n\t\tinataxexternal as string,\n\t\tinarenfieldsman as string,\n\t\tinariscod as integer,\n\t\tinaitaid as string,\n\t\tinapas as decimal(28,10),\n\t\tinadescr7 as string,\n\t\tinatotind as decimal(28,10),\n\t\tinaratema as string,\n\t\tinaassetsubno as integer,\n\t\tinawarrenty as integer,\n\t\tinaetcdone as string,\n\t\tinaintrst as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> inatable\nsource(output(\n\t\tfilfilid as string,\n\t\tfilctrldate as date,\n\t\tfilcspas as string,\n\t\tfildistext35 as string,\n\t\tfildocmain as string,\n\t\tfilcdoctype as string,\n\t\tfilnoaccounting as string,\n\t\tfilexpstatus as string,\n\t\tfiloridas as date,\n\t\tfilcspbusndiv as integer,\n\t\tfilexpdate as date,\n\t\tfilgldate as date,\n\t\tfilcrstamp as string,\n\t\tfilacseq as integer,\n\t\tfilresig2 as integer,\n\t\tfilcsplimit as integer,\n\t\tfilcortyp as integer,\n\t\tfilagaid as string,\n\t\tfildocdate as date,\n\t\tfilcrdate as date,\n\t\tfilcadate as date,\n\t\tfilcasign as string,\n\t\tfildocn as integer,\n\t\tfilcordocn as integer,\n\t\tfilknvmark as string,\n\t\tfilingform as string,\n\t\tfilexternalref as string,\n\t\tfilcosig1 as string,\n\t\tfilvaldate as date,\n\t\tfilcfunc as string,\n\t\tfilglrunno as integer,\n\t\tfilctrlsign as string,\n\t\tfilcrsign as string,\n\t\tfildodate as date,\n\t\tfilcspcondgrp as integer,\n\t\tfilcspbusnfunc as string,\n\t\tfilcosig2 as string,\n\t\tfildostamp as string,\n\t\tfilacstat as string,\n\t\tfilcastamp as string,\n\t\tfilexpeosign as string,\n\t\tfillisig2 as string,\n\t\tfilorsign as string,\n\t\tfillisig1 as string,\n\t\tfilrefbase as integer,\n\t\tfilordate as date,\n\t\tfilresig1 as integer,\n\t\tfilorstamp as string,\n\t\tfilglstamp as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> filtable\nsource(output(\n\t\texchange_rate as decimal(28,10),\n\t\texchange_to_date as date,\n\t\texchange_from_date as date,\n\t\tfrom_currency_code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> exchrate\nsource(output(\n\t\tlccpilotname as string,\n\t\tlccclmtype as string,\n\t\tlcccarriagemethod as string,\n\t\tlccmaffectarea as string,\n\t\tlcccausetxt as string,\n\t\tlccfduty as integer,\n\t\tlccembarkiso as string,\n\t\tlcclcaid as string,\n\t\tlccrecovyn as string,\n\t\tlccgrosssettle as decimal(28,10),\n\t\tlccclmdet as string,\n\t\tlccadddescrlev4 as string,\n\t\tlccdisembarkeddate as date,\n\t\tlccruleofcov as string,\n\t\tlccmafareatxt as string,\n\t\tlccrule as string,\n\t\tlccdecision as integer,\n\t\tlccalleged2 as string,\n\t\tlccmanos as string,\n\t\tlccvisiblcccid as string,\n\t\tlccvessdevi as string,\n\t\tlccrecovcom as string,\n\t\tlccembarkedat as string,\n\t\tlccadditionaltxt as string,\n\t\tlccclupcommenced as integer,\n\t\tlccallegedtxt as string,\n\t\tlccmanouver as string,\n\t\tlccembarkeddate as date,\n\t\tlcchandlebyclms as string,\n\t\tlcctrtmco as integer,\n\t\tlccrecovccvid as integer,\n\t\tlccrecovcurr as string,\n\t\tlccothshipname as string,\n\t\tlccadddescrlev3 as string,\n\t\tlccln6 as integer,\n\t\tlccclupcompleted as integer,\n\t\tlcccause as string,\n\t\tlccvoyagefr as string,\n\t\tlcctext as string,\n\t\tlccloconvess as string,\n\t\tlccrolecat as string,\n\t\tlccamtdispunknown as string,\n\t\tlcccargotype as string,\n\t\tlccpeaid as integer,\n\t\tlccadjuster as string,\n\t\tlccvoyfriso as string,\n\t\tlccpilotonboard as string,\n\t\tlccdisembarkedat as string,\n\t\tlccemergevac as string,\n\t\tlccgrossamount as decimal(28,10),\n\t\tlccloconvesstxt as string,\n\t\tlccinitcontpoas as string,\n\t\tlcccurr as string,\n\t\tlccjurisdiction as string,\n\t\tlccalleged1 as string,\n\t\tlccamount as decimal(28,10),\n\t\tlccadddescrlev1 as string,\n\t\tlccdisembarkiso as string,\n\t\tlccclmamtynsw as string,\n\t\tlccvoyageto as string,\n\t\tlccuwsign as string,\n\t\tlcclccid as string,\n\t\tlccladid as integer,\n\t\tlccpollutant as string,\n\t\tlccconseq as string,\n\t\tlccinlitigation as string,\n\t\tlccmfkey as string,\n\t\tlcclightcccid as string,\n\t\tlccnpersons as integer,\n\t\tlccadddescrlev2 as string,\n\t\tlccsettlement as decimal(28,10),\n\t\tlccvoytoiso as string,\n\t\tlccconseqos as string,\n\t\tlccrecovery as decimal(28,10),\n\t\tlccradnavynsw as string,\n\t\tlccremarks as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> lcctablesubclm\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> predimpartner\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> qtbtable\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> predimclaimtype\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> predimsubclaim\ncov select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_cov' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCoverage\nbua select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_bua' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefBusinessarea\nexpense select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_expense' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefExpense\nmapsys filter(code_type_id==198) ~> expense\nmapsys filter(code_type_id==106) ~> bua\nmapsys filter(code_type_id==122) ~> cov\nmapsys filter(code_type_id==797) ~> clmcat\nclmcat select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_clmcat' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefClaimcategory\nmapsys filter(code_type_id==113) ~> agttype\nagttype select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_agttype' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefAgreementtype\nmapsys filter(code_type_id==124) ~> fapcurr\nfapcurr select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_fapcurr' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCurrencyFAL\nobatable, icatable join(obaobno == icaobno,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> icaoba\nicaoba, obbtable join(obaobno == obbobno,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter(lesserOrEqual(icaendate, coalesce(obbendate, toDate(toString(addDays(currentTimestamp(),-36500),'dd/mm/yyyy'))))\n && greaterOrEqual(icaendate, coalesce(obbendate, toDate(toString(addDays(currentTimestamp(),36500),'dd/mm/yyyy'))))) ~> icaendateObb\nicaendateObb derive(icaexchangedate = case(greaterOrEqual(icastdate, toDate(toString(currentTimestamp()),'dd/mm/yyyy')), toDate(toString(currentTimestamp()),'dd/mm/yyyy'), icastdate)) ~> icaexchangedate\nicaexchangedate select(mapColumn(\n\t\ticaicaid,\n\t\ticastdateexchange = icaexchangedate,\n\t\ticastdate,\n\t\tobaimono,\n\t\tobbcefoty,\n\t\ticachdate,\n\t\ticaourshare,\n\t\ticatotamt,\n\t\ticainaid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> riskobject\nagatable, agztable join(agaagaid == agzagzid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> agaagz\nagaagz, inatable join(inaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> againa\nagaina derive(busnareakey = case(toString(agabusndiv)=='4', concat(toString(agabusndiv),' - ',inamutual) , toString(agabusndiv) )) ~> mutualfixedind\nfaltable, filtable join(falfilid == filfilid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falfil\nfalfil, Lcatable join(fallcaid == lcalcaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falLca\nfalLca, labtable join(lcalabid == lablabid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> fallab\nfallab, riskobject join(lcaicaid == icaicaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falica\nfalica, mutualfixedind join(icainaid == inainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falina\nfalina, xrefCurrencyFAL join(falcurr == source_code_key_fapcurr,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> falcurr1\nfalcurr1, hlpexchangeratetousd join(filvaldate == exchange_from_date_falcurr\n\t&& target_code_fapcurr == from_currency_code_falcurr,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falcurr2\nexchrate select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_falcurr' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> hlpexchangeratetousd\nfalcurr2, xrefAgreementtype join(toString(agabusnsec) == source_code_key_agttype,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> agrtype\nagrtype, xrefCoverage join(inaintrst == source_code_key_cov,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> agrcov\nagrcov, xrefExpense join(toString(falpaycod) == source_code_key_expense,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> covexpense\ncovexpense, xrefBusinessarea join(busnareakey == source_code_key_bua,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> expensebua\nexpensebua, xrefClaimcategory join(falclmcat == source_code_key_clmcat,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> buaclmcat\nlcctablesubclm select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_lca' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> lccsubclmtable\nbuaclmcat, lcctable join(fallccid == lcclccid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> fallccmain\nfallccmain, lccsubclmtable join(fallcaid == lcclcaid_lca,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> mainstream\nmainstream derive(dim_expense_code_key = case(toString(agabusndiv)=='4',target_code_expense, case(falinout=='I','CLSET',target_code_expense)),\n\t\tvessel_type_lkp = case(trim(obbcefoty)=='900'||trim(obbcefoty)=='TFO','N/A',trim(obbcefoty)),\n\t\tdim_time_agreement = toInteger(toString(agastdate, 'yyyymmdd')),\n\t\tcreated_date = case( greaterOrEqual(length(trim(filcrstamp)),12 ), case(greater(substring(filcrstamp,1,4),'1900')\n && (greaterOrEqual(substring(filcrstamp,5,2),'01') && lesserOrEqual(substring(filcrstamp,5,2),'12'))\n && (greaterOrEqual(substring(filcrstamp,7,2),'01') && lesserOrEqual(substring(filcrstamp,7,2),'31'))\n && (greaterOrEqual(substring(filcrstamp,9,2),'00') && lesserOrEqual(substring(filcrstamp,9,2),'23'))\n && (greaterOrEqual(substring(filcrstamp,11,2),'00') && lesserOrEqual(substring(filcrstamp,11,2),'59')), \n toTimestamp(concat(substring(filcrstamp,1,8),substring(filcrstamp,9,2),':',substring(filcrstamp,11,2)),'yyyymmdd hh:mm')\n , toTimestamp(concat(substring(toString(filcrdate,'ddmmyyyy'),1,8),substring(filcrstamp,9,2),':',substring(filcrstamp,11,2)),'yyyymmdd hh:mm')\n ), toTimestamp('01/01/1900 12:00','dd/mm/yyyy hh:mm')),\n\t\tdim_client_key = case(isNull(trim(toString(agaorgins)))==true(),'N/A',concat('P',toString(agaorgins))),\n\t\tdim_incident_key = case(isNull(trim(lcalcaid))==true(),'N/A',concat('P',lcalcaid)),\n\t\tbroker_lkp = case((toString(agabusnsec)=='12'||toString(agabusndiv)=='4')&&isNull(agzfagntno)==false(),concat('P',toString(agzfagntno)),\ncase(toString(agasource)==toString(agaorgins),'PDIR99',concat('P', toString(agasource)))),\n\t\tclmtype_lkp = concat('PARIS',lcacefocc)) ~> businesskeys\nnotapplicable derive(claim_givenco_payment_org = case(falinout=='O'&&faloutcode==2,coalesce(falsettled*-1,0),toDecimal(0)),\n\t\tclaim_givenco_reserve_org = case(falinout=='O'&&faloutcode==2,coalesce(faloutstanding*-1,0),toDecimal(0)),\n\t\tclaim_gl_payment_org = case(in([toDecimal(13),toDecimal(14),toDecimal(15)],falgenamtp),toDecimal(0), case(falinout=='P',coalesce(falgenamtp,0),toDecimal(0))),\n\t\tclaim_payment_org = case(falinout=='I', coalesce(falsettled,0),case(falinout=='O'&&faloutcode==2,coalesce(falsettled,0),toDecimal(0))),\n\t\tclaim_reserve_org = case(falinout=='I', coalesce(faloutstanding,0), case(falinout=='O'&&faloutcode==2,coalesce(faloutstanding,0),toDecimal(0))),\n\t\ttransaction_date = toInteger(toString(filvaldate, 'yyyymmdd'))) ~> claimamounts\nclaimamounts derive(each(match(startsWith(name,'claim_')), trim($$, '_org')+'_usd' = $$/exchange_rate_falcurr)) ~> claimamountsexchanged\nmapsys filter(code_type_id==45) ~> vesseltype\nvesseltype select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_vesseltype' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefVesseltype\nmapsys filter(code_type_id==329) ~> employee\nemployee select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_underwriter' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefUnderwriter\nmapsys filter(code_type_id==50) ~> country\ncountry select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_country' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCountry\nemployee select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_claimshandler' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefClaimhandler\nbusinesskeys, xrefUnderwriter lookup(agauwsign == source_code_key_underwriter,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> underwriterlkp\nunderwriterlkp, xrefClaimhandler lookup(lcauwsign == source_code_key_claimshandler,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> claimhandlerlkp\nclaimhandlerlkp, xrefVesseltype lookup(vessel_type_lkp == source_code_key_vesseltype,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> vesseltyplkp\nvesseltyplkp, xrefCountry lookup(agaareacd == source_code_key_country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> countrylkp\ncountrylkp, predimsubclaim lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> predimsubclaimlkp\npredimsubclaimlkp, predimpartner lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> brokerlkp\nbrokerlkp, predimclaimtype lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> predimclaimtypelkp\npredimclaimtypelkp derive(each(match(startsWith(name,'target_')||startsWith(name,'pk_key')), $$ = coalesce($$,'N/A'))) ~> notapplicable\nclaimamountsexchanged sink(mapColumn(\n\t\ttransaction_key = falfalid,\n\t\tdim_incident_key,\n\t\tdim_coverage_key = target_code_coverage,\n\t\tdim_bua_key = target_code_bua,\n\t\tdim_agreement_type_key = target_code_agttyp,\n\t\tdim_expense_key = target_code_expense,\n\t\tdim_vessel_type_3ltr = target_code_vesseltype,\n\t\teach(match(startsWith(name,'claim_')))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> prefactclaimtranspa"
		}
	}
}