{
	"name": "m_pre_fact_claim_trans_pa",
	"properties": {
		"description": "Pre fact mapping for claim transactions, excluding guarantees and advance payments.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "mapsys",
					"description": "source_system=='PARIS'"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "icatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obbtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agztable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "faltable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "Lcatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcctable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "labtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "inatable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "filtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "exchrate"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "lcctablefal"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "predimpartner"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "qtbtable"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "predimclaimtype"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "predimsubclaim"
				}
			],
			"sinks": [
				{
					"name": "prefactclaimtranspa"
				}
			],
			"transformations": [
				{
					"name": "xrefCoverage"
				},
				{
					"name": "xrefBusinessarea"
				},
				{
					"name": "xrefExpense"
				},
				{
					"name": "expense"
				},
				{
					"name": "bua"
				},
				{
					"name": "cov"
				},
				{
					"name": "clmcat"
				},
				{
					"name": "xrefClaimcategory"
				},
				{
					"name": "agttype"
				},
				{
					"name": "xrefAgreementtype"
				},
				{
					"name": "fapcurr"
				},
				{
					"name": "xrefCurrencyFAL"
				},
				{
					"name": "icaoba"
				},
				{
					"name": "obaobb"
				},
				{
					"name": "icaendateObb"
				},
				{
					"name": "icaexchangedate"
				},
				{
					"name": "riskobject"
				},
				{
					"name": "agaagz"
				},
				{
					"name": "againa"
				},
				{
					"name": "mutualfixedind"
				},
				{
					"name": "falfil"
				},
				{
					"name": "falLca"
				},
				{
					"name": "fallab"
				},
				{
					"name": "falica"
				},
				{
					"name": "falina"
				},
				{
					"name": "falcurr1"
				},
				{
					"name": "falcurr2"
				},
				{
					"name": "hlpexchangeratetousd"
				},
				{
					"name": "agrtype"
				},
				{
					"name": "agrcov"
				},
				{
					"name": "covexpense"
				},
				{
					"name": "expensebua"
				},
				{
					"name": "buaclmcat"
				},
				{
					"name": "fallccmain"
				},
				{
					"name": "mainstream"
				},
				{
					"name": "businesskeys",
					"description": "business keys and some other columns needed for lookups or further expressions."
				},
				{
					"name": "claimamounts",
					"description": "calculating all amounts"
				},
				{
					"name": "claimamountsexchanged",
					"description": "exchanging all amounts to _stat or _usd"
				},
				{
					"name": "vesseltype"
				},
				{
					"name": "xrefVesseltype"
				},
				{
					"name": "employee"
				},
				{
					"name": "xrefUnderwriter"
				},
				{
					"name": "country"
				},
				{
					"name": "xrefCountry"
				},
				{
					"name": "xrefClaimhandler"
				},
				{
					"name": "underwriterlkp"
				},
				{
					"name": "claimhandlerlkp"
				},
				{
					"name": "vesseltyplkp"
				},
				{
					"name": "countrylkp"
				},
				{
					"name": "predimsubclaimlkp"
				},
				{
					"name": "brokerlkp"
				},
				{
					"name": "predimclaimtypelkp"
				},
				{
					"name": "notapplicable"
				}
			],
			"script": "source(output(\n\t\tsource_code_key as string,\n\t\tsource_system as string,\n\t\tcode_type_id as long,\n\t\ttarget_code as string,\n\t\ttarget_description as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select source_code_key,source_system, code_type_id, target_code, target_description from dwh_stage.t_crossreference where source_system=\\'PARIS\\'',\n\tformat: 'query') ~> mapsys\nsource(output(\n\t\ticaicaid as string,\n\t\ticainaid as string,\n\t\ticastdate as date,\n\t\ticaendate as date,\n\t\ticaagaid as string,\n\t\ticaobno as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaicaid, icainaid, icastdate, icaendate, icaagaid, icaobno from dwh_stage.p_icatable',\n\tformat: 'query') ~> icatable\nsource(output(\n\t\tobbobbid as string,\n\t\tobbobno as integer,\n\t\tobbstdate as date,\n\t\tobbendate as date,\n\t\tobbcefoty as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obbobbid, obbobno, obbstdate, obbendate, obbcefoty from dwh_stage.p_obbtable',\n\tformat: 'query') ~> obbtable\nsource(output(\n\t\tobaobno as integer,\n\t\tobaimono as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obaobno, obaimono from dwh_stage.p_obatable',\n\tformat: 'query') ~> obatable\nsource(output(\n\t\tagaagaid as string,\n\t\tagaiyear as short,\n\t\tagaagno as integer,\n\t\tagabusndiv as integer,\n\t\tagabusnsec as integer,\n\t\tagabusncla as integer,\n\t\tagasource as long,\n\t\tagaorgins as long,\n\t\tagastdate as date,\n\t\tagauwsign as string,\n\t\tagaareacd as string,\n\t\tagaisic as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agaagaid, agaiyear, agaagno, agabusndiv, agabusnsec, agabusncla, agasource, agaorgins, agastdate, agauwsign, agaareacd, agaisic from dwh_stage.p_agatable',\n\tformat: 'query') ~> agatable\nsource(output(\n\t\tagzagzid as string,\n\t\tagzfagntno as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agzagzid, agzfagntno from dwh_stage.p_agztable',\n\tformat: 'query') ~> agztable\nsource(output(\n\t\tfalfalid as string,\n\t\tfalfilid as string,\n\t\tfalcurr as string,\n\t\tfalmark as string,\n\t\tfalaclcode as string,\n\t\tfaloutcode as integer,\n\t\tfalinout as string,\n\t\tfalbillingno as long,\n\t\tfalcedsecurno as long,\n\t\tfalorgins as long,\n\t\tfalsource as long,\n\t\tfalcedent as long,\n\t\tfalduedate as date,\n\t\tfalclmcat as string,\n\t\tfalpaycod as short,\n\t\tfalbalance as decimal(28,10),\n\t\tfalownret as decimal(28,10),\n\t\tfalclmreserve as decimal(28,10),\n\t\tfalsettled as decimal(28,10),\n\t\tfaloutstanding as decimal(28,10),\n\t\tfalgencurr as string,\n\t\tfallcaid as string,\n\t\tfalagaid as string,\n\t\tfalinaid as string,\n\t\tfalicaid as string,\n\t\tfalobno as integer,\n\t\tfalfblid as string,\n\t\tfaliuwid as string,\n\t\tfalpgqid as string,\n\t\tfaluwbid as string,\n\t\tfalnsci as decimal(28,10),\n\t\tfalgenamtp as decimal(28,10),\n\t\tfallccid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select falfalid, falfilid, falcurr, falmark, falaclcode, faloutcode, falinout, falbillingno, falcedsecurno, falorgins, falsource, falcedent, falduedate, falclmcat, falpaycod, falbalance, falownret, falclmreserve, falsettled, faloutstanding, falgencurr, fallcaid, falagaid, falinaid, falicaid, falobno, falfblid, faliuwid, falpgqid, faluwbid, falnsci, falgenamtp, fallccid from dwh_stage.p_faltable where falinout in (\\'I\\',\\'P\\') or ( falinout=\\'O\\' and faloutcode= 2 )',\n\tformat: 'query') ~> faltable\nsource(output(\n\t\tlcalcaid as string,\n\t\tlcauwsign as string,\n\t\tlcaicaid as string,\n\t\tlcalabid as string,\n\t\tlcacrsign as string,\n\t\tlcatrtmco as integer,\n\t\tlcacefocc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lcalcaid, lcauwsign, lcaicaid, lcalabid, lcacrsign, lcatrtmco, lcacefocc from dwh_stage.p_lcatable',\n\tformat: 'query') ~> Lcatable\nsource(output(\n\t\tlcclccid_lca as string,\n\t\tlcclcaid_lca as string,\n\t\tlccclmtype_lca as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lcclccid as lcclccid_lca, \\nlcclcaid as lcclcaid_lca, \\nlccclmtype as lccclmtype_lca from dwh_stage.p_lcctable where lccln6=1',\n\tformat: 'query') ~> lcctable\nsource(output(\n\t\tlablabid as string,\n\t\tlabmainev as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lablabid, labmainev from dwh_stage.p_labtable',\n\tformat: 'query') ~> labtable\nsource(output(\n\t\tinainaid as string,\n\t\tinaintrst as string,\n\t\tinaagaid as string,\n\t\tinamutual as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select inainaid, inaintrst, inaagaid, inamutual from dwh_stage.p_inatable',\n\tformat: 'query') ~> inatable\nsource(output(\n\t\tfilfilid as string,\n\t\tfilvaldate as date,\n\t\tfilcrstamp as string,\n\t\tfilcrsign as string,\n\t\tfilcrdate as date,\n\t\tfilacseq as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select filfilid, filvaldate, filcrstamp, filcrsign, filcrdate, filacseq from dwh_stage.p_filtable',\n\tformat: 'query') ~> filtable\nsource(output(\n\t\trate as decimal(28,10),\n\t\tcurrency_id_from as long,\n\t\tcurrency_code_from as string,\n\t\tcurrency_id_to as long,\n\t\tcurrency_code_to as string,\n\t\tday as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.hlp_exchange_rate where currency_code_to=\\'USD\\'',\n\tformat: 'query') ~> exchrate\nsource(output(\n\t\tlcclccid_fal as string,\n\t\tlccclmtype_fal as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select lcclccid as lcclccid_fal, \\nlccclmtype as lccclmtype_fal from dwh_stage.p_lcctable ',\n\tformat: 'query') ~> lcctablefal\nsource(output(\n\t\tpk_key_broker as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select pk_key as pk_key_broker from dwh_prepare.pre_dim_partner',\n\tformat: 'query') ~> predimpartner\nsource(output(\n\t\tqtbfieldn as string,\n\t\tqtbdispynsw as string,\n\t\tqtbmdescr as string,\n\t\tqtbvalue as string,\n\t\tqtbsdescr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.p_qtbtable',\n\tformat: 'query') ~> qtbtable\nsource(output(\n\t\tpk_key_claimtype as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select pk_key_clm as pk_key_claimtype from dwh_prepare.pre_dim_claim_type',\n\tformat: 'query') ~> predimclaimtype\nsource(output(\n\t\tpk_key_subclaim as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select pk_key as pk_key_subclaim from dwh_prepare.pre_dim_sub_claim',\n\tformat: 'query') ~> predimsubclaim\ncov select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_cov' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCoverage\nbua select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_bua' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefBusinessarea\nexpense select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_expense' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefExpense\nmapsys filter(code_type_id==198) ~> expense\nmapsys filter(code_type_id==106) ~> bua\nmapsys filter(code_type_id==122) ~> cov\nmapsys filter(code_type_id==797) ~> clmcat\nclmcat select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_clmcat' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefClaimcategory\nmapsys filter(code_type_id==113) ~> agttype\nagttype select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_agttype' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefAgreementtype\nmapsys filter(code_type_id==124) ~> fapcurr\nfapcurr select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_fapcurr' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCurrencyFAL\nobatable, icatable join(obaobno == icaobno,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> icaoba\nicaoba, obbtable join(obaobno == obbobno,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter(lesserOrEqual(icaendate, coalesce(obbendate, toDate(toString(addDays(currentTimestamp(),-36500),'dd/mm/yyyy'))))\n && greaterOrEqual(icaendate, coalesce(obbendate, toDate(toString(addDays(currentTimestamp(),36500),'dd/mm/yyyy'))))) ~> icaendateObb\nicaendateObb derive(icaexchangedate = case(greaterOrEqual(icastdate, toDate(toString(currentTimestamp()),'dd/mm/yyyy')), toDate(toString(currentTimestamp()),'dd/mm/yyyy'), icastdate)) ~> icaexchangedate\nicaexchangedate select(mapColumn(\n\t\ticaicaid,\n\t\ticastdateexchange = icaexchangedate,\n\t\ticastdate,\n\t\tobaimono,\n\t\tobbcefoty,\n\t\ticachdate,\n\t\ticaourshare,\n\t\ticatotamt,\n\t\ticainaid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> riskobject\nagatable, agztable join(agaagaid == agzagzid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> agaagz\nagaagz, inatable join(inaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> againa\nagaina derive(busnareakey = case(toString(agabusndiv)=='4', concat(toString(agabusndiv),' - ',inamutual) , toString(agabusndiv) )) ~> mutualfixedind\nfaltable, filtable join(falfilid == filfilid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falfil\nfalfil, Lcatable join(fallcaid == lcalcaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falLca\nfalLca, labtable join(lcalabid == lablabid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> fallab\nfallab, riskobject join(lcaicaid == icaicaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falica\nfalica, mutualfixedind join(icainaid == inainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falina\nfalina, xrefCurrencyFAL join(falcurr == source_code_key_fapcurr,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> falcurr1\nfalcurr1, hlpexchangeratetousd join(filvaldate == exchange_from_date_falcurr\n\t&& target_code_fapcurr == from_currency_code_falcurr,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> falcurr2\nexchrate select(mapColumn(\n\t\teach(match(true()),\n\t\t\t$$+'_falcurr' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> hlpexchangeratetousd\nfalcurr2, xrefAgreementtype join(toString(agabusnsec) == source_code_key_agttype,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> agrtype\nagrtype, xrefCoverage join(inaintrst == source_code_key_cov,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> agrcov\nagrcov, xrefExpense join(toString(falpaycod) == source_code_key_expense,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> covexpense\ncovexpense, xrefBusinessarea join(busnareakey == source_code_key_bua,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> expensebua\nexpensebua, xrefClaimcategory join(falclmcat == source_code_key_clmcat,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> buaclmcat\nbuaclmcat, lcctable join(fallccid == lcclccid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> fallccmain\nfallccmain, lcctablefal join(fallcaid == lccsubclmtable@lcclcaid_lca,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> mainstream\nmainstream derive(dim_expense_code_key = case(toString(agabusndiv)=='4',target_code_expense, case(falinout=='I','CLSET',target_code_expense)),\n\t\tvessel_type_lkp = case(trim(obbcefoty)=='900'||trim(obbcefoty)=='TFO','N/A',trim(obbcefoty)),\n\t\tdim_time_agreement = toInteger(toString(agastdate, 'yyyymmdd')),\n\t\tcreated_date = case( greaterOrEqual(length(trim(filcrstamp)),12 ), case(greater(substring(filcrstamp,1,4),'1900')\n && (greaterOrEqual(substring(filcrstamp,5,2),'01') && lesserOrEqual(substring(filcrstamp,5,2),'12'))\n && (greaterOrEqual(substring(filcrstamp,7,2),'01') && lesserOrEqual(substring(filcrstamp,7,2),'31'))\n && (greaterOrEqual(substring(filcrstamp,9,2),'00') && lesserOrEqual(substring(filcrstamp,9,2),'23'))\n && (greaterOrEqual(substring(filcrstamp,11,2),'00') && lesserOrEqual(substring(filcrstamp,11,2),'59')), \n toTimestamp(concat(substring(filcrstamp,1,8),substring(filcrstamp,9,2),':',substring(filcrstamp,11,2)),'yyyymmdd hh:mm')\n , toTimestamp(concat(substring(toString(filcrdate,'ddmmyyyy'),1,8),substring(filcrstamp,9,2),':',substring(filcrstamp,11,2)),'yyyymmdd hh:mm')\n ), toTimestamp('01/01/1900 12:00','dd/mm/yyyy hh:mm')),\n\t\tdim_client_key = case(isNull(trim(toString(agaorgins)))==true(),'N/A',concat('P',toString(agaorgins))),\n\t\tdim_incident_key = case(isNull(trim(lcalcaid))==true(),'N/A',concat('P',lcalcaid)),\n\t\tbroker_lkp = case((toString(agabusnsec)=='12'||toString(agabusndiv)=='4')&&isNull(agzfagntno)==false(),concat('P',toString(agzfagntno)),\ncase(toString(agasource)==toString(agaorgins),'PDIR99',concat('P', toString(agasource)))),\n\t\tclmtype_lkp = concat('PARIS',lcacefocc)) ~> businesskeys\nnotapplicable derive(claim_givenco_payment_org = case(falinout=='O'&&faloutcode==2,coalesce(falsettled*-1,0),toDecimal(0)),\n\t\tclaim_givenco_reserve_org = case(falinout=='O'&&faloutcode==2,coalesce(faloutstanding*-1,0),toDecimal(0)),\n\t\tclaim_gl_payment_org = case(in([toDecimal(13),toDecimal(14),toDecimal(15)],falgenamtp),toDecimal(0), case(falinout=='P',coalesce(falgenamtp,0),toDecimal(0))),\n\t\tclaim_payment_org = case(falinout=='I', coalesce(falsettled,0),case(falinout=='O'&&faloutcode==2,coalesce(falsettled,0),toDecimal(0))),\n\t\tclaim_reserve_org = case(falinout=='I', coalesce(faloutstanding,0), case(falinout=='O'&&faloutcode==2,coalesce(faloutstanding,0),toDecimal(0))),\n\t\ttransaction_date = toInteger(toString(filvaldate, 'yyyymmdd'))) ~> claimamounts\nclaimamounts derive(each(match(startsWith(name,'claim_')), trim($$, '_org')+'_usd' = $$/exchange_rate_falcurr)) ~> claimamountsexchanged\nmapsys filter(code_type_id==45) ~> vesseltype\nvesseltype select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_vesseltype' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefVesseltype\nmapsys filter(code_type_id==329) ~> employee\nemployee select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_underwriter' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefUnderwriter\nmapsys filter(code_type_id==50) ~> country\ncountry select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_country' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCountry\nemployee select(mapColumn(\n\t\teach(match(name=='target_code'||name=='target_description'||name=='source_code_key'),\n\t\t\t$$+'_claimshandler' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefClaimhandler\nbusinesskeys, xrefUnderwriter lookup(agauwsign == source_code_key_underwriter,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> underwriterlkp\nunderwriterlkp, xrefClaimhandler lookup(lcauwsign == source_code_key_claimshandler,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> claimhandlerlkp\nclaimhandlerlkp, xrefVesseltype lookup(vessel_type_lkp == source_code_key_vesseltype,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> vesseltyplkp\nvesseltyplkp, xrefCountry lookup(agaareacd == source_code_key_country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> countrylkp\ncountrylkp, predimsubclaim lookup(ERROR_FUNCTION('') == pk_key_subclaim,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> predimsubclaimlkp\npredimsubclaimlkp, predimpartner lookup(broker_lkp == pk_key_broker,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> brokerlkp\nbrokerlkp, predimclaimtype lookup(ERROR_FUNCTION('') == pk_key_claimtype,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> predimclaimtypelkp\npredimclaimtypelkp derive(each(match(startsWith(name,'target_')||startsWith(name,'pk_key')), $$ = coalesce($$,'N/A'))) ~> notapplicable\nclaimamountsexchanged sink(mapColumn(\n\t\ttransaction_key = falfalid,\n\t\tdim_incident_key,\n\t\tdim_coverage_key = target_code_coverage,\n\t\tdim_bua_key = target_code_bua,\n\t\tdim_agreement_type_key = target_code_agttyp,\n\t\tdim_expense_key = target_code_expense,\n\t\tdim_vessel_type_3ltr = target_code_vesseltype,\n\t\teach(match(startsWith(name,'claim_')))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> prefactclaimtranspa"
		}
	}
}