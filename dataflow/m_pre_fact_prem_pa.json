{
	"name": "m_pre_fact_prem_pa",
	"properties": {
		"description": "Pre fact premium transaction mapping for Paris data. ",
		"folder": {
			"name": "dwh_prepare/pre_fact"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "obb"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ica"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "oba"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "aga"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "agz"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "pez"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "fap"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "fip"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "exchrate"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "tcross"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "ina"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_server",
						"type": "DatasetReference"
					},
					"name": "PreDimPartner"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pre_fact_prem_trans",
						"type": "DatasetReference"
					},
					"name": "prefactprem"
				}
			],
			"transformations": [
				{
					"name": "icaoba"
				},
				{
					"name": "obaobb",
					"description": "Left outer join on icaoba and obbtable"
				},
				{
					"name": "icaendateObb"
				},
				{
					"name": "icaexchangedate"
				},
				{
					"name": "riskobject"
				},
				{
					"name": "fiptable",
					"description": "Fiptable with filtering and derived column "
				},
				{
					"name": "faptable"
				},
				{
					"name": "pezstatcurr"
				},
				{
					"name": "peztable",
					"description": "Peztable with derived column"
				},
				{
					"name": "exchrateFap"
				},
				{
					"name": "exchrateStat"
				},
				{
					"name": "businessarea"
				},
				{
					"name": "coverage"
				},
				{
					"name": "agreementtype"
				},
				{
					"name": "currency"
				},
				{
					"name": "currency2"
				},
				{
					"name": "capitalbranch"
				},
				{
					"name": "agaagz"
				},
				{
					"name": "agapez"
				},
				{
					"name": "againa"
				},
				{
					"name": "inariskobject"
				},
				{
					"name": "icafap"
				},
				{
					"name": "MutualFixedInd"
				},
				{
					"name": "fapfip"
				},
				{
					"name": "exchFap"
				},
				{
					"name": "xrefAgt"
				},
				{
					"name": "xrefBua"
				},
				{
					"name": "xrefCov"
				},
				{
					"name": "nomatchrows",
					"description": "Setting N/A on all rows not matched in xref"
				},
				{
					"name": "exchFap2"
				},
				{
					"name": "exchStat"
				},
				{
					"name": "exchStat2"
				},
				{
					"name": "constants",
					"description": "Adding all constants needed for lookups and further expressions."
				},
				{
					"name": "expressions",
					"description": "First bulk of expressions. Columns needed for calculating premiums and commissions, + some others"
				},
				{
					"name": "premiumcomission",
					"description": "Logic for all premium and commission values, + some other columns."
				},
				{
					"name": "exchtousd"
				},
				{
					"name": "exchtousd1"
				},
				{
					"name": "xrefAgttype"
				},
				{
					"name": "xrefStatcurr"
				},
				{
					"name": "xrefFapcurr"
				},
				{
					"name": "xrefBusnarea"
				},
				{
					"name": "xrefCoverage"
				},
				{
					"name": "fapinoutFapoutcode"
				},
				{
					"name": "fippfunc"
				},
				{
					"name": "fipexchangedate"
				},
				{
					"name": "xrefCapitalBranch"
				},
				{
					"name": "xrefCapBrnch"
				},
				{
					"name": "employee"
				},
				{
					"name": "xrefEmployee"
				},
				{
					"name": "xrefEmpl"
				},
				{
					"name": "vsltyp"
				},
				{
					"name": "xrefVesseltype"
				},
				{
					"name": "premiumtype"
				},
				{
					"name": "xrefPremiumType"
				},
				{
					"name": "BusinessKeys"
				}
			],
			"script": "source(output(\n\t\tobbobbid as string,\n\t\tobbobno as integer,\n\t\tobbcefoty as string,\n\t\tobbstdate as date,\n\t\tobbendate as date\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obbobbid, obbobno, obbcefoty, obbstdate, obbendate from dwh_stage.p_obbtable',\n\tformat: 'query') ~> obb\nsource(output(\n\t\ticaicaid as string,\n\t\ticastdate as date,\n\t\ticaendate as date,\n\t\ticaobno as integer,\n\t\ticainaid as string,\n\t\ticachdate as date,\n\t\ticatotamt as long,\n\t\ticaourshare as decimal(28,10)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select icaicaid, icastdate, icaendate, icaobno, icainaid, icachdate, icatotamt, icaourshare from dwh_stage.p_icatable',\n\tformat: 'query') ~> ica\nsource(output(\n\t\tobaobno as integer,\n\t\tobaimono as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select obaobno, obaimono from dwh_stage.p_obatable',\n\tformat: 'query') ~> oba\nsource(output(\n\t\tagaagaid as string,\n\t\tagabusndiv as integer,\n\t\tagauwsign as string,\n\t\tagaareacd as string,\n\t\tagaorgins as long,\n\t\tagastdate as date,\n\t\tagabusncla as integer,\n\t\tagabusnsec as integer,\n\t\tagaagno as integer,\n\t\tagaiyear as short,\n\t\tagaisic as string,\n\t\tagasource as long,\n\t\tagabusnregion as integer,\n\t\tagabusnbranch as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agaagaid, agabusndiv, agauwsign, agaareacd, agaorgins, agastdate, agabusncla, agabusnsec, agaagno, agaiyear, agaisic, agasource, agabusnregion, agabusnbranch from dwh_stage.p_agatable',\n\tformat: 'query') ~> aga\nsource(output(\n\t\tagzagzid as string,\n\t\tagzfagntno as long,\n\t\tagzdefcurr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select agzagzid, agzfagntno, agzdefcurr from dwh_stage.p_agztable ',\n\tformat: 'query') ~> agz\nsource(output(\n\t\tpezpezid as long,\n\t\tpezdefcurr as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select pezpezid, pezdefcurr from dwh_stage.p_peztable',\n\tformat: 'query') ~> pez\nsource(output(\n\t\tfapfapid as string,\n\t\tfapinout as string,\n\t\tfapcalcprem as decimal(28,10),\n\t\tfapcalcdisc as decimal(28,10),\n\t\tfapcalcadcom as decimal(28,10),\n\t\tfapagaid as string,\n\t\tfapfipid as string,\n\t\tfapcurr as string,\n\t\tfapinaid as string,\n\t\tfapicaid as string,\n\t\tfapcalcownreb as decimal(28,10),\n\t\tfapcalctax as decimal(28,10),\n\t\tfapipaid as string,\n\t\tfapclosdisc as decimal(28,10),\n\t\tfapclosownreb as decimal(28,10),\n\t\tfapclosprem as decimal(28,10),\n\t\tfapclostax as decimal(28,10),\n\t\tfapclosadcom as decimal(28,10),\n\t\tfapoutcode as integer,\n\t\tfapcalcoutcom as decimal(28,10),\n\t\tfapcalcagcom as decimal(28,10),\n\t\tfapclosagcom as decimal(28,10),\n\t\tfapclosoutcom as decimal(28,10),\n\t\tfapaccdescr as string,\n\t\tfapmark as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select fapfapid,\\n\t\tfapinout,\\n\t\tfapcalcprem,\\n\t\tfapcalcdisc,\\n\t\tfapcalcadcom,\\n\t\tfapagaid,\\n\t\tfapfipid,\\n\t\tfapcurr,\\n\t\tfapinaid,\\n\t\tfapicaid,\\n\t\tfapcalcownreb,\\n\t\tfapcalctax,\\n\t\tfapipaid,\\n\t\tfapclosdisc,\\n\t\tfapclosownreb,\\n\t\tfapclosprem,\\n\t\tfapclostax,\\n\t\tfapclosadcom,\\n\t\tfapoutcode,\\n\t\tfapcalcoutcom,\\n\t\tfapcalcagcom,\\n\t\tfapclosagcom,\\n\t\tfapclosoutcom,\\n\t\tfapaccdescr,\\n\t\tfapmark from dwh_stage.p_faptable',\n\tformat: 'query') ~> fap\nsource(output(\n\t\tfipfipid as string,\n\t\tfipvaldate as date,\n\t\tfipcrdate as date,\n\t\tfipcrstamp as string,\n\t\tfipcrsign as string,\n\t\tfippfunc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \tfipfipid,\\n\t\tfipvaldate,\\n\t\tfipcrdate,\\n\t\tfipcrstamp,\\n\t\tfipcrsign,\\n\t\tfippfunc\\n\t\tfrom dwh_stage.p_fiptable',\n\tformat: 'query') ~> fip\nsource(output(\n\t\trate as long,\n\t\tcurrency_id_from as long,\n\t\tcurrency_code_from as string,\n\t\tcurrency_id_to as long,\n\t\tcurrency_code_to as string,\n\t\tday as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dwh_stage.hlp_exchange_rate',\n\tformat: 'query') ~> exchrate\nsource(output(\n\t\tsource_system as string,\n\t\tsource_code_key as string,\n\t\ttarget_code as string,\n\t\tcode_type_id as long,\n\t\ttarget_description as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select source_system, source_code_key, target_code, code_type_id, target_description from dwh_stage.t_crossreference',\n\tformat: 'query') ~> tcross\nsource(output(\n\t\tinainaid as string,\n\t\tinamutual as string,\n\t\tinacurr as string,\n\t\tinaintrst as string,\n\t\tinaagaid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select \tinainaid,\\n\t\tinamutual,\\n\t\tinacurr,\\n\t\tinaintrst,\\n\t\tinaagaid\\nfrom dwh_stage.p_inatable',\n\tformat: 'query') ~> ina\nsource(output(\n\t\tpk_key_broker as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select pk_key as pk_key_broker\\nfrom dwh_prepare.pre_dim_partner',\n\tformat: 'query') ~> PreDimPartner\noba, ica join(obaobno == icaobno,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> icaoba\nicaoba, obb join(obaobno == obbobno,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> obaobb\nobaobb filter(lesserOrEqual(icaendate, coalesce(obbendate, toDate(toString(addDays(currentTimestamp(),-36500),'dd/mm/yyyy'))))\n && greaterOrEqual(icaendate, coalesce(obbendate, toDate(toString(addDays(currentTimestamp(),36500),'dd/mm/yyyy'))))) ~> icaendateObb\nicaendateObb derive(icaexchangedate = case(greaterOrEqual(icastdate, toDate(toString(currentTimestamp()),'dd/mm/yyyy')), toDate(toString(currentTimestamp()),'dd/mm/yyyy'), icastdate)) ~> icaexchangedate\nicaexchangedate select(mapColumn(\n\t\ticaicaid,\n\t\ticastdateexchange = icaexchangedate,\n\t\ticastdate,\n\t\tobaimono,\n\t\tobbcefoty,\n\t\ticachdate,\n\t\ticaourshare,\n\t\ticatotamt,\n\t\ticainaid\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> riskobject\nfipexchangedate select(mapColumn(\n\t\tfipfipid,\n\t\tfipvaldate,\n\t\tfipcrdate,\n\t\tfipcrstamp,\n\t\tfipcrsign,\n\t\tfippfunc,\n\t\tfipexchangedate\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> fiptable\nfapinoutFapoutcode select(mapColumn(\n\t\tfapfapid,\n\t\tfapinout,\n\t\tfapcalcprem,\n\t\tfapcalcdisc,\n\t\tfapcalcadcom,\n\t\tfapagaid,\n\t\tfapfipid,\n\t\tfapcurr,\n\t\tfapinaid,\n\t\tfapicaid,\n\t\tfapcalcownreb,\n\t\tfapcalctax,\n\t\tfapipaid,\n\t\tfapclosdisc,\n\t\tfapclosownreb,\n\t\tfapclosprem,\n\t\tfapclostax,\n\t\tfapclosadcom,\n\t\tfapoutcode,\n\t\tfapcalcoutcom,\n\t\tfapcalcagcom,\n\t\tfapclosagcom,\n\t\tfapclosoutcom,\n\t\tfapaccdescr,\n\t\tfapmark\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> faptable\npez derive(pezstatcurr = coalesce(pezdefcurr,'USD')) ~> pezstatcurr\npezstatcurr select(mapColumn(\n\t\tpezpezid,\n\t\tpezdefcurr,\n\t\tpezstatcurr\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> peztable\nexchtousd select(mapColumn(\n\t\trate_fapcurr = rate,\n\t\tcurrency_id_from,\n\t\tcurrency_code_from_fapcurr = currency_code_from,\n\t\tcurrency_id_to,\n\t\tcurrency_code_to_fapcurr = currency_code_to,\n\t\tday_fapcurr = day\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateFap\nexchtousd1 select(mapColumn(\n\t\trate_statcurr = rate,\n\t\tcurrency_id_from,\n\t\tcurrency_code_from_statcurr = currency_code_from,\n\t\tcurrency_id_to,\n\t\tcurrency_code_to_statcurr = currency_code_to,\n\t\tday_statcurr = day\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchrateStat\ntcross filter(source_system=='PARIS' && code_type_id==106) ~> businessarea\ntcross filter(source_system=='PARIS' && code_type_id==122) ~> coverage\ntcross filter(source_system=='PARIS' && code_type_id==113) ~> agreementtype\ntcross filter(source_system=='PARIS' && code_type_id==124) ~> currency\ntcross filter(source_system=='PARIS' && code_type_id==124) ~> currency2\ntcross filter(source_system=='PARIS' && code_type_id==464) ~> capitalbranch\naga, agz join(agaagaid == agzagzid,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> agaagz\nagaagz, peztable join(agaorgins == pezpezid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> agapez\nagapez, ina join(inaagaid == agaagaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> againa\nMutualFixedInd, riskobject join(inainaid == icainaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> inariskobject\ninariskobject, faptable join(icaicaid == fapicaid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> icafap\nagaina derive(busnareakey = case(agabusndiv==4, concat(toString(agabusndiv),' - ',inamutual), toString(agabusndiv)),\n\t\tcapbranchkey = concat(toString(agabusnbranch),' - ',toString(agabusnregion))) ~> MutualFixedInd\nicafap, fiptable join(fapfipid == fipfipid,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> fapfip\nBusinessKeys, xrefFapcurr join(fapcurr == source_code_key_fapcurr,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> exchFap\nexchFap2, xrefAgttype join(toString(agabusnsec) == source_code_key_agttype,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> xrefAgt\nxrefAgt, xrefBusnarea join(busnareakey == source_code_key_bua,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> xrefBua\nxrefCapBrnch, xrefCoverage join(inaintrst == source_code_key_cov,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> xrefCov\nconstants derive(each(match(startsWith(name,'target_code')), $$ = coalesce($$, 'N/A'))) ~> nomatchrows\nexchFap, exchrateFap lookup(target_code_fapcurr == currency_code_from_fapcurr\n\t&& fipexchangedate == day_fapcurr,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> exchFap2\nxrefCov, xrefStatcurr join(pezstatcurr == source_code_key_statcurr,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> exchStat\nexchStat, exchrateStat lookup(fipexchangedate == day_statcurr\n\t&& target_code_statcurr == currency_code_from_statcurr,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> exchStat2\nxrefEmpl derive(reporting_date = toDate(toString(currentTimestamp()),'dd/mm/yyyy'),\n\t\tfixed = '0',\n\t\tnotapplicable = 'NA',\n\t\tlast_updated_by = 'm_pre_fact_prem_pa',\n\t\tdim_source_system = 'PARIS') ~> constants\nnomatchrows derive(bus_area_source = case(toString(agabusndiv)=='4', concat(toString(agabusndiv),' - ', inamutual), toString(agabusndiv)),\n\t\tvoucher_no = trim(substring(fapfapid ,2,8)),\n\t\ton_risk_ind = case(greaterOrEqual(reporting_date,icastdate)&&lesserOrEqual(reporting_date,icachdate),'Y','N'),\n\t\tagr_key = agaagaid,\n\t\tfapaccdescr = case(like(fapaccdescr, '%PREM%'),'PREM', case(like(fapaccdescr, '%CALC%'),'CALC',fapaccdescr))) ~> expressions\nexpressions derive(accounting_val_date = fipvaldate,\n\t\ttransaction_date = toInteger(toString(fipvaldate, 'yyyymmdd')),\n\t\tagreement_date = toInteger(toString(agastdate, 'yyyymmdd')),\n\t\tprefix_peaid = concat('P', toString(agaorgins)),\n\t\tcommission_closed_gross_org = coalesce(fapclosdisc+fapclosadcom+fapclosoutcom+fapclosagcom,0),\n\t\tcommission_closed_gross_usd = coalesce((fapclosdisc+fapclosadcom+fapclosoutcom+fapclosagcom)/rate_fapcurr,0),\n\t\tcommission_written_gross_org = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),coalesce(fapcalcdisc+fapcalcadcom+fapcalcoutcom+fapcalcagcom,toDecimal(0)))),\n\t\tcommission_written_gross_usd = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),coalesce((fapcalcdisc+fapcalcadcom+fapcalcoutcom+fapcalcagcom)/rate_fapcurr,0))),\n\t\tcommission_closed_givenco_org = case(fapinout=='O'&&fapoutcode==2,coalesce(fapclosdisc  +  fapclosadcom +  fapclosagcom +  fapclosoutcom,0)*-1,0),\n\t\tcommission_closed_givenco_usd = case(fapinout=='O'&&fapoutcode==2,coalesce((fapclosdisc  +  fapclosadcom +  fapclosagcom +  fapclosoutcom)/rate_fapcurr,0)*-1,toDecimal(0)),\n\t\tcommission_estimated_givenco_org = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),coalesce(fapcalcdisc+fapcalcadcom+fapcalcoutcom+fapcalcagcom,toDecimal(0))*-1)),\n\t\tcommission_estimated_givenco_usd = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),coalesce((fapcalcdisc+fapcalcadcom+fapcalcoutcom+fapcalcagcom)/rate_fapcurr,toDecimal(0))*-1)),\n\t\tcommission_last_est_gross_org = coalesce(fapcalcdisc  +  fapcalcadcom +  fapcalcoutcom + fapcalcagcom,0),\n\t\tcommission_last_est_gross_stat = coalesce(((fapcalcdisc  +  fapcalcadcom +  fapcalcoutcom + fapcalcagcom)/rate_fapcurr)/rate_fapcurr,0),\n\t\tcommission_last_est_gross_usd = coalesce((fapcalcdisc  +  fapcalcadcom +  fapcalcoutcom + fapcalcagcom)/rate_fapcurr,0),\n\t\tpremium_closed_givenco_org = case(fapinout=='O'&&fapoutcode==2,coalesce(fapclosprem+fapclosownreb+fapclostax,0),0),\n\t\tpremium_closed_givenco_usd = case(fapinout=='O'&&fapoutcode==2,coalesce((fapclosprem+fapclosownreb+fapclostax)/rate_fapcurr,toDecimal(0)),toDecimal(0)),\n\t\tpremium_closed_gross_org = coalesce((fapclosprem+fapclosownreb+fapclostax)*-1,0),\n\t\tpremium_closed_gross_usd = coalesce((fapclosprem+fapclosownreb+fapclostax)/rate_fapcurr *-1,toDecimal(0)),\n\t\tpremium_closed_gross_stat = coalesce(((fapclosprem+fapclosownreb+fapclostax)/rate_fapcurr)/rate_statcurr *-1,toDecimal(0)),\n\t\tpremium_estimated_givenco_org = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),case(fapinout=='O'&&fapoutcode==2,coalesce((fapcalcprem+fapcalcownreb+fapcalctax),toDecimal(0)),toDecimal(0)))),\n\t\tpremium_estimated_givenco_usd = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),case(fapinout=='O'&&fapoutcode==2,coalesce((fapcalcprem+fapcalcownreb+fapcalctax)/rate_fapcurr,toDecimal(0)),toDecimal(0)))),\n\t\tpremium_last_est_gross_org = coalesce((fapcalcprem+fapcalcownreb+fapcalctax)*-1,0),\n\t\tpremium_last_est_gross_usd = coalesce((fapcalcprem+fapcalcownreb+fapcalctax)/rate_fapcurr*-1,0),\n\t\tpremium_last_est_gross_stat = coalesce((fapcalcprem+fapcalcownreb+fapcalctax)/rate_fapcurr/rate_statcurr*-1,0),\n\t\tpremium_written_gross_org = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),coalesce((fapcalcprem+fapcalcownreb+fapcalctax)*-1,toDecimal(0)))),\n\t\tpremium_written_gross_usd = case((fapaccdescr=='PREM'||fapaccdescr=='CALC')&&fapmark=='E',toDecimal(0),case(fapaccdescr=='LSTINS'&&fapmark!='L',toDecimal(0),coalesce((fapcalcprem+fapcalcownreb+fapcalctax)/rate_fapcurr*-1,toDecimal(0)))),\n\t\tcreated_date = case( greaterOrEqual(length(trim(fipcrstamp)),12 ), case(greater(substring(fipcrstamp,1,4),'1900')\n && (greaterOrEqual(substring(fipcrstamp,5,2),'01') && lesserOrEqual(substring(fipcrstamp,5,2),'12'))\n && (greaterOrEqual(substring(fipcrstamp,7,2),'01') && lesserOrEqual(substring(fipcrstamp,7,2),'31'))\n && (greaterOrEqual(substring(fipcrstamp,9,2),'00') && lesserOrEqual(substring(fipcrstamp,9,2),'23'))\n && (greaterOrEqual(substring(fipcrstamp,11,2),'00') && lesserOrEqual(substring(fipcrstamp,11,2),'59')), \n toTimestamp(concat(substring(fipcrstamp,1,8),substring(fipcrstamp,9,2),':',substring(fipcrstamp,11,2)),'yyyymmdd hh:mm')\n , toTimestamp(concat(substring(fipcrstamp,1,8),substring(fipcrstamp,9,2),':',substring(fipcrstamp,11,2)),'yyyymmdd hh:mm')\n ), toTimestamp('01/01/1900 12:00','dd/mm/yyyy hh:mm'))) ~> premiumcomission\nexchrate filter(currency_code_to=='USD') ~> exchtousd\nexchrate filter(currency_code_to=='USD') ~> exchtousd1\nagreementtype select(mapColumn(\n\t\tsource_code_key_agttype = source_code_key,\n\t\ttarget_code_agttype = target_code,\n\t\ttarget_description_agttype = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefAgttype\ncurrency2 select(mapColumn(\n\t\tsource_code_key_statcurr = source_code_key,\n\t\ttarget_code_statcurr = target_code,\n\t\ttarget_description_statcurr = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefStatcurr\ncurrency select(mapColumn(\n\t\tsource_code_key_fapcurr = source_code_key,\n\t\ttarget_code_fapcurr = target_code,\n\t\ttarget_description_fapcurr = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefFapcurr\nbusinessarea select(mapColumn(\n\t\tsource_code_key_bua = source_code_key,\n\t\ttarget_code_bua = target_code,\n\t\ttarget_description_bua = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefBusnarea\ncoverage select(mapColumn(\n\t\tsource_code_key_cov = source_code_key,\n\t\ttarget_code_cov = target_code,\n\t\ttarget_description_cov = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCoverage\nfap filter(fapinout=='I' || (fapinout=='O' && fapoutcode==2)) ~> fapinoutFapoutcode\nfip filter(fippfunc == 'B' || fippfunc=='C') ~> fippfunc\nfippfunc derive(fipexchangedate = case(lesserOrEqual(fipvaldate,toDate('01011978','dd/mm/yyyy')),toDate('01011978','dd/mm/yyyy'), fipvaldate)) ~> fipexchangedate\ncapitalbranch select(mapColumn(\n\t\ttarget_description_capbranch = target_description,\n\t\ttarget_code_capbranch = target_code,\n\t\tsource_code_key_capbranch = source_code_key\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefCapitalBranch\nxrefBua, xrefCapitalBranch join(capbranchkey == source_code_key_capbranch,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> xrefCapBrnch\ntcross filter(code_type_id==329) ~> employee\nemployee select(mapColumn(\n\t\tsource_code_key_employee = source_code_key,\n\t\ttarget_code_employee = target_code,\n\t\ttarget_description_employee = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefEmployee\nexchStat2, xrefEmployee join(agauwsign == source_code_key_employee,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> xrefEmpl\ntcross filter(code_type_id==45) ~> vsltyp\nvsltyp select(mapColumn(\n\t\tsource_code_key_vesseltype = source_code_key,\n\t\ttarget_code_vesseltype = target_code,\n\t\ttarget_description_vesseltype = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefVesseltype\ntcross filter(code_type_id==802) ~> premiumtype\npremiumtype select(mapColumn(\n\t\tsource_code_key_premtyp = source_code_key,\n\t\ttarget_code_premtyp = target_code,\n\t\ttarget_description_premtyp = target_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> xrefPremiumType\nfapfip derive(prem_type_key = concat(case(fapmark=='E','RELE',coalesce(fapaccdescr,'N/A')),' - ',toString(agabusndiv),' - ',coalesce(inamutual,'N')),\n\t\tvessel_type_key = case(in(['900','TFO'],obbcefoty)==true(),'N/A',obbcefoty),\n\t\tbroker_key = case((agabusnsec==12||agabusndiv==4)&&isNull(agzfagntno)==false(),concat('P',toString(agzfagntno)),case(toString(agasource)==toString(agaorgins),'PDIR99',concat('P',toString(agasource))) )) ~> BusinessKeys\npremiumcomission sink(input(\n\t\tpk_transaction_key as string,\n\t\tinvalidated_ind as string,\n\t\tpremium_last_est_gross_usd as decimal(28,10),\n\t\tlast_updated_by as string,\n\t\tpremium_rr_gross_org as decimal(28,10),\n\t\tpremium_closed_gross_stat as decimal(28,10),\n\t\tdim_client_key as string,\n\t\tcommission_rr_gross_usd as decimal(28,10),\n\t\tcommission_rr_gross_org as decimal(28,10),\n\t\tpremium_closed_gross_org as decimal(28,10),\n\t\tpremium_rr_gross_usd as decimal(28,10),\n\t\tcreated_by as string,\n\t\tmap_date as date,\n\t\tdim_agreement_key as string,\n\t\tcomm_est_gross_usd_orig as string,\n\t\tdate_last_updated as timestamp,\n\t\tdim_risk_object as string,\n\t\tdim_time_transaction as long,\n\t\tdim_country_key as string,\n\t\taccounting_val_date_comm as date,\n\t\tpremium_closed_gross_usd as decimal(28,10),\n\t\ttransfer_date as date,\n\t\tdim_premium_type_key as string,\n\t\tdim_time_agreement as long,\n\t\tpremium_closed_givenco_usd as decimal(28,10),\n\t\tcommission_last_est_gross_org as decimal(28,10),\n\t\taccounting_val_date as date,\n\t\tdim_premium_line_key as string,\n\t\tcreated_date as date,\n\t\tfixed_mutual_ind as string,\n\t\tdim_currency_key as string,\n\t\ton_risk_ind as string,\n\t\tdeleted_ind as string,\n\t\tcommission_closed_givenco_usd as decimal(28,10),\n\t\tdim_source_system_key as string,\n\t\tdate_deleted as date,\n\t\tdim_agreement_type_key as string,\n\t\tdim_broker as string,\n\t\tdim_coverage_key as string,\n\t\tvoucher_no_commission as string,\n\t\tpremium_estimated_gross_stat as decimal(28,10),\n\t\tdim_business_area_key as string,\n\t\tcommision_estimated_gross_stat as decimal(28,10),\n\t\tdim_partner_team as string,\n\t\tdim_underwriter_key as string,\n\t\tpremium_rr_gross_stat as decimal(28,10),\n\t\tcommission_estimated_gross_org as decimal(28,10),\n\t\tvoucher_no as string,\n\t\tcommision_closed_gross_usd as decimal(28,10),\n\t\tcommission_last_est_gross_usd as decimal(28,10),\n\t\tprem_est_gross_usd_orig as decimal(28,10),\n\t\tinserted_by as string,\n\t\tpremium_estimated_gross_org as decimal(28,10),\n\t\tcommision_estimated_gross_usd as decimal(28,10),\n\t\tdim_risk_group_key as string,\n\t\tcommission_closed_givenco_org as decimal(28,10),\n\t\tpremium_closed_givenco_org as decimal(28,10),\n\t\tdeferred_actual_call_ind as string,\n\t\tcommission_estimat_givenco_usd as decimal(28,10),\n\t\tnote_date as date,\n\t\tpremium_estimated_gross_usd as decimal(28,10),\n\t\tpremium_last_est_gross_org as decimal(28,10),\n\t\tpremium_estimated_givenco_usd as decimal(28,10),\n\t\tpremium_last_est_gross_stat as decimal(28,10),\n\t\tcommission_estimat_givenco_org as decimal(28,10),\n\t\tcommission_rr_gross_stat as decimal(28,10),\n\t\tdim_market_area as string,\n\t\tpremium_estimated_givenco_org as decimal(28,10),\n\t\tdate_inserted as timestamp,\n\t\tcommission_last_est_gross_stat as decimal(28,10),\n\t\tcommision_closed_gross_org as decimal(28,10),\n\t\tdim_vessel_main_det_imono as string,\n\t\tdim_vessel_type_3ltr as string,\n\t\tdim_capital_branch as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tpk_transaction_key = fapfapid,\n\t\tcommission_rr_gross_usd = commission_last_est_gross_usd,\n\t\tcommission_rr_gross_org = commission_last_est_gross_org,\n\t\tpremium_closed_gross_org,\n\t\tpremium_rr_gross_usd = premium_last_est_gross_usd,\n\t\tcreated_by = fipcrsign,\n\t\tdim_agreement_key = agr_key,\n\t\tdim_time_transaction = transaction_date,\n\t\taccounting_val_date_comm = accounting_val_date,\n\t\tpremium_closed_gross_usd,\n\t\tpremium_closed_givenco_usd,\n\t\tcommission_last_est_gross_org,\n\t\taccounting_val_date,\n\t\tcreated_date,\n\t\ton_risk_ind,\n\t\tcommission_closed_givenco_usd,\n\t\tdim_source_system_key = dim_source_system,\n\t\tdim_agreement_type_key = target_code_agttype,\n\t\tdim_broker,\n\t\tdim_coverage_key = target_code_cov,\n\t\tvoucher_no_commission = voucher_no,\n\t\tdim_business_area_key = target_code_bua,\n\t\tdim_underwriter_key = target_code_employee,\n\t\tpremium_rr_gross_stat = premium_last_est_gross_stat,\n\t\tcommission_estimated_gross_org = commission_written_gross_org,\n\t\tvoucher_no,\n\t\tcommision_closed_gross_usd = commission_closed_gross_usd,\n\t\tcommission_last_est_gross_usd,\n\t\tpremium_estimated_gross_org = premium_written_gross_org,\n\t\tcommision_estimated_gross_usd = commission_written_gross_usd,\n\t\tcommission_closed_givenco_org,\n\t\tpremium_closed_givenco_org,\n\t\tcommission_estimat_givenco_usd = commission_estimated_givenco_usd,\n\t\tpremium_estimated_gross_usd = premium_written_gross_usd,\n\t\tpremium_last_est_gross_org,\n\t\tpremium_estimated_givenco_usd,\n\t\tpremium_last_est_gross_stat,\n\t\tcommission_estimat_givenco_org = commission_estimated_givenco_org,\n\t\tcommission_rr_gross_stat = commission_last_est_gross_stat,\n\t\tpremium_estimated_givenco_org,\n\t\tcommission_last_est_gross_stat,\n\t\tcommision_closed_gross_org = commission_closed_gross_org,\n\t\tdim_vessel_main_det_imono = notapplicable,\n\t\tdim_capital_branch = {nomatchrows@target_code_capbranch},\n\t\tdim_client_key = prefix_peaid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> prefactprem"
		}
	}
}